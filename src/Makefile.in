# This file is part of muforth: https://muforth.nimblemachines.com/
#
# Copyright (c) 2002-2018 David Frech. (Read the LICENSE for details.)

###
### Makefile for muforth, a "micro" Forth
###

# Pull in architecture-specific settings generated by configure.sh
.include "arch.mk"

# Read in local settings, such as C compiler settings, or optional inclusions
# (eg, WITH_LFSR)
# .sinclude fails on OpenBSD!
.include "local.mk"

CFLAGS=		-O2 -Wall -fomit-frame-pointer ${ARCH_C} ${DEBUG}
LDFLAGS=	${ARCH_LD}
#DEBUG=		-g -DDEBUG -DBEING_DEFINED
#DEBUG+=		-DBEING_DEFINED
#DEBUG+=		-DDEBUG_TOKEN
#DEBUG+=		-DDEBUG_STACK
#DEBUG+=		-DDEBUG_USB_ENUMERATION

# Core objects
COREOBJS=	kernel.o engine-itc.o interpret.o dict.o error.o

# Optional bits
OPTOBJS=	${LOCALOBJS}

.ifdef WITH_LFSR
# Add the linear feedback shift register experiments
OPTOBJS+=	lfsr.o
.endif

# version.h depends on ${VERSOBJS), and muforth.o depends on version.h
VERSOBJS=	${COREOBJS} ${ARCHOBJS} ${OPTOBJS}
ALLOBJS=	${VERSOBJS} muforth.o
makefiles=	Makefile arch.mk local.mk
DEPFILES=	$(makefiles) muforth.h env.h public.h

.PHONY: all clean httplink diffsed

all : muforth

${ALLOBJS} : ${DEPFILES}

# Only make a new public.h - upon which _all_ .o files depend, and so will
# _all_ be remade if it changes - if the contents are actually different from
# the last run.

public.h : .public.h
	@if cmp -s ${.ALLSRC} ${.TARGET} ; then \
		echo No changes to ${.TARGET} ; \
	else \
		echo Making ${.TARGET} ; \
		cp -f ${.ALLSRC} ${.TARGET} ; \
	fi

.public.h : ${ALLOBJS:.o=.ph}
	@(echo "/* This file is automagically generated. Do not edit! */"; \
	cat ${.ALLSRC}) > ${.TARGET}

runtime_chain.h : public.h ../scripts/gen_dict_chain.sed $(makefiles)
	@echo Making ${.TARGET}
	@(echo "/* This file is automagically generated. Do not edit! */"; \
	sed ${SEDEXT} \
		-f ../scripts/keep_preprocessor.sed \
		-e '/^void mu_runtime/!d' \
		-e 's/mu_runtime_/mu_/' \
		-f ../scripts/gen_dict_chain.sed \
		-e 's/mu_/mu_runtime_/' public.h \
	) > ${.TARGET}

forth_chain.h : public.h ../scripts/gen_dict_chain.sed $(makefiles)
	@echo Making ${.TARGET}
	@(echo "/* This file is automagically generated. Do not edit! */"; \
	sed ${SEDEXT} \
		-f ../scripts/keep_preprocessor.sed \
		-e '/^void mu_compiler/d' \
		-e '/^void mu_runtime/d' \
		-f ../scripts/gen_dict_chain.sed public.h \
	) > ${.TARGET}

compiler_chain.h : public.h ../scripts/gen_dict_chain.sed $(makefiles)
	@echo Making ${.TARGET}
	@(echo "/* This file is automagically generated. Do not edit! */"; \
	sed ${SEDEXT} \
		-f ../scripts/keep_preprocessor.sed \
		-e '/^void mu_compiler/!d' \
		-e 's/mu_compiler_/mu_/' \
		-f ../scripts/gen_dict_chain.sed \
		-e 's/mu_/mu_compiler_/' public.h \
	) > ${.TARGET}

dict.o : forth_chain.h compiler_chain.h runtime_chain.h

.SUFFIXES : .ph .asm

${ALLOBJS:.o=.ph} : $(makefiles)

.c.ph :
	@echo Making ${.TARGET}
	@(echo "/* ${.IMPSRC} */"; \
	sed ${SEDEXT} -n \
		-e '/^static /d' \
		-e '/^#(if|else|endif)/p' \
		-e 's/^([a-z]+ \**[a-zA-Z_0-9]+)\((void)?\).*$$/\1(void);/p' \
		-e 's/^CODE\(([a-zA-Z_0-9]+)\)$$/extern code_cell p_\1;/p' \
		${.IMPSRC}; \
	echo) > ${.TARGET}

env.h : envtest
	./envtest > ${.TARGET}

envtest : $(makefiles) envtest.c
	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} envtest.c

muforth.o : version.h

version.h : ${VERSOBJS}
	@echo Making ${.TARGET}
	@echo "#define BUILD_TIME `date \"+%s\"`" > ${.TARGET}
	@echo "#define BUILD_DATE \"`date \"+%Y-%b-%d %R\"`\"" >> ${.TARGET}

file.o : muhome.h

muhome.h : ${makefiles}
	@echo Making ${.TARGET}
	@echo "#define MU_DIR \"${MU_DIR}\"" > ${.TARGET}

muforth : ${ALLOBJS} ${DEPFILES}
	${CC} ${LDFLAGS} -o ${.TARGET} ${ALLOBJS} ${LIBS}

muforth-bare : ${ALLOBJS} ${DEPFILES}
	${CC} ${LDFLAGS} -nodefaultlibs -o ${.TARGET} ${ALLOBJS} ${LIBS}

${ALLOBJS:.o=.asm} : $(DEPFILES)

.c.asm :
	${CC} ${CFLAGS} -S -o ${.TARGET} -c ${.IMPSRC}

clean :
	rm -f muforth muforth32 muforth64
	rm -f version.h muhome.h *.o *.asm env.h envtest
	rm -f *.ph .public.h public.h forth_chain.h compiler_chain.h
	rm -f image.*

distclean : clean
	rm -f Makefile GNUmakefile *.sed

# Making ARM image
image.c : target/ARM/meta.mu4 target/ARM/kernel.mu4 muforth
	@echo Making ARM image.c
	./muforth -d debug-dot -f target/ARM/load.mu4 gen-c-image bye > ${.TARGET}

image.bin : target/ARM/meta.mu4 target/ARM/kernel.mu4 muforth
	@echo Making ARM image.bin
	./muforth -d debug-dot -f target/ARM/load.mu4 gen-binary-image bye > ${.TARGET}

# program avr via avrdude
avr.img : target/AVR/loader.mu4 target/AVR/bitbang.mu4
	./muforth -v -f target/AVR/loader.mu4 -f target/AVR/bitbang.mu4 bye

avr : avr.img
	avrdude -v -c stk500 -p t45 -P /dev/ttyS0 -U flash:w:${.ALLSRC}:r

# install Vim bits
install-vim :
	tar cf - .vim | (cd ~; tar xf -)

### BSD start ###

#############################################################################
## Targets for packaging things up, esp for people without sed, sh, etc.
#############################################################################

# put or modify links to homepage in source files
SEDFILES=	README Makefile.in muforth.h *.c *.mu4
MU4DIRS=	Test cf games lib target target/common target-arm
httplink :
	for f in ${SEDFILES}; do \
		sed ${SEDEXT} -f ../scripts/httplink.sed $$f > $$f.sed; done
	for d in ${MU4DIRS}; do \
		for f in $$d/*.mu4; do \
			sed ${SEDEXT} -f ../scripts/httplink.sed $$f > $$f.sed; done; done

diffsed :
	-(for f in ${SEDFILES}; do diff -u $$f $$f.sed ; done) | less
	-(for d in ${MU4DIRS}; do \
		for f in $$d/*.mu4; do \
			diff -u $$f $$f.sed; done; done) | less

mvsed :
	for f in ${SEDFILES}; do mv -f $$f.sed $$f ; done
	for d in ${MU4DIRS}; do \
		for f in $$d/*.mu4; do \
			mv -f $$f.sed $$f; done; done

GNUmakefile : Makefile.in
	mv Makefile BSDmakefile
	./configure.sh gnu
	mv Makefile GNUmakefile
	mv BSDmakefile Makefile

# make the files that are hard to make, eg , for people on Windows ;-)
HFILES=		version.h public.h forth_chain.h compiler_chain.h
hfiles : ${HFILES}

MUFORTH!=	basename ${.CURDIR}
distmax : distclean GNUmakefile ${HFILES}
	(cd ..; tar cvf - \
		--exclude .svn \
		--exclude "*.tar.gz" \
		--exclude "*~" ${MUFORTH} | \
		gzip -9 > muforth-max.tar.gz)

# same as above, but without the generated .h files
dist : distclean GNUmakefile
	(cd ..; tar cvf - \
		--exclude .svn \
		--exclude "*.tar.gz" \
		--exclude "*~" ${MUFORTH} | \
		gzip -9 > muforth.tar.gz)

dists ! dist distmax

### BSD end ###
