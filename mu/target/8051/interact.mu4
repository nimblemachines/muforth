| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading 8051 interaction

variable chatting

variable chat-vector
: chat-cmd   ( index - index+1)  dup  cells constant  1+
             does> @  chat-vector @ =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0
chat-cmd t.hello       ( - chunk-size)
chat-cmd t.get-status  ( - rp pc psw)
chat-cmd t.run         ( pc rp)
chat-cmd t.read        ( buf a u)
chat-cmd t.write       ( buf a u)
chat-cmd t.flash-begin
chat-cmd t.flash-end
chat-cmd t.erase       ( a)
chat-cmd t.program     ( buf a u)
drop

: >image   ['] read-host-image  ( read from memory image)      du-target ;
: >chat    ['] t.read           ( read from connected target)  du-target ;

| Chunk size is reported by the debug interface. Always use this when
| copying RAM contents or programming the flash!

variable /chunk  ( chunk size, as reported by debug interface)
   256 /chunk !  ( sane default)

: copy-chunk  ( 'target len - 'target+len)
   | cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+ -rot t.write  pop ;

: copy-region  ( a u)
   | cr ." copy-region "  2dup swap u. u.
   /chunk @  /mod ( r q)  swap push  for   /chunk @  copy-chunk  next
                                    pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)
variable xram-copied  ( pointer to first un-copied byte)

| Copy ram or xram. We pass the address of correct copied count variable,
| and set the region before calling the copy.

: copy-(x)ram  ( 'copied)
   dup @  dup 0= if  drop  region drop ( origin)  then
   \m here  over -  copy-region
   \m here  swap ! ;

( Clunky but straighforward.)
: copy-both-rams
   h preserve
    ram  ram-copied copy-(x)ram
   xram xram-copied copy-(x)ram ;

| Define local copies of target registers. Before executing code on the
| target, we "push" these values to the target, and after executing code,
| we "pull" the new values. We used the local, cached values when printing
| the registers with .regs .

| First, an array of the byte sized registers, r0 to r7. These can be read
| and written using the regular host c@ and c!.

8 buffer chat-regs
: r-reg  ( n)   constant  does> @  chat-regs + ;
: r-regs  ( start count)   for  dup r-reg 1+  next  drop ;
meta
0 8 r-regs r0 r1 r2 r3 r4 r5 r6 r7
forth

( Name these so they don't conflict with assembler names.)
variable trp    ( target RP, the machine stack pointer)
variable tpc    ( target PC)
variable tpsw   ( target PSW)

: get-regs
   t.get-status   tpsw !  tpc !  trp !
   h preserve  ram  chat-regs 0 8 t.read ;

: set-regs  ( pc - pc rp)
   h preserve  ram  chat-regs 0 8 t.write
   trp @ ;

defer .regs

( These are handy.)
: 4#  # # # # ;
: .bits8  binary  <#  4#  4#  #> type ;
: .h16       hex  <#  4#  #> type ;
: .h8        hex  <#  # #  #> type ;

: .w   ( a)  @  space .h16 ;
: .rregs   8 0 do  i 3 and 0= if space then
                   i chat-regs + c@  space .h8  loop ;

: .asm-regs
   radix preserve
   cr    ." CA-RRV-P  R0 R1 R2 R3  R4 R5 R6 R7    RP   PC"
   (        10000100  00 01 02 03  04 05 06 07  00b6 009d )
   cr  tpsw @ .bits8  .rregs  space           trp .w  tpc .w ;
' .asm-regs is .regs

defer verify-quietly  ( - diff)

: hi
   chatting on  >chat  t.hello  /chunk !  get-regs  .regs
   ram-copied off  xram-copied off  copy-both-rams
.ifndef noverify  verify-quietly  .then
   now __chatting is __meta  __meta ;

: chat-via   pop  chat-vector !  hi ;


: run      ( pc)  copy-both-rams  set-regs  t.run ;   ( don't wait for target)
: runwait  ( pc)  run  get-regs ;                     ( wait for target)

( For running random bits of code. rx suggests "remote execute".)
: rx       ( pc)  runwait  .regs ;


.ifdef notyet

| Because the target "caches" the top of the stack in a register, and
| because the trampoline code loads this register before execution, and
| pushes it afterward, we can deal only with the "memory image" of the target
| stack, rather than also worrying about what to put into the "top" register.
|
| What's a bit mystifying at first is that, to achieve a target stack depth
| of N, the host has to push N+1 items. The top one goes into top; and the
| bottom-most one is the "sentinel" value that gets loaded into top when the
| stack becomes empty.
|
| When pushing from the host, or when "pulling" from the target, we don't
| move more than 8 "user" items - but we pad this value a bit, since we are
| also using the stack to pass some execution context between host and
| target.

| Traditional Forth stack layout:
|
| User area    higher memory
| R stack
| D stack      lower memory
|
| Bottom of user area is also RP0. User area contains SP0 and SP. RP is
| pushed onto D stack in pause/yield.
|
| Let's do a similar thing - with R stack at higher memory - to ease the
| transition to a tasking version.

( XXX Why are we leaving room for two cells at the top of the stack?)
( XXX shouldn't the target define these constants?)
meta
@ram #ram +  2 \m cells - constant rp0   ( R stack is at the end of RAM)
\m rp0     #62 \m cells - constant sp0   ( D stack is *below* R stack)

: depth   \m sp0  tsp @ -  \m cell/  1- ;
forth

| stack> *first* builds a local image of the target stack - in the RAM
| image - and *then* copies it, in one chunk, to the target.

: stack>  ( "push" stack to target)
   depth 0 max 12 min
   \m sp0  over 1+  \m cells -  dup tsp ! ( top of D stack)  swap
   for  tuck image-!  \m cell+  next  ( copy each cell as a word to D stack)
   "decafbad swap image-! ( sentinel)
   tsp @ image+  tsp @  \m sp0  over -  t.write  ( copy stack image to target) ;

| stack< *first* copies the target stack, in one chunk, to the host's RAM
| image, and *then* pulls the values out and pushes them onto the host's stack.

: stack<  ( "pop" stack from target)
   \m depth 0 max 12 min  =if
      push
      tsp @ image+  tsp @  r@ \m cells  t.read  ( read target stack)
      pop
      tsp @  over  ( n sp n)
      for  dup image-@  pop 2push  \m cell+  next ( starting with top, push to R)
      drop ( sp)
      for  2pop push  next  ( pop from R to reverse order)
      0
   then  drop ;

| Target always starts by executing the code at continue-forth, with SP
| pointing to the data stack, which contains both the data to be consumed,
| and the "Forth VM" context.
|
| When first executing a word, the host sets things up like this:
|    IP = trampoline
|    RP = bottom of R stack ie, empty R stack
|    IX = 0
|
| When instead continuing execution - perhaps inside a loop that contains a
| call to bug - the host sets things up like this:
|    IP = saved IP
|    RP = saved RP
|    IX = saved IX

: ?chat
   chatting @ 0= if  error" not connected to target"  then ;

( These are implement'ed by the kernel code.)
meta
variable continue-forth
variable trampoline
forth

( NOTE: For initial execution of a Forth word, xn is pfa!)
: continue  ( x0 .. xn ip rp ix - y0 .. yn ip rp ix)
   ?chat
   stack>  p@ continue-forth runwait  stack<
   tix !  trp !  tip !  .regs ;

meta
: cont    ( )     ( continue forth execution)
   tip @  trp @  tix @  ( ip rp ix)  continue ;
forth

( Set rp to rp0, ix to 0, and ip to trampoline.)
-: ( pfa)  ( execute target forth word)
   p@ trampoline  \m rp0  0  ( ip rp ix)  continue ;  is remote

.then  ( notyet)


128 array 8051-seekeys

( Default key action is to run host key code)
host-seekeys 8051-seekeys  128 cells cmove

: >target
   chatting @ if   >chat  ^  then  >image ;  ( set up memory access)

| XXX these all vary by target as well: word size, endianness, it all makes
| a big difference in what you choose to dump!

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes
   dup .addr  dup .hex-bytes
   drop ;

| Cross-ref image and target. Print line of image memory, then line of
| target memory.

: 1xref  ( a)
   hex-bytes
   >image    dup .addr  dup .hex-bytes
   chatting @ if
      -valid
      >chat  dup _addr  dup .hex-bytes
      -valid
   then
   drop ;

8051-seekeys  -1  du-mode dumping     >target  skip+  skip-  1dump  ( a - a')
8051-seekeys  -1  du-mode xrefing     >target  skip+  skip-  1xref  ( a - a')
8051-seekeys  -1  du-mode disasming   >target  dis+   dis-   1dis   ( a - a')

8051-seekeys 'seekeys !    ( switch over to our bindings)

key: d  ( a - a 0)   dumping    0 ;
key: x  ( a - a 0)   xrefing    0 ;
key: i  ( a - a 0)   disasming  0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)

( Host du available as \f du)
meta
: du   ( a - a')   dumping     inspect ;
: dis  ( a - a')   disasming   inspect ;
forth

( Batch mode)
( Redirect to stdout to make it easier to write output to a file.)
defer dump-line
: batch-dump  ( start limit cfa)  is dump-line
   >target  ( XXX should this be >image ?)
   out-channel preserve  >stdout
   radix preserve
   istack-depth preserve  istack-depth off
   begin  swap  dump-line drop  swap  2dup u< 0=  until  2drop ;

( XXX create/does> instead?)
-: ( a - a' 0)  dup 1dump  16 advance  0 ;
: dumps  ( start limit)   [ #]  batch-dump ;

-: ( a - a' 0)  dup 1dis   dis+ ;
: disses  ( start limit)  [ #]  batch-dump ;
