( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)


variable start   ( points to first character of input stream)
variable end     ( points past last character of input stream)
variable first   ( points to first unconsumed character)

: interp  ( a u)
   over +  ( start end)  end !  dup start !  first ! ;

: count  ( a - a+1 ch)   dup 1+  swap c@ ;

( Skip while char at a equals ch and not at end of input.)
: skip  ( end a ch - end a+)
   >r ( ch)
   begin  2dup swap u< while  dup c@ r@ = while  1+  repeat  then
   r> drop ;
   
( Scan while char at a doesn't equal ch and not at end of input.)
: scan  ( end a ch - a+ trailing)
   >r ( ch)
   begin  2dup swap u< while  dup c@ r@ xor while  1+  repeat
   ( matched, consumed trailing)  ( end a+)  nip  1  r> drop  ^  then
   ( ran out of input)            ( end a+)  nip  0  r> drop  ;


: (token)   ( last trailing - a u)
   over  first @  - ( count)  >r
   + ( last+trailing)  first @  swap first !  ( consume input)  r> ;

: token  ( - a u)
   end @  first @  bl skip ( leading whitespace)  dup first !
   ( first)   bl scan  (token) ;

: parse  ( ch - a u)
   end @  first @  rot scan  (token) ;

( Now the test)
" 
variable start   ( points to first character of input stream)
variable end     ( points past last character of input stream)
variable first   ( points to first unconsumed character)
"
interp

hex

: sk  ( - end a+)  end @  first @  bl skip  .s ;
: sc  ( - a+ trailing)  dup first !  bl scan  .s ;

