( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading ARM Cortex-M3/M4 bit banding support

comment %bitband-intro%

( Cortex-M3 and -M4 processors support bit-banding - where every bit in a 1
  MiB address region has an alias counterpart that allocates a 32-bit word
  for each bit. Only the LSB of the word in the alias region has any
  significance - the others read as zero, and writes to them are ignored.

  Bit banding makes it easier to do single-bit read-modify-write
  operations. If I clear the LSB in an alias word, the corresponding bit in
  the bit band region is cleared, but the other bits in that byte or word are
  unaffected. Likewise setting the LSB.

  And if I only want to read one bit - perhaps I'm waiting for a particular
  status bit to change state - I can read the alias word and test that
  instead of reading the normal one (the one in the bit band region) and
  ANDing it with a mask.

  There are *two* bit band regions - one for SRAM and one for peripherals.
  In both cases the bottom 1 MiB of the address space is aliased to a 32 MiB
  address space 0200_0000 above the bit band region.

  So for SRAM, the region      2000_0000 to 2010_0000 (1 MiB) is aliased to
                               2200_0000 to 2400_0000 (32 MiB)

  For peripherals, the region  4000_0000 to 4010_0000 (1 MiB) is aliased to
                               4200_0000 to 4400_0000 (32 MiB).

%bitband-intro%

hex

0200_0000 constant bb_offset
000f_ffff constant bb_mask     ( offset into bit band region)

( Convert an address in the bit band space and a bit number into an address
  in the alias space.)

meta
: >bitband  ( base bit# - alias)
   over bb_mask and  5 << ( 32 *)  swap 2 << ( 4 *) +  ( alias offset)
   swap [ bb_mask invert #] and  bb_offset +  + ;

forth
