( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading ARM v6-M memory image

( On most Cortex-M devices, flash starts at 0. STM32 are different; their
| flash starts at "0800_0000. But since we wrap the addresses, our local
| image can assume flash starts at 0. But we'll use @flash when setting up
| the origin for the code that we're compiling.)

.ifndef @flash
   0 constant @flash
.then
.ifndef #flash
   256 Ki constant #flash
.then

( On all Cortex-M devices, SRAM starts at "2000_0000. Well, mostly. On
| Freescale's Kinetis K and L series - and maybe others - there is SRAM at
| "2000_0000 but also at the end of the code region, ie at "1fff_f000. For
| debugging we can simply assume on all devices that there will be SRAM at
| "2000_0000.)

.ifndef @ram
   "2000_0000 constant @ram
.then
.ifndef #ram
   8 Ki constant #ram
.then

( Define the basics of the target's memory.)
-d little-endian

ld target/common/memory-von-neumann-32.mu4


.ifdef legacy-arm-memory

: power-of-two?  ( f)
   begin  dup 1 and 0=  while  u2/  repeat  1 = ;

: round-up-to-power-of-two  ( n - n')
   1  begin  2dup swap u< while  2*  repeat  nip ;

( Memory images are prefixed by their current pointer, origin, and size in
| bytes.)

variable h  ( Dictionary pointer pointer; points to current image)

( Dictionary pointer.)
: dp   h @ ;

: make-image  ( origin #bytes)
   round-up-to-power-of-two
   create  swap  dup , , ( ptr origin)  dup , ( size)   allot
   does>  h ! ;

( Show current region, or, if unset, say that. Every target should set
| region to *something* when loading its build.mu4.)

: .region
   dp  ?if  body> >name type ^  then  ." no region specified" ;

-: ( tell us which region is current, if any)
   ."  (" .region ." )" ;  is .extra-prompt

( Initially limit flash space to 2 MiB and ram to 512 KiB.)
@flash  #flash   2 Mi min  make-image  flash
@ram    #ram   512 Ki min  make-image  ram
"4000_0000              4  make-image  bogus

( Simple but inefficient!)
: @image  dp  cell+ @         ( origin) ;
: #image  dp  cell+ cell+ @   ( image size) ;
: 'image  dp  [ 3 cells #] +  ( image address) ;

( If address u< ram origin, assume flash.
| If address u< ram end, assume ram.
| Otherwise, assume "bogus", which has initial value "0bee_f00d".)

: choose-image  ( target)  ( find an image based on target addr)
   dup @ram           u< if  drop  flash ^  then
     [ @ram #ram + #] u< if        ram   ^  then  bogus ;

: image+  ( target - host)
   h preserve
   dup choose-image  #image 1- and ( offset)  'image + ;

( DEBUG: Define show-comma to show code as it's compiled.)
.ifdef show-comma
: .debug-comma  dup  .h8_ ;
.else
: .debug-comma ;
.then

( DEBUG: Define show-c! to show writes to image.)
.ifdef show-c!
: .h16       hex  <#  # # # #                   #>  type space ;
: .addr  cr  hex  <#  # # # #  char _  #        #>  type space ;
: .h32       hex  <#  # # # #  char _  # # # #  #>  type space ;
: .debug-c!   ( byte addr)   2dup .addr  .h8 ;
: .debug-h!   ( hword addr)  2dup .addr  .h16 ;
: .debug-w!   ( word addr)   2dup .addr  .h32 ;
.else
: .debug-c! ;
: .debug-h! ;
: .debug-w! ;
.then

: image-c@             image+ c@ ;
: image-c!  .debug-c!  image+ c! ;

( ARMs are almost always little-endian.)
: image-h@             image+ leh@ ;
: image-h!  .debug-h!  image+ leh! ;

: image-@              image+ lew@ ;
: image-!   .debug-w!  image+ lew! ;


( ARM quirk - to disasm loads we want to show the loaded value, so we need
| to do an "out of sequence" load.)

defer |@  ( fetch cell from image/target)

-: ( buf a u)  swap image+ -rot  cmove ;

: >image   ['] image-@   is |@       ( ARM only)
           [ #]          is |read
           ['] lew@      is |cell@
                         32 |addr !  ( size of addr in bits)
                          4 |cell !  ( size of cell in bytes) ;

>image  ( default to image; this can change once we are chatting with target.)

meta
2 constant cellshift
4 constant cell
: cells  2 << ;
: cell/  2 >> ;
: cell+  \m cell + ;
: cell-  \m cell - ;

: here   ( - a)  dp @ ;
: goto   ( a)    dp ! ;   ( set region pointer to a)
: allot  ( n)    dp +! ;

: c,    ( ch)   .debug-comma  \m here image-c!       1 \m allot ;
: h,    ( h)    ( \m halign)  \m here image-h!       2 \m allot ;
: ,     ( w)    ( \m align)   \m here image-!  \m cell \m allot ;

forth
( Align an offset to an arbitrary power-of-2 alignment.)
: aligned-by  ( offset alignment - offset')  push  r@ 1- +  pop negate and ;

: #align,  ( byte #bits)  \m here  negate and  for  dup \m c,  next  drop ;

meta
: haligned         2 aligned-by ;  ( halfword aligned)
: aligned    \m cell aligned-by ;  ( word aligned)

: halign,  1 #align, ;
: align,   3 #align, ;

: halign   0 \m halign, ;
: align    0 \m align, ;

forth
( Return the start address and number of bytes in current region.)
: region   ( - a u)       dp 2@  ( start end)  over - ;

( Set both pointer [end] and origin [start].)
: region!  ( start end)   dp 2! ;

( Initialization.)
: wipe   'image  #image  ( erase)   "ff  fill
          @image  \m goto ( reset pointer to origin) ;

bogus  "0bee_f00d  \m ,
flash wipe
ram wipe  ( leaves us in ram!)

.then
