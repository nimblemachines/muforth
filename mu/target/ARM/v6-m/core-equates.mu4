( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading ARM Cortex-M core equates (v6-M and v7-M)

hex

( [v7] means that the vector or register only exists on ARM-v7-M.)

( Core exceptions.)

(      Vector    Name             Exc  IRQ
|       addr                      num  num)
     0004 vector Reset_exc       |  1   n/a
     0008 vector NMI_exc         |  2  -14
     000c vector HardFault_exc   |  3  -13
[v7] 0010 vector MemManage_exc   |  4  -12
[v7] 0014 vector BusFault_exc    |  5  -11
[v7] 0018 vector UsageFault_exc  |  6  -10
  -- 001c        Reserved        |  7
  -- 0020        Reserved        |  8
  -- 0024        Reserved        |  9
  -- 0028        Reserved        | 10
     002c vector SVCall_exc      | 11   -5
  -- 0030        Reserved        | 12
  -- 0034        Reserved        | 13
     0038 vector PendSV_exc      | 14   -2
     003c vector SysTick_exc     | 15   -1

( Core registers.)

( SysTick timer)
e000_e010 equ SYST_CSR      | SysTick Control and Status Register
e000_e014 equ SYST_RVR      | SysTick Reload Value Register
e000_e018 equ SYST_CVR      | SysTick Current Value Register
e000_e01c equ SYST_CALIB    | SysTick Calibration Value Register

( NVIC)
( ISER, ICER, ISPR, ICPR, and IABR registers have 1 bit per interrupt.
| IPR registers have 8 bits per interrupt.
|
| On v6-m devices there is only *one* each of ISER, ICER, ISPR, and ICPR.
| There are no IABR registers on v6-m devices.
|
| On v7-m devices, these are all arrays. If there are N_irq interrupts,
| there are N_irq/32 ISER, ICER, ISPR, ICPR, and IABR registers, and N_irq/4
| IPR registers.)

     e000_e100 equ NVIC_ISER   | Interrupt Set-enable Register
     e000_e180 equ NVIC_ICER   | Interrupt Clear-enable Register
     e000_e200 equ NVIC_ISPR   | Interrupt Set-pending Register
     e000_e280 equ NVIC_ICPR   | Interrupt Clear-pending Register

[v7] e000_e100 equ NVIC_ISER0  | first Interrupt Set-enable Register
[v7] e000_e180 equ NVIC_ICER0  | first Interrupt Clear-enable Register
[v7] e000_e200 equ NVIC_ISPR0  | first Interrupt Set-pending Register
[v7] e000_e280 equ NVIC_ICPR0  | first Interrupt Clear-pending Register
[v7] e000_e300 equ NVIC_IABR0  | first Interrupt Active Bit Register

     e000_e400 equ NVIC_IPR0   | first Interrupt Priority Registers

[v7] e000_e004 equ ICTR        | Interrupt Controller Type Register
[v7] e000_ef00 equ STIR        | Software Trigger Interrupt Register

( System control block - SCB)
     e000_ed00 equ CPUID       | CPUID Base Register
     e000_ed04 equ ICSR        | Interrupt Control and State Register
     e000_ed08 equ VTOR        | Vector Table Offset Register
     e000_ed0c equ AIRCR       | Application Interrupt and Reset Control Register
     e000_ed10 equ SCR         | System Control Register
     e000_ed14 equ CCR         | Configuration and Control Register
[v7] e000_ed18 equ SHPR1       | System Handler Priority Register 1
     e000_ed1c equ SHPR2       | System Handler Priority Register 2
     e000_ed20 equ SHPR3       | System Handler Priority Register 3
     e000_ed24 equ SHCSR       | System Handler Control and State Register
[v7] e000_ed28 equ CFSR        | Configurable Fault Status Register
[v7] e000_ed2c equ HFSR        | HardFault Status Register
     e000_ed30 equ DFSR        | Debug Fault Status Register
[v7] e000_ed34 equ MMFAR       | MemManage Fault Address Register
[v7] e000_ed38 equ BFAR        | BusFault Address Register
[v7] e000_ed3c equ AFSR        | Auxiliary Fault Status Register

( Debug control block - DCB)
( Define these values using constant rather than equ. We only use these in
| host words related to debugging.)

e000_edf0 constant DHCSR    | Debug Halting Control and Status Register
e000_edf4 constant DCRSR    | Debug Core Register Selector Register
e000_edf8 constant DCRDR    | Debug Core Register Data Register
e000_edfc constant DEMCR    | Debug Exception and Monitor Control Register

( Defines for DHCSR)
1 #19 << constant S_LOCKUP
1 #18 << constant S_SLEEP
1 #17 << constant S_HALT
1 #16 << constant S_REGRDY

1  #3 << constant C_MASKINTS
1  #2 << constant C_STEP
1  #1 << constant C_HALT
1  #0 << constant C_DEBUGEN
