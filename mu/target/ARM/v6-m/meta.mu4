( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading ARM v6-M meta-compiler (main)

( NOTE: While you will see .ifdef native in a few places in this file, the
  current development "push" is toward an ITC - indirect-threaded code -
  system.)

-- ------------------------------------------------------------------------
-- Macros defining register conventions
-- ------------------------------------------------------------------------

assembler
( Low registers.)
\a r0  constant w   ( scratch w, also "word" pointer)
\a r1  constant x   ( scratch x, also "execute" pointer)
\a r2  constant y   ( scratch y)
\a r3  constant z   ( scratch z)

( NOTE: r4 is currently unallocated.)
\a r5  constant rp  ( return stack pointer)
\a r6  constant ip  ( instruction pointer)
\a r7  constant top

( High registers.)
\a r9  constant up  ( "user" pointer - points to per-thread data)

forth

( Tell the disassembler about these register names.)
-: ( reg)
   15 and  3 *
   z" w  x  y  z  r4 rp ip topr8 up r10r11r12sp lr pc " +  3 -trailing type ;

: forth-regs  [ #] is .reg ;  forth-regs

-- ------------------------------------------------------------------------
-- Signatures - how we built the target image 
-- ------------------------------------------------------------------------

meta
: string,  ( a u)
   \m here image+ swap  ( a image u)  dup \m allot  cmove ;

: cr,    #LF  \m c, ;  ( add a newline)
: sig,   \m string,  \m cr, ;

: sig"   char " parse  \m sig, ;

( Compile creation date, build command line, and muforth commit.)

: end-sig
   " created: "  \m string,  clock time"  \m sig,
   " command: "  \m string,
      " ./muforth " \m string,  command-line  count  \m sig,
   " commit : "  \m string,  muforth-commit drop 12  \m sig,
   #LF  \m align, ;

forth


-- ------------------------------------------------------------------------
-- Forward references for fundamental target kernel words.
-- ------------------------------------------------------------------------
meta

( These are pointers to target CODE words.)
variable (branch)
variable (0branch)
variable (=0branch)
variable (?0branch)
variable (for)
variable (next)
variable (do)
variable (loop)
variable (+loop)
variable (lit)
variable (unnest)

forth

( Look up a label or forward-reference variable, and execute it to push
  its value or address.)

: lookup
   .meta. chain' execute ;

: implements   \m here  lookup  ! ;

( Compile a cfa into a target colon word.)
meta
.ifdef native
: compile,   asm{{  c  }} ;
.else
: compile,   \m , ;  ( ITC)
.then
forth

( Fetch value of variable - a primitive - and complain if not yet defined.)
: (p@)  ( var)  @  =if  ^  then  error" primitive not yet defined" ;

( Fetch primitive and compile into target.)
: (p,)  ( var)  (p@)  \m compile, ;

compiler
: p,   .meta. \chain  compile (p,) ;
: p@   .meta. \chain  compile (p@) ;
forth


-- ------------------------------------------------------------------------
-- Creating new target names
-- ------------------------------------------------------------------------

.ifdef notyet  ( vectors)

( XXX How do we do vectors in ARM v6-m land?)
: unvectored?  ( offset - f)  image-@  "0ffff_ffff = ;

meta
: handler  ( vector-offset)  \m here swap  image-!  __asm ;

( Set all unset vectors to point to this vector - usually RESET.)
: default-handler  ( start-vector default-vector)
   \m handler  ( force it, in case it's been set already)
   ( then set all unset handlers to this address)
   \eq Vreset  swap do
      i unvectored? if  i  \m handler  ( set it)  then
   \m cell +loop ;

.then  ( vectors)


variable last-code   ( for ;code and does> to fix up)

( Create new target names. A name is a target word which is defined as a
  _constant_ equal to its code field address - for both ITC and native code.)

( labels are always created in .meta.
   names are always created in .target.

  Target words annotated with [r] will be moved from .target. to
  .target-runtime.)

meta
: [r]   ( mark as "runtime"; move last .target. word into .target-runtime.)
   .target. @  dup @  ( last prev)  .target. !  ( unlink)
   .target-runtime. @  ( last last-runtime)  over .target-runtime. !
   swap ! ( link our new word to last-runtime) ;

: label   current preserve  meta              \m here  constant  __asm ;
: name    current preserve  target  \m align  \m here  constant ;

: code,   \m here last-code !  ( make a code field)  "deadc0de \m , ;
: new     \m name  \m code, ;  ( for words with code fields)

: codes   ( 'code)  \m name  1+ \m ,  __asm ;
: code    \m align  \m here  \m cell+  \m codes ;

( For code words that implement forward-referenced meta-compiler primitives.)
: code*   \m align  implements  untoken  \m code ;


.ifdef notyet  ( hooks)

( For forward references. Use hook to define the hook. This creates a label
  and compiles a long jump. Then resolve using hooks, which patches the jmp
  to point to here.

  NOTE: the label points at the code *immediately after* the hook, not the
  hook itself. This makes fixup easier, but can be confusing if you want to
  disassemble the code for a particular hook!)

forth
: hook!   ( to from)  \m cell-  image-! ;
meta

( NOTE: We can't use  asm{  0 #  }  when creating the hook code because
  that will get converted to a constant generator form! We need to compile
  a version with space in the following word for the absolute or relative
  address that will get patched by "hooks".)

.ifdef hooks-are-relative

( Hooks using PC-relative addressing.)
: hook    asm{  "0666 # pc add  }  state preserve  \m label ;
: hooks   \m here  lookup  ( to from)  tuck  - swap  hook! ;

.else

( Hooks using absolute addressing.)
: hook    asm{  "0666 # br  }      state preserve  \m label ;
: hooks   \m here  lookup  ( to from)                hook! ;

.then

.then   ( hooks)

forth


-- ------------------------------------------------------------------------
-- Support for ;code
-- ------------------------------------------------------------------------

( This word, which is followed inline by a target code address, replaces
  with the inline target address the code field of the last word compiled .
  It re-defines the behaviour of a previously defined word - defined by
  create, variable, constant, etc - by changing its runtime code. It gets
  -compiled- indirectly by both ;code and does>.)

.ifdef native
( NOTE: Do the  pop @  before the  h @ preserve  else R stack mayhem ensues.)
: (;code@)   pop @  h @ preserve  last-code @  \m goto  asm{  bl  } ;
.else
: (;code@)   pop @  1+ ( thumb!)  last-code @  image-! ;  ( ITC)
.then

( <;code> is used to switch from compiling -host- code [that will later run
  on the host, and build the target word] to compiling -target- code, that
  will run when words defined by this defining word later execute. In order
  to connect the two worlds, and to be able to patch up code fields to
  point to this newly-defined behaviour, <;code> captures the target's
  "here" value. Remember, we are about to start compiling target code at
  "here".

  <;code> runs at the compile time of a defining word, but it leaves it up
  to its caller - ;code or does> - to change the interpreter mode.)

: <;code>   compile (;code@)  \m here  ,  show ;

definer
: ;code   <;code>  __asm ;
forth


-- ------------------------------------------------------------------------
-- Control structures.
-- ------------------------------------------------------------------------

( Resolve a forward or backward jump, from src to dest.)
( When using absolute branch addresses, this is easy: just store dest at src.)

meta
: <resolve  ( dest src)  image-! ;
: >resolve  ( src dest)  swap  \m <resolve ;
: mark   \m here  0 \m , ;

target-compiler
: =if   ( - src)        p, (=0branch)  \m mark ;
: ?if   ( - src)        p, (?0branch)  \m mark ;
: if    ( - src)        p,  (0branch)  \m mark ;
: then  ( src)          \m here  \m >resolve ;
: else  ( src0 - src1)  p,   (branch)  \m mark  swap  \tc then ;

: begin   ( - dest)  \m here ;
: =until  ( dest -)  \tc =if  \m <resolve ;
: ?until  ( dest -)  \tc ?if  \m <resolve ;
: until   ( dest -)  \tc  if  \m <resolve ;
: again   ( dest -)  p, (branch)  \m mark  \m <resolve ;
: =while  ( dest - src dest)  \tc =if  swap ;
: ?while  ( dest - src dest)  \tc ?if  swap ;
: while   ( dest - src dest)  \tc  if  swap ;
: repeat  ( src dest -)   \tc again  \tc then ;

( NOTE: We only implement the "smart" for that loops 0 times when passed a
  zero. No more "special case" loops of the form:
    ?for  blah blah  next  then
  Now, for compiles ?if followed by the for runtime; next compiles the next
  runtime, resolves the backwards branch for next, and, lastly, resolves
  the forward branch from the ?if.)

( n for .. next         goes n times; 0 if n=0 )

: for     ( - src dest)  \tc ?if  p, (for)  \tc begin ;
: next    ( dest -)      p, (next)  \m mark  \m <resolve  \tc then ;

( do, loop, +loop)
: do      ( - dest)   p, (do)             \tc begin ;
: loop    ( dest)     p, (loop)   \m mark  \m <resolve ;
: +loop   ( dest)     p, (+loop)  \m mark  \m <resolve ;
forth


.ifdef native

-- ------------------------------------------------------------------------
-- Support for in-line literals (literal pool, ARM-style)
-- ------------------------------------------------------------------------
32 array+ lit-values  ( room for 32 literals per word - value)
32 array+ ldr-addrs   ( room for 32 literals per word - ldr location)
variable #lits

: +lit    1 #lits +! ;
: -lit   -1 #lits +! ;
: lit-value   #lits @  lit-values ;
: ldr-addr    #lits @  ldr-addrs  ;
: lit,   ( value reg)  push  lit-value !  \m here ldr-addr !  +lit
         <asm  0 pc +) \f pop ldr  asm> ;

: nop-align  \m here 2 and if  <asm  nop  asm>  then ;
: rewrite-lit  ( lit#)  #lits !
   \m here  lit-value @  \m ,  ( 'lit)
   ldr-addr @  dup >load-pc  ( 'lit 'ldr pc)  rot swap -
   ( 'ldr offset)  2 >>  over image-@  or  swap image-! ;

: rewrite-lits
   #lits @ =if
      nop-align  ( lits have to start on word boundary)
      begin  1-  dup rewrite-lit  dup 0= until
   then  drop ;


-- ------------------------------------------------------------------------
-- Peephole optimiser
-- ------------------------------------------------------------------------
( Tags used:)
1 constant $lit1  ( one instruction lit: ldr or movs #)
2 constant $lit2  ( two instruction lit: movs+mvns or movs+lsls)
3 constant $call  ( $ suggests price tag ;-)

: tag!  ( tag)  \m here  image-h! ;
: tag@          \m here  image-h@ ;
: notag   -1 tag! ;  ( set to all ff's)

: is-lit-tag?  ( tag - f)  $call u< ;

: uncompile  ( #instrs)
   notag
   \m here  swap  for  -2  -1 ( 0ffff) over  image-h!  next  org ;


-- ------------------------------------------------------------------------
-- Smart jump, and tail call elimination
-- ------------------------------------------------------------------------

( Smart jump: compile short unconditional branch if possible;
  otherwise, ldr + bx.

  Smart call: compile bl if possible; otherwise, ldr + blx)

assembler
: j  ( dest)  
   dup  \m here  branch-offset  bra?  if  op,  drop  ^  then
   drop  1+ ( thumb!)  \a r0 lit,  <asm  r0 bx  asm> ;

: c  ( dest)  
   dup  \m here  branch-offset  bl?  if  op32,  drop  ^  then
   drop  1+ ( thumb!)  \a r0 lit,  <asm  r0 blx  asm> ;
forth

( If last code compiled was a call, rewrite it to a jump and return true;
  else return false.

  NOTE: 'then' should clobber tag so that  if b then ;  doesn't
  tail-convert the call to b and neglect to put a  bx lr  at the end of the
  word!)

( An unusual word that we haven't needed until now!)
: image-op32@  ( a - op32)
   dup image-h@ 16 <<  swap 2 + image-h@ + ;

: tail?  ( - f)
   tag@ $call = if  notag
      -4 \m allot  \m here  dup >branch-pc
      swap image-op32@  bl-offset@  ( op offset)  nip
      hoff>  +  ( dest)  \a j  -1  ^  then
   0 ;

meta-compiler
: ^   tail? if ^ then  <asm  lr bx  asm> ;

meta
: compile,  ( target-cfa)  \a bl  ( compile call)  $call tag! ;

forth

-- ------------------------------------------------------------------------
-- Literal loading
-- ------------------------------------------------------------------------

( Try three ways to load a literal:
  * movs k, #i8
  * movs k, #i8; mvns k, k
  * movs k, #i8; lsls k, k, #n
  Failing that, use  lit,  to compile an ldr from the literal pool.)

: load-literal  ( n - tag)
   "ffff_ffff and  ( we only care about 32 bits!)

   ( Try a simple movs)
   dup 8 ufits? if  <asm  # k movs  asm>  $lit1  ^  then

   ( Try movs followed by mvns)
   dup  "ffff_ffff xor
   dup 8 ufits? if  nip  <asm  # k movs  k k mvns  asm>  $lit2  ^  then
   drop ( inverted)

   ( Try movs followed by lsls)
   dup push  0 ( shift)  r@
   begin  u2/  1 u+  dup 8 ufits?  until ( n shifts shifted)
   2dup swap <<  pop = if  <asm  # k movs  # k k lsls  asm>  drop  $lit2  ^  then
   2drop

   ( No luck. Compile an ldr from literal pool.)
   \a k lit,  $lit1 ;

.then  ( native: literals and such)


-- ------------------------------------------------------------------------
-- Special versions of host colon compiler
-- ------------------------------------------------------------------------

( Define useful colon compilers:
      meta:  for defining new target defining words!
   definer:  for defining meta-compiler-specific compiling words

  We will define another colon compiler - the actual target colon - in the
  kernel, using our meta-defining words!)

( We need meta: so we can define defining words in the middle of target
  code - eg, the kernel. It gives us an easy way to fire up a specific
  colon compiler - the one specifically *tuned* for making target defining
  words.

  definer: is similar. It runs the same colon compiler as meta: but puts
  the new word on the .definer. chain. Its use is rather obscure, and hard to
  explain. ;-)

meta
: meta:     current preserve  meta     :  __definer-colon ;
: definer:  current preserve  definer  :  __definer-colon ;
forth


-- ------------------------------------------------------------------------
-- Utility words from .forth. copied into .meta.
-- ------------------------------------------------------------------------
( Sign extend target value.)
: sext32  ( n -n')   dup "8000_0000 and if  "-1_0000_0000 +  then ;

meta

: .   sext32  . ;  ( sign-extend, then print as a signed value)

.ifdef no-forth-while-chatting
: .s   .s ;
: u.   u. ;
: sp-reset   sp-reset ;

: words   words ;
: all-words   all-words ;

: forth   forth ;
: meta   meta ;
: assembler   assembler ;
: target   target ;
: target-compiler   target-compiler ;

: hex  hex ;
: decimal   decimal ;
: octal   octal ;
: binary   binary ;
.then

forth

-- ------------------------------------------------------------------------
-- Punctuation that changes the compiler state, or creates literals
-- ------------------------------------------------------------------------

meta
( ' get target word's constant value: its cfa
  We search runtime words too, so we can du or dis them.)

: '   .target-runtime. chain' execute ;
: >body   \m cell+ ;
: >value  \m >body  image-@ ;

: ]   __target-colon ;  ( does NOT create a literal!)

: literal    p, (lit)  \m , ;  ( make a target literal)

: __host   \ [ ;        ( return to host forth mode)
: {        \m __host ;  ( useful for bracketing a few host forth words)

forth
: }    __meta ;  ( return to meta)

assembler
: ;c   __meta ;

target-compiler
: [   __meta ;
: ^    p, (unnest) ;  ( compile target's unnest)
: ;   \tc ^  \tc [ ;  ( compile exit and return to meta)

: [']        \m '  \m literal ;
: literal          \m literal ;

definer
: ;   \ ;  __meta ;  ( do normal host ; but then return to __meta)

forth

( Patch target colon compiler.)
.meta. chain' literal   is target-literal
             ' number   is target-number    ( use host's number)
.meta. chain' compile,  is target-compile,
