| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading ARM v6-M interaction

variable chatting

variable chat-vector
: chat-cmd   ( index - index+1)  dup  cells constant  1+
             does> @  chat-vector @ =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0
chat-cmd t.hello    ( - chunk-size)
chat-cmd t.status   ( - #retries dp)
chat-cmd t.run      ( pc dp)
chat-cmd t.read     ( buf a u)
chat-cmd t.write    ( buf a u)
chat-cmd t.flash-begin
chat-cmd t.flash-end
chat-cmd t.erase    ( a)
chat-cmd t.program  ( buf a u)
drop

: >image
   ['] image-@  is |@   ( fetch from host memory image)
   ['] read-host-image  ( read from host memory image)  du-target ;

-:  ( target - word)  pad swap 4  t.read  pad lew@ ;
: >chat
   [ #]         is |@   ( fetch from connected target)
   ['] t.read           ( read from connected target)  du-target ;

| Chunk size is reported by the debug interface. Always use this when
| copying RAM contents or programming the flash!

variable /chunk  ( chunk size, as reported by debug interface)

: copy-chunk  ( 'target len - 'target+len)
   | cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+ -rot t.write  pop ;

: copy-region  ( a u)
   | cr ." copy-region "  2dup swap u. u.
   /chunk @  /mod ( r q)  swap push  for   /chunk @  copy-chunk  next
                                    pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)

: copy-ram
   h preserve  ram  \m align ( make sure ram region is aligned before copying)
   ram-copied @  dup 0= if  drop  region drop  then
   \m here  over -  copy-region
   \m here  ram-copied ! ;

( Count of retries before t.status got a response from the target.)
variable #retries

| XXX how many of these are still useful?
: 2sp   space space ;
: .h32     radix preserve  hex  <#  4#               4#  #> type ;
: .h16_16  radix preserve  hex  <#  4#  char _ hold  4#  #> type ;

: .h32__     .h32    2sp ;
: .h16_16__  .h16_16 2sp ;

: .tr   ( variable)  ( "target register")  @ .h32__ ;

defer verify-quietly  ( - diff)

: hi
   chatting on  >chat  t.hello  /chunk !
   ram-copied off  copy-ram
.ifndef noverify  verify-quietly  .then
   now __chatting is __meta  __meta ;

: chat-via   pop  chat-vector !  hi ;

| Traditional Forth stack layout:
|
| User area    higher memory
| R stack
| D stack      lower memory
|
| Bottom of user area is also RP0. User area contains SP0 and SP. RP is
| pushed onto D stack in pause/yield.
|
| Let's do a similar thing - with R stack at higher memory - to ease the
| transition to a tasking version.

"decafbad constant stack-sentinel

@ram #ram +        constant rp0   ( R stack is at the end of RAM)
rp0  64 \m cells - constant dp0   ( D stack is *below* R stack)

: stack-write  t.write ;
: stack-read   t.read ;

4 constant stack-cell
: stack@  lew@ ;
: stack!  lew! ;

ld target/common/stacks.mu4

: run      ( pc)       copy-ram  dp@  t.run ;  ( don't wait for target)
: runwait  ( pc)  run  t.status  dp!  #retries ! ;   ( wait for target)


128 array cortex-seekeys

( Default key action is to run host key code)
host-seekeys cortex-seekeys  128 cells cmove

: >target
   chatting @ if   >chat  ^  then  >image ;  ( set up memory access)

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes
   | dup  p !  cell*  ea !  ( default ea: fetch cell)
   dup  p !  cell*  -4 and  ea !  ( default ea: fetch cell and round down)
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   dup _addr  dup .hex-cells
   drop ;

| Cross-ref image and target. Print line of image memory, then line of
| target memory.

: 1xref  ( a)
   hex-bytes
   >image    dup .addr  dup .hex-cells
   chatting @ if
      -valid
      >chat  dup _addr  dup .hex-cells
      -valid
   then
   drop ;


( Support for interactive decompiling.)
: dec+  ( a - a' 0)   4 advance  0 ;
: dec-  ( a - a' 0)  -4 advance  0 ;

defer 1smart-dec
defer 1smart-dis

cortex-seekeys  -4  du-mode dumping       >target  skip+  skip-  1dump
cortex-seekeys  -4  du-mode decompiling   >target  dec+   dec-   1smart-dec
cortex-seekeys  -4  du-mode xrefing       >target  skip+  skip-  1xref
cortex-seekeys  -2  du-mode disasming     >target  dis+   dis-   1smart-dis


meta
variable target-do-colon
variable target-do-const
variable target-do-var
forth

: .target-code  ( a)
   p !  cell*  ( code field)  -2 and  ( remove thumb bit)
   0 disasming drop
   dup                  p @ = if  drop  ." code "      ^  then
   0 decompiling drop ( start decompiling a colon definition)
   dup \m target-do-colon @ = if  drop  ." : "         ^  then
   dup \m target-do-const @ = if  drop  ." constant "  ^  then
   dup \m target-do-var   @ = if  drop  ." variable "  ^  then
   .hcell_  ." (unknown code field) " ( print value and mark as "unknown") ;

: 1dec  ( a)
   dup .addr .nesting space
   p !  cell*  dup .hcell_
   dup -4 and ea !  ( default ea: fetch cell and round down)
   dup .target-runtime. find-constant-chained if
     .target space  drop ^  then
   equate?  if  .equate space  then ;

: ?switch  ( a - a | <nothing> )
   dup  p !  cell*  ea !  ( default ea: fetch cell)
   dup .target-runtime. find-constant-chained if  push ( 'link)
      dup .addr .nesting space
      .target-code  pop .target space  shunt  ^  then ;

| Generic decompiler. Switches modes any time a target word points to
| current address.
-: ( a)  ?switch  1dis ;  is 1smart-dis
-: ( a)  ?switch  1dec ;  is 1smart-dec

cortex-seekeys 'seekeys !    ( switch over to our bindings)

key: d  ( a - a 0)   dumping      0 ;
key: e  ( a - a 0)   decompiling  0 ;  ( XXX 'f'? ':'? )
key: x  ( a - a 0)   xrefing      0 ;
key: i  ( a - a 0)   disasming    0 ;

| Fetch a vector and start disassembling the code it points to. Treat it
| like a "call" - key c - and push the i-stack.

key: v  ( 'vector - vector 0)  dup  p !  cell*  i-push  disasming  0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)

( Host du available as \f du)
meta
: du   ( a - a')   dumping      inspect ;
: dis  ( a - a')   disasming    inspect ;
: dec  ( a - a')   decompiling  inspect ;
forth


( Batch mode)
( Redirect to stdout to make it easier to write output to a file.)
defer dump-line
: batch-dump  ( start limit cfa)  is dump-line
   >target  ( XXX should this be >image ?)
   out-channel preserve  >stdout
   radix preserve
   istack-depth preserve  istack-depth off
   begin  swap  dump-line drop  swap  2dup u< 0=  until  2drop ;

( XXX create/does> instead?)
-: ( a - a' 0)  dup 1dump  16 advance  0 ;
: dumps  ( start limit)   [ #]  batch-dump ;

-: ( a - a' 0)  dup 1dis   dis+ ;
: disses  ( start limit)  [ #]  batch-dump ;
