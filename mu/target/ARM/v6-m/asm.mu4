( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading ARM v6-M Thumb2 assembler

( Core of ARMv6-M assembler - for Cortex-M0, M0+, M3, and M4)

hex

( Support for inline asm in any colon word.)
compiler
: asm{{   __inline-asm ;  ( start assembler)
: }}      ] ;  ( exit assembler mode and restart host colon compiler)
definer
: }}   __definer-colon ;  ( when compiling via meta: return to definer : )
forth

: 4#  # # # # ;
: __  char _ hold ;
.ifdef show-asm
: debug-show   dup  radix preserve  binary  <# 4# __ 4# __ 4# __ 4# #>  cr  type ;
.else
: debug-show ;
.then

: op,  debug-show  \m h, ;
: op32,  dup  #16 u>> op,  op, ;  ( compile high half then low half)

( Make these create/does words so it's easy to change their behaviour.)
: reg   constant  ( regnum)  does> @ ;
assembler
#15 reg pc
#14 reg lr
#13 reg sp
#12 reg r12
#11 reg r11
#10 reg r10
  9 reg r9
  8 reg r8
  7 reg r7
  6 reg r6
  5 reg r5
  4 reg r4
  3 reg r3
  2 reg r2
  1 reg r1
  0 reg r0

forth

( Many of these instructions only allow the use of the low registers - r0
  to r7. Make sure we're doing the right thing.)

: low?  ( reg - f)  8 u< ;
: ?low  ( reg op - op reg)
   over low? if  swap  ^  then
   error" only registers r0 to r7 allowed" ;

( These are named to suggest where they would put the 3-bit field if the
  instruction is in octal.)
: r00   ( reg op - op')  ?low  6 <<  or ;
: 0r0   ( reg op - op')  ?low  3 <<  or ;
: 00r   ( reg op - op')  ?low        or ;

( Like above, but shifted 8 bits left. The octal metaphor doesn't work here!)
: r000  ( reg op - op')  ?low  8 <<  or ;

( For building opcodes with 4-bit register field, R.)
: ?reg  ( reg op - op reg)
   over 10 u< if  swap  ^  then
   error" expected a register" ;

: 0R  ( reg op - op')  ( R -> r0_000_rrr)
   ?reg  dup  8 and  4 <<
        swap 07 and        or  or ;

: R0  ( reg op - op')  ( R -> 0r_rrr_000)
   ?reg  0f and  3 <<  or ;

( Register lists (masks)
: >mask  ( n - 2^n)  1 swap << ;
: reg>mask  ( n mask - mask')  swap >mask  or ;

assembler
feebfeeb constant {  ( - mark)
: }    ( mark Rx .. Ry - mask)
   0 ( mask)   begin  over \a { xor while  reg>mask  repeat  nip
   0ffff and ;

( Mark immediate values by pushing a negative number on top of them. This
  way we can distinguish between immediate and register values, which are
  always >= 0.)

: #   ( imm - imm -1)  -1 ;

forth

: imm?  ( bits - is-imm)  0< ;

( Offsets.)
: hoff  ( off op - off/2 op)  swap  2/    swap ;
: woff  ( off op - off/4 op)  swap  2 >>  swap ;

( Tests to see if a value fits into a field of a certain bit width.)
: ufits?  ( value bits - f)     u>>        0= ;   ( unsigned)
: sfits?  ( value bits - f)   1- >>  1+  2 u< ;   ( signed)

( Immediate fields)
: ifits   ( imm op #bits - op bits)
   rot swap  ( op imm #bits)  2dup ufits?
   if  >mask 1-  and  ^  then
   error" immediate value out of range" ;

: i5  ( imm op - op')  5 ifits  6 <<  or ;
: i3  ( imm op - op')  3 ifits  6 <<  or ;
: i7  ( imm op - op')  7 ifits        or ;
: i8  ( imm op - op')  8 ifits        or ;


( Shift-immed register - low register only!)
: sh-imm  constant  does> @  ( i5 Rm Rd op)  00r  0r0  i5  op, ;
0000 sh-imm lsli
0800 sh-imm lsri
1000 sh-imm asri

( 3 register instructions - low registers only!)
: 3reg  constant  does> @  ( Rm Rn Rd op)  00r  0r0  r00  op, ;
1800 3reg addr3
1a00 3reg subr3

( 3 bit immediate - low registers only!)
: 2reg-i3  constant  does> @  ( i3 Rn Rd op)  00r  0r0  i3  op, ;
1c00 2reg-i3 addi3
1e00 2reg-i3 subi3

( 8 bit immediate - low registers only!)
: 1reg-i8  constant  does> @  ( i8 Rd op)  r000  i8  op, ;
2000 1reg-i8 movi8
2800 1reg-i8 cmpi8
3000 1reg-i8 addi8
3800 1reg-i8 subi8

( Data processing, low registers only!)
: ?Rdn    ( Rm Rn Rd op - Rm Rdn op)
    over ( Rd)  3 nth ( Rn)  = if  nip  ^  then
    error" Rd and Rn must be the same" ;

: do-2reg   ( Rm Rdn op)   00r  0r0  op, ;
: 2reg2   constant  does> @  ( Rm Rdn op)          do-2reg ;

( Require 3 operand form, and check Rd == Rn)
: 2reg3   constant  does> @  ( Rm Rn Rd op)  ?Rdn  do-2reg ;

4080 2reg3 lslr
40c0 2reg3 lsrr
4100 2reg3 asrr
4280 2reg2 cmpr

assembler
4000 2reg3 ands
4040 2reg3 eors
( lsls, lsrs, asrs, cmp register go here)
4140 2reg3 adcs
4180 2reg3 sbcs
41c0 2reg3 rors
4200 2reg2 tst
4240 2reg2 negs  ( mov negated)
42c0 2reg2 cmn
4300 2reg3 orrs
4340 2reg3 muls
4380 2reg3 bics
43c0 2reg2 mvns  ( mov complemented)
forth


( 4-bit register)
: 2anyreg  constant  does> @  ( Rm Rdn op)  0R  R0  op, ;
4400 2anyreg addr2
4500 2anyreg cmpr2  ( NOTE: at least one high reg!)
4700 2anyreg bx

assembler
4600 2anyreg mov   ( only non-s version of mov)
: bx   ( Rm)  \a r0 ( Rdn)  bx ;
: blx  ( Rm)  \a r8 ( Rdn)  bx ;
forth

: ?index   ( allowed this)
   u< if  error" indexing type not allowed"  then ;

: sp-or-pc   ( offset Rn ix Rt op)   r000  or  nip  woff i8  op, ;

: do-ldr-pc   ( offset Rn ix Rt 'body)
   @  3 ?index  ( ix-pc allowed)                     0  sp-or-pc ;

: do-str-sp   ( offset Rn ix Rt 'body)
   @+ @ swap  2 ?index  ( ix-sp allowed)  800 and ( L)  sp-or-pc ;

: do-str-imm  ( offset ix Rt 'body)
   @+ cell+ swap  1 ?index  ( ix-imm allowed)
   @+ @ push ( op-imm)  00r  or  swap pop ( scale) >>  swap  i5  op, ;

: do-str-reg  ( ix Rt 'body)
   cell+ @  ( op-reg)  00r  or  op, ;

( For indexing. V6-M only has pre-indexing - no writeback - so there are
  only two indexing operators:)

assembler
: +)   ( offset Rn - offset ... cfa)
   dup \a pc = if  4800  ['] do-ldr-pc  ^  then  ( ix type 3)
   dup \a sp = if  9000  ['] do-str-sp  ^  then  ( ix type 2)
            0  0r0       ['] do-str-imm ;        ( ix type 1)

: r+)  ( Rm Rn - ix cfa)
            0  0r0  r00  ['] do-str-reg ;        ( ix type 0)
forth

( One Ring to rule them all?)
: ring    ( scale op-imm op-reg ix-max)  create  , , , ,
          ( ... cfa Rt 'body)  does>  rot execute ;

assembler
( scale op-imm op-reg ix-max)
    2    6000   5000    2   ring  str
    2    6800   5800    3   ring  ldr

    1    8000   5200    1   ring  strh
    1    8800   5a00    1   ring  ldrh

    0    7000   5400    1   ring  strb
    0    7800   5c00    1   ring  ldrb

    0       0   5e00    0   ring  ldrsh   ( scale is ignored - ix-reg only)
    0       0   5600    0   ring  ldrsb
forth

( add to pc/sp)
( i8 is scaled *4)
: load-addr  ( i8 Rt op)  r000  woff i8  op, ;

( add/sub imm to sp)
( i7 is scaled *4)
: offset-sp  ( i7 op)           woff i7  op, ;
: add-to-sp  ( i7)  dup 0< if  negate  b080  offset-sp  ^  then
                                       b000  offset-sp ;

( 0b100 & 0b300 are cbz - not in ARMv6-M)

( Sign- and zero-extend)
assembler
0b200 2reg2 sxth
0b240 2reg2 sxtb
0b280 2reg2 uxth
0b2c0 2reg2 uxtb
forth

: stackop
   create  ( op 9threg)  >mask ,  ,
   does> @+ @  ( reglist 9thregmask op)
      -rot  over and  if  100 or  then  01ff and  or  op, ;

( Push goes here. 8 bit reglist plus lr bit.)
( 0b400 + reglist + lr << 8)
assembler
0b400 \a lr stackop push
forth

: 0op  constant  does> @  op, ;
assembler
0b662 0op cpsie
0b672 0op cpsid
forth

( 0b700 & 0b800 undefined)

( 0b900 & 0bb00 are cbnz - not in ARMv6-M)

( Byte and halfword reverses)
assembler
0ba00 2reg2 rev
0ba40 2reg2 rev16
( 0ba80 is ???)
0bac0 2reg2 revsh
forth

( 0bb00 undefined)

( Pop goes here. 8 bit reglist plus pc bit.)
( 0bc00 + reglist + pc << 8)
assembler
0bc00 \a pc stackop pop
forth

: op-i8   constant  does> @  ( i8 op)  over imm? if nip then  i8  op, ;

( Breakpoint)
assembler
0be00 op-i8 bkpt
forth

( Hints.)
( 0bfx0 are hints; 0bfxm are IT - when m != 0. Not in ARMv6-M)
assembler
0bf00 0op nop
0bf10 0op yield
0bf20 0op wfe
0bf30 0op wfi
0bf40 0op sev
forth


( ldm/stm)
assembler
( Low 8 registers only!)
0c000 1reg-i8 stm  ( reglist Rn)
0c800 1reg-i8 ldm
forth

( Conditional branch.)
( Condition field:
  0  EQ  Z=1
  1  NE  Z=0
  2  CS  C=1   aka HS   NOTE: different from other architectures!
  3  CC  C=0   aka LO         ARM uses "natural" carry, which = ~borrow
  4  MI  N=1
  5  PL  N=0
  6  VS  V=1
  7  VC  V=0
  8  HI  C=1 and Z=0
  9  LS  C=0 or  Z=1
 10  GE  N=V
 11  LT  N!=V
 12  GT  N=V and Z=0
 13  LE  N!=V or Z=1
 14  AL  always    NOTE: always and never are NOT encoded in any ARMv6-M
 15  ??  never     instruction. Ever.

  b<cond> encoding: 0d000 + <cond> << 8 + offset
  offset is _signed_ and scaled *2; offset from pc+4
)

( 2cond defines both a condition and its complement. NOTE: These compile a
  conditional branch with the opposite sense than their mnemonic! Ie, u<
  compiles branch if higher or same.)

( Condition code words push condition bits suitable for oring into a
  conditional branch instruction.)

: 2cond  ( cond)  8 <<  dup  100 xor ( complement cond)  constant  constant ;
assembler
 0 2cond  0=  0!=
 2 2cond  cs  cc
 2 2cond  u>= u<
 4 2cond  0<  0>=
 6 2cond  vs  vc
 8 2cond  u>  u<=
0a 2cond  >=  <
0c 2cond  >   <=
forth

( svc and friend(s)
assembler
0de00 op-i8 undef   ( branch always encoding!)
0df00 op-i8 svc     ( branch never encoding!)
forth

: bad-branch   error" branch offset too large" ;

: branch-offset  ( dest src - offset)
   >branch-pc ( compensate for prefetch)  -  2/ ;

: offset-fits?  ( offset #bits - masked-offset -1 | offset 0)
   2dup sfits? if  >mask 1-  and  -1 ^  then  drop  0 ;

( Short unconditional branch. Long branch - encoded like bl - does not
  exist in v6-m!)

( 0e000 + i11 offset: signed and scaled *2. offset from pc+4.)
: >bra  ( offset-bits - op)  e000 + ;

( Given an offset, try to create an unconditional short branch. Return a
  flag describing success or failure.)

: bra?  ( offset - op -1 | offset 0)
   #11 offset-fits?  if  >bra  -1  ^  then  0 ;

( Given an offset, try to create an unconditional short branch. Abort with
  an error if branch target out of range.)

: ?bra  ( offset - op)  bra?  if ^ then  bad-branch ;

assembler
: b   ( dest)   \m here  branch-offset  ?bra  op, ;
forth


( 0e800 - ffff are 32-bit encodings! See ARM/ARMv7/thumb32-asm.mu4 for
  details!)

: 0op32  constant  does> @  op32, ;

f3bf_8f4f 0op32 dsb  ( data synchronization barrier)
f3bf_8f5f 0op32 dmb  ( data memory barrier)
f3bf_8f6f 0op32 isb  ( instruction synchronization barrier)


( 32-bit bl. For historical reasons the encoding is really strange. The
  original Thumb instruction set used _two_ separate instructions to set
  the high and low halves of the branch displacement. With the addition of
  32-bit instructions into that same encoding space, the bl instruction has
  been re-imagined as a 32-bit Thumb instruction with a very odd encoding -
  and a larger possible displacement than its 16-bit predecessor.)

( Given an offset, try to create a branch-and-link instruction. Return a
  flag describing success or failure.)

: bl?  ( offset - op -1 | offset 0)
   #24 offset-fits?  if  f000_d000 ( op)
   over          7ff and          or  ( imm11 in v6-m manual)
   over #11 u>>  3ff and  #16 <<  or  ( imm10 ditto)
   over #23 bit@ ( S)  push
   over #22 bit@ ( I1)  1 xor  r@ xor  #13 <<  or  ( J1)
   over #21 bit@ ( I2)  1 xor  r@ xor  #11 <<  or  ( J2)
   pop ( S)                            #26 <<  or  ( S)
   nip ( offset)  -1  ^  then  0 ;

( Given an offset, try to create a branch-and-link instruction. Abort with
  an error if branch target out of range.)

: ?bl  ( offset - op)  bl?  if ^ then  bad-branch ;

assembler
: bl   ( dest)   \m here  branch-offset  ?bl  op32, ;
forth


( If branching backward, and conditional branch can't reach, change sense
  of conditional branch to branch forward around an unconditional backward
  branch.)

meta
: resolve  ( dest src)
   push  r@  ( dest src)  branch-offset
   r@ image-h@  f000 and  d000 = if
      ( cond branch)  8 offset-fits? if  pop image-c!  ^  then
      dup 0< if  ( backwards)
         r@ image-h@  ff00 and  100 xor  pop image-h!
         1- ( branch back past one more instruction)  ?bra  op,  ^
      then  shunt  bad-branch
   then
   ( uncond branch)  ?bra  pop image-h! ;
forth

( Control structure words.)
assembler
: always  (      - src)  \m here       0 >bra    op, ;  ( uncond jump)
: if      ( cond - src)  \m here   swap  d000 +  op, ;  ( cond jump)
: then    ( src)         \m here   swap  \m resolve ;   ( >resolve)
: else    ( src - src2)  \a always  swap  \a then ;

: begin   ( - dest)      \m here ;
: again   ( dest)        \a always  \m resolve ;
: until   ( dest cond)   \a if      \m resolve ;
: while   ( dest - src dest)  \a if  swap ;
: repeat  ( src dest)    \a again  \a then ;
forth

( There are a bunch of instructions that have multiple forms. Let's
  disentangle those, now that we have defined all the underlying forms.)

( Require 3 op form for i8 version.)
: adds-ish
   create  ' ,  ' ,  ' ,  ( i8 i3 r3  forms)
   does>  push  ( Rm Rn Rd | n # Rn Rd | n # Rd Rd)
   2 nth imm? if  rot drop  2dup = if  
      drop  pop             @execute  ( i8)  ^  then
            pop cell+       @execute  ( i3)  ^
   then
            pop cell+ cell+ @execute  ( r3) ;

: lsls-ish
   create  ' ,  ' ,  ( imm reg  forms)
   does>  push  ( Rm Rn Rd | n # Rm Rd)
   2 nth imm? if  rot drop  pop       @execute  ( imm)  ^  then
                            pop cell+ @execute  ( reg) ;

assembler
adds-ish  adds  addi8  addi3  addr3
adds-ish  subs  subi8  subi3  subr3

lsls-ish  lsls  lsli  lslr
lsls-ish  lsrs  lsri  lsrr
lsls-ish  asrs  asri  asrr

: movs   ( Rm Rd | n # Rd)
   over  imm? if  nip  movi8  ^  then
                0 -rot lsli ;  ( encode as 0 # Rm Rd lsl)

( cmp has two reg/reg forms: one if both are low regs; the second if either
  is a high reg.)

: cmp    ( Rn Rm | n # Rn)
   over  imm? if  nip  cmpi8  ^  then
   2dup low?  swap low?  and if  ( both low registers)
                       cmpr   ^  then
                       cmpr2 ;

( Non s-suffix instructions.)
( Require 3 reg form for non-immediate version.)
: add   ( n # sp Rd | n # pc Rd | n # sp sp | Rm Rn Rd)
   2 nth imm?  if  rot drop
      dup  \a sp = if  2drop       add-to-sp  ^  then
      over \a pc = if   nip  0a000 load-addr  ^  then
      over \a sp = if   nip  0a800 load-addr  ^  then
      error" invalid instruction form"
   then
   ( otherwise, all regs version)  0  ?Rdn  drop  addr2 ;

: sub   ( n # sp sp)
   2 nth imm?  if  drop 2drop  negate  add-to-sp  ^  then
   error" strange sub instruction" ;

forth

( XXX for testing)
.ifdef testing

( Generate all permutations of S, J1, and J2 bits to make sure I'm doing
  the encoding right. Tested against both my disasm and
  arm-none-eabi-objdump and got the same results.)

: bl-test
   [ 1 #24 << negate #]  8 for
      dup  \m here  4 + +  \a bl
      [ 1 #22 << #] +  next  drop ;

( Save an image that we can try to disassemble with objdump.)

( Super-simple raw binary image. No address info is saved!)
: save-image
   token, create-file ( fd)
   dup ( fd)  'image  #image aligned  write
   close-file ;

.then
