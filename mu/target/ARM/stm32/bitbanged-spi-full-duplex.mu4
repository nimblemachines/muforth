( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32 Bitbanged SPI (full-duplex)

( This is currently for programming Atmel AVR and 8051 [AT89LP] processors,
| which use both MOSI and MISO for data. They also use a CPOL=0, CPHA=0
| style: clock idles low, and data is clocked in on the *rising* [first] edge
| of the clock.
|
| This is in contrast to the half-duplex, CPOL=0, CPHA=1 style used to
| program Microchip PIC processors. That code is in
| target/ARM/stm32/bitbanged-spi-half-duplex.mu4)

hex
__meta

-- --------------------------------------------------------------------
-- Bitbanged full-duplex SPI
-- --------------------------------------------------------------------
( PB3 is SCK, PB4 is MISO, and PB5 is MOSI. /RST is PB7, and for chips that
| need it, slave select [/SS] is PB6.)

: spi-init
   -- First, enable clocks to Port B.
   ( Ports -FED_CBA- )
        [ %0000_0100  #16 << #] RCC_AHBENR set!

   -- Clear port B. Clock idles low; this will also assert /RST and /SS.
   0 GPIOB_ODR !

   -- Set PB3, 5, 6, and 7 to output.
   0 GPIOB_MODER !
   [ %0101_0100_01  3 2* << #] GPIOB_MODER set!  ( 2 bits per pin)

   -- Set output speed to medium.
   -- Our max toggle rate is going to be around 5Mhz.
   0 GPIOB_OSPEEDR !
   [ %0101_0100_01  3 2* << #] GPIOB_OSPEEDR set!  ( 2 bits per pin)

   -- Let's pull up PB4 so that if the slave isn't driving it we will read
   -- one bits.
   [ %01  4 2* << #] GPIOB_PUPDR set!  ( 2 bits per pin) ;


( First, let's define the "reference" implementation, in Forth. This will
| be somewhat slow. I haven't measured, but I think it toggles SCK at
| around 250kHz.)

.ifdef slow-bits

( Clock on PB3.)
: clk/   [ 1 3 << #] bit/ ;
: clk\   [ 1 3 << #] bit\ ;

( NOTE: In <bit< we try to do approximately the same amount of
| "computation" during the high and low halves of the clock.)

( Drive PB5 with the MSB; shift left; read PB4 and make it the new LSB.)
: <bit<   ( bits - bits')
   [ 1 5 << #] ( PB5)  over 0< if  GPIOB_BSRR ( set)  else  GPIOB_BRR ( clear)  then !
   2*  clk/  GPIOB_IDR @  4 >>  1 and  +  clk\ ;

( Write and read some bits.
|
| Since the STM32 is little-endian, reverse the byte order before and after
| shifting, so we can use little-endian values everywhere else in our code.)

code >endian<  ( w - w')  ( switch endianness of a word)  top top rev  next  ;c
: >bits>   ( bits count - bits')  swap >endian< swap  for  <bit<  next  >endian< ;

.else  ( fast-bits, the default)

( Next, the high-performance version of >bits>. This is capable of toggling
| at just over 5Mhz. I had to put in some no-ops to slow it down a bit.
|
| Since we are writing in assembler, we can fold the >endian< calls into
| the code.)

{
assembler
( Macro to assemble a three-cycle no-op.)
: nop3  ( for Cortex-M0)  \m here 2 + \a again ;  ( jump to following instruction)
forth
}

( Let's assume that a branch takes 3 cycles. Then our formula is
|
|    Cycles per delay = 3 + 4 * [half-bit-delay - 1]
|
| The first 3 is the case when we execute the loop once: mov, dec, fall
| through branch = 1 + 1 + 1. We execute the decrement and backward branch
| half-bit-delay - 1 times.)

variable half-bit-delay  ( 1 for 1.5M shift clock; #21 for 250K)
: fast-clock    1 half-bit-delay ! ;
: slow-clock  #21 half-bit-delay ! ;

code >bits>  ( bits count - bits')
   >v half-bit-delay w lit  0 w w ldr  w r9 mov  ( delay)
   w dpop1  w w rev  ( bits)  GPIOB_MODER >iobase x lit
   1 3 << y movs  ( PB3: clock)
   begin
      -- Drive high bit out onto PB5.
      ( 1~)  1 5 << z movs  ( PB5: MOSI)
      ( 1~)  1 w w lsls  ( shift left; high bit -> carry)
      ( 6/8~)  cs if  GPIOB_BSRR >io x z str  else  GPIOB_BRR >io x z str  nop3  then  ( drive bit)
      ( half bit delay)  r9 z mov  begin  1 z z subs  0= until
      ( 2~)  GPIOB_BSRR >io x y str  ( clock high)

      -- Sample PB4 and make it the new LSB.
      ( 4~)  GPIOB_IDR >io x z ldr  #27 z z lsls  #31 z z lsrs  ( bit4 -> bit0; other bits 0)
      ( 1~)  z w w adds  ( add in low bit)
      ( 6~)  nop3 nop3  ( stretch high half of cycle a bit)
      ( half bit delay)  r9 z mov  begin  1 z z subs  0= until
      ( 2~)  GPIOB_BRR >io x y str  ( clock low)
   ( 4~)  1 top top subs  0= until
   w top rev  next  ;c  pool,

.then  ( fast-bits)
