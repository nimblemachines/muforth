( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32 flash programming code

( Stack macros.)

( NOTE: We have switched stacks! ARM won't let us push the LR onto any
| stack but the system data stack, pointed to by SP. Stupid.
|
| R stack uses SP, push, and pop. Stack pointer reg is rsp == SP.
| D stack uses RP, str, and ldm.  Stack pointer reg is dsp == RP.)

( NOTE: The registers are pushed and popped in "register index" order:
| lower indices end up at lower addresses. The order that they are
| mentioned in the macro call is irrelevant! So be careful.)

assembler

\a rp  ( Forth return stack)        constant dsp  ( is our data stack)
\a sp  ( Forth data stack pointer)  constant rsp  ( is our return stack)

( Return stack macros.)
: rpush   ( r1)           1 regs>mask  asm{{  push  }} ;
: rpush2  ( r1 r2)        2 regs>mask  asm{{  push  }} ;

: rpop   ( r1)           1 regs>mask  asm{{  pop  }} ;
: rpop2  ( r1 r2)        2 regs>mask  asm{{  pop  }} ;

( NOTE: The above warning about order is relevant here too!)
( These are pushed in the order given on the stack.)

( Data stack macros.)
( These are popped in register index order - lower to higher.)
: dpop   ( r1)       1 regs>mask  asm{{  dsp ldm  }} ;
: dpop2  ( r1 r2)    2 regs>mask  asm{{  dsp ldm  }} ;
: dpop3  ( r1 r2 r3) 3 regs>mask  asm{{  dsp ldm  }} ;

( Fetch and store FLASH_xxx registers.)
\a r4 constant fr

( These are useful for *all* kinds of i/o programming on an STM32. If we
| define them here, any code loaded after this can use them.
|
| STM32 peripherals are defined on 1 KiB boundaries.)

: >iobase  ( io-reg - base)      -1 Ki       and ;
: >io      ( io-reg - offset)   [ 1 Ki 1- #] and ;

forth

( Tell the disassembler about these register names.)
-: ( reg)
   15 and  3 *
   z" w  x  y  z  fr dspip topr8 up r10r11r12rsplr pc " +  3 -trailing type ;

: asm-regs   [ #] is .reg ;   asm-regs


( How much space do we want to use for the flashbuf? It can't be bigger
| than /page, and we don't want to use too much of the RAM, since I don't
| think the flash buf size is the limiting factor for programming speed.
|
| Let's use 256 if flash size is less than 32 KiB, and 1 KiB otherwise - or
| /page if it is smaller.)

#flash 32 Ki u< .if  256  .else  1 Ki  .then  /page min
constant #flashbuf

( Leave room for 64 cells on sp stack; room for 256 bytes of flash
| programming code; round down to multiple of 256, then leave #flashbuf
| bytes of space for buffer.)

( Start the flash routines *after* the flashbuf.)

\m sp0  64 \m cells -  256 - ( flash code)  -256 and  dup constant @flash-routines
                                             #flashbuf -  constant @flashbuf
hex
__meta

ram  here  ( we are going to return here after compiling the flash routines.)

@flash-routines goto  ( starting address of flash routines)

label stm32-flash-unlock
   FLASH_CR >iobase fr lit
   x w dpop2   FLASH_KEYR >io fr w str   FLASH_KEYR >io fr x str
   0 w movs    FLASH_CR   >io fr w str  ( clear any program/erase bits)
   lr bx  ;c
   pool,

label stm32-flash-lock
   0          w movs   FLASH_CR >io fr w str  ( clear any program/erase bits)
   80 ( LOCK) w movs   FLASH_CR >io fr w str
   lr bx  ;c

( w is flash page address to erase)
label stm32-flash-erase  ( flash-page-address)
   FLASH_SR >io fr w ldrb   FLASH_SR >io fr w strb  ( clear any error bits)
   w dpop
    2 ( PER)      x movs   FLASH_CR >io fr x str ( set PER)
                           FLASH_AR >io fr w str ( set page erase address)
   42 ( STRT+PER) x movs   FLASH_CR >io fr x str ( set STRT+PER)
   ( fall thru)  ;c

( Wait until flash command finishes.)
label -busy
   x w rpush2
   1 ( BSY) w movs
   begin   FLASH_SR >io fr x ldr   x w tst   0= until
   x w rpop2
   lr bx  ;c

label stm32-flash-mass-erase
   FLASH_SR >io fr w ldrb   FLASH_SR >io fr w strb  ( clear any error bits)
    4 ( MER)      w movs   FLASH_CR >io fr w str ( set MER)
   44 ( STRT+MER) w movs   FLASH_CR >io fr w str ( set STRT+MER)
   -busy b  ;c

.ifdef bogus-and-untested

( Option bytes, erasing and programming.)

label unlock-option-bytes
   x w dpop2   FLASH_OPTKEYR >io fr w str
               FLASH_OPTKEYR >io fr x str
   lr bx  ;c
   pool,

label erase-option-bytes
   lr rpush
   220 ( OPTWRE+OPTER) w lit   FLASH_CR >io fr w str ( set OPTER)
    40 ( STRT) w w adds        FLASH_CR >io fr w str ( set STRT+OPTER)
   -busy bl
   pc rpop  ;c
   pool,

label remove-read-protect  ( key)
   lr rpush
   -- unlock-option-bytes bl
   -- erase-option-bytes bl
   210 ( OPTWRE+OPTPG) w lit   FLASH_CR w freg! ( set OPTPG)
   -- Reference manual says to do a halfword write; complemented high byte
   -- will be automagically generated.
   55aa w lit   OB_RDP x lit   0 x w strh
   -- 0aa w movs   OB_RDP x lit   0 x w strh
   -busy bl
   pc rpop  ;c
   pool,

.then  ( bogus)

( w is byte count, x is flash address,
| y is ram buffer address, z is offset.)
label stm32-flash-program  ( buf a u)
   lr rpush
   FLASH_SR >io fr w ldrb   FLASH_SR >io fr w strb  ( clear any error bits)
   y x w dpop3
   1 ( PG) z movs   FLASH_CR >io fr z str ( set PG bit)
   0 z movs  ( offset)
   begin
      ( program by halfwords!)
      z y top ldrh   z x top strh
      2 z z adds
      -busy bl
      w z cmp
   u>= until
   pc rpop  ;c

.ifdef testing

( w is byte count, x is dest address, y is src address, z is offset. Copy
| by words, not halfwords.)
label copy-mem  ( src dest count)
   y x w dpop3
   0 z movs  ( offset)
   begin
      z y top ldr   z x top str
      4 z z adds
      w z cmp
   u>= until
   lr bx  ;c

.then  ( testing)

( This looks a litte bit goofy because we have to switch stack pointers
| before executing the code, and then switch back afterwards - except that
| we don't care about the return stack pointer after our code has executed;
| we assume that the R stack is empty. We don't really need the data stack
| pointer either, but we push it anyway, just in case.
|
| We make sure to disable interrupts before calling our code!)

label execute-assembly
   cpsid  ( disable interrupts)
   { top w } pop   sp rp mov   w sp mov   dsb   isb   top blx
   rp sp mov
.ifdef testing
   { top fr z y x w } push
.then
   0 bkpt ;c

align  ( make sure RAM region is word-aligned)

here @flash-routines -  constant #flash-routines   ( size of the code)
goto  ( return to saved here)

__host

forth

.ifdef testing

: .rxregs  ( top freg z y x w)
   cr  ."        W         X         Y         Z      FREG       TOP        SP"
       (  00000000  00000000  00000000  00000000  00000000  00000000  00000000 )
   cr       .h32__    .h32__    .h32__    .h32__    .h32__    .h32__  tsp @ .h32__ ;

.else  ( not testing)

: .rxregs ;

.then  ( testing)

( For quick and dirty execution of remote assembly code.)
: rx  ( x0 .. xn 'code rp - y0 .. yn <regs>)
   ?chat  1+ ( thumb)  \m rp0
   stack>  \m execute-assembly runwait  stack<  .rxregs ;
