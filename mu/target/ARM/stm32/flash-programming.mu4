| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32 flash programming code

| Register conventions.
|
| r0 to r3  aka w x y z  are scratch
| r4 is FLASH_REGS base address (fb)
| r5 is count (cnt)

( Tell the disassembler about these register names.)
-: ( reg)
   15 and  3 *
   z" w  x  y  z  fb cntr6 r7 r8 r9 r10r11r12rsplr pc " +  3 -trailing type ;

: flash-asm-regs   [ #] is .reg ;   flash-asm-regs

| These are useful for *all* kinds of i/o programming on an STM32. If we
| define them here, any code loaded after this can use them.
|
| STM32 peripherals are defined on 1 KiB boundaries.

meta
: >iobase  ( io-reg - base)      -1 Ki       and ;
: >io      ( io-reg - offset)   [ 1 Ki 1- #] and ;

assembler
\a r5 constant cnt

| From flash register absolute address (equate) generate an io offset
| against the register holding the base address of the flash regs (r3).

: >fr   ( flash-reg - offset base-reg)   \m >io \a r4 ;

forth

.equates. .contains FLASH_AR .if
| ---------------------------------------------------------------------------
| Device with uniformly-sized flash pages; page erase by *address* (F0 & F3)
| ---------------------------------------------------------------------------

| How much space do we want to use for the flashbuf? It can't be bigger
| than /page, and we don't want to use too much of the RAM, since I don't
| think the flash buf size is the limiting factor for programming speed.
|
| Let's use 256 if flash size is less than 32 KiB, and 1 KiB otherwise - or
| /page if it is smaller.

#flash 32 Ki u< .if  256  .else  1 Ki  .then  /page min
constant #flashbuf

| Leave room for 64 cells on sp stack; room for 256 bytes of flash
| programming code; round down to multiple of 256, then leave #flashbuf
| bytes of space for buffer.

( Start the flash routines *after* the flashbuf.)

\m sp0  64 \m cells -  256 - ( flash code)  -256 and  dup constant @flash-routines
                                             #flashbuf -  constant @flashbuf
hex
__meta

ram  here  ( we are going to return here after compiling the flash routines.)

@flash-routines goto  ( starting address of flash routines)

label stm32-flash-unlock
   FLASH_CR >iobase r4 lit  ( set up flash register base address)
   { x w } pop   FLASH_KEYR >fr w str
                 FLASH_KEYR >fr x str
   0 w movs      FLASH_CR   >fr w str  ( clear any program/erase bits)
   FLASH_SR >fr w ldr   FLASH_SR >fr w str  ( clear any error bits)
   lr bx  ;c
   pool,

label stm32-flash-lock
   80 ( LOCK) w movs   FLASH_CR >fr w str
   lr bx  ;c

| Reference manual says we have to set PER *before* setting FLASH_AR, so we
| can't share as much code in stm32-flash-start-erase.

label stm32-flash-page-erase  ( flash-page-address)
   2 ( PER) w movs  ( page erase command)
   FLASH_CR >fr w str  ( set erase bits)
   { x } pop   FLASH_AR >fr x str  ( set page erase address)
   ( fall thru)  ;c

( Enter with erase bits in w.)
label stm32-flash-start-erase
   40 ( STRT) w w adds  FLASH_CR >fr w str  ( set STRT+<erase-bits>)
   ( fall thru)  ;c

( Wait until flash command finishes. Clobbers w.)
label -busy
   begin   FLASH_SR >fr w ldr   1 w w lsrs ( BSY -> Carry)  cc until
.ifdef testing
   w w w adds  | so we can see the result in testing mode
.then
   lr bx  ;c

label stm32-flash-mass-erase
   4 ( MER) w movs  ( mass erase command)
   FLASH_CR >fr w str  ( set erase bits)
   stm32-flash-start-erase b  ;c

| w is byte count, x is dest address, y is src address, z is offset.
| Program by halfwords.
label stm32-flash-program  ( buf a u)
   1 ( PG) w movs   FLASH_CR >fr w str  ( set PG bit)
   { y x w } pop
   { lr } push
   0 z movs  ( offset)   w cnt mov  ( save)
   begin
      ( program by halfwords!)
      z y w ldrh   z x w strh   2 z z adds
      -busy bl  ( clobbers w)
      cnt z cmp
   u>= until
   { pc } pop  ;c

.ifdef bogus-and-untested

( Option bytes, erasing and programming.)

label unlock-option-bytes
   { x w } pop   FLASH_OPTKEYR >fr w str
                 FLASH_OPTKEYR >fr x str
   lr bx  ;c
   pool,

label erase-option-bytes
   220 ( OPTWRE+OPTER) w lit
   FLASH_CR >fr w str  ( set erase bits)
   stm32-flash-start-erase b  ;c
   pool,

label remove-read-protect  ( key)
   lr rpush
   | unlock-option-bytes bl
   | erase-option-bytes bl
   210 ( OPTWRE+OPTPG) w lit   FLASH_CR w freg! ( set OPTPG)
   | Reference manual says to do a halfword write; complemented high byte
   | will be automagically generated.
   55aa w lit   OB_RDP x lit   0 x w strh
   | 0aa w movs   OB_RDP x lit   0 x w strh
   -busy bl
   pc rpop  ;c
   pool,

.then  ( bogus)

.else
| ---------------------------------------------------------------------------
| Device with non-uniform flash *sectors* (F4), or pages erased by *index* (C0)
| ---------------------------------------------------------------------------

.ifndef #flashbuf
   z"

Your chip is uses indices rather than addresses to specify the block of
flash to erase. You need to define #flashbuf - the size of the RAM buffer
used during flash programming. It should be no smaller than 256 bytes, and
must be no bigger than the smallest sector or page in the flash."  abort
.then

| Leave room for 64 cells on sp stack; room for 256 bytes of flash
| programming code; round down to multiple of 256, then leave #flashbuf
| bytes of space for buffer.

( Start the flash routines *after* the flashbuf.)

\m sp0  64 \m cells -  256 - ( flash code)  -256 and  dup constant @flash-routines
                                             #flashbuf -  constant @flashbuf
hex
__meta

ram  here  ( we are going to return here after compiling the flash routines.)

@flash-routines goto  ( starting address of flash routines)

label stm32-flash-unlock
   FLASH_CR >iobase r4 lit  ( set up flash register base address)
   { x w } pop   FLASH_KEYR >fr w str
                 FLASH_KEYR >fr x str
   0 w movs      FLASH_CR   >fr w str  ( clear any program/erase bits)
   FLASH_SR >fr w ldrh   FLASH_SR >fr w strh  ( clear any error bits)
   lr bx  ;c
   pool,

label stm32-flash-lock
   80 ( LOCK) w movs   FLASH_CR 3 + >fr w strb  ( lock CR)
   lr bx  ;c

| Some F4 devices have non-uniformly-sized erase regions; ST calls these
| "sectors". Devices like the C0 series have uniformly-sized erase regions
| (pages), but instead of being identified by *address* they are identified
| by an *index*.
label stm32-flash-page-erase  ( sector#/page#)
   { w } pop   3 w w lsls  ( shift sector# up 3 bits)
   2 ( SER)  w w adds   FLASH_CR     >fr w str  ( set SER + sector number)
   1 ( STRT) w movs     FLASH_CR 2 + >fr w strb ( set STRT bit)
   ( fall thru)  ;c

( Wait until flash command finishes. Clobbers w.)
label -busy
   begin   FLASH_SR 2 + >fr w ldrb   1 w w lsrs ( BSY -> Carry)   cc until
.ifdef testing
   w w w adds  | so we can see the result in testing mode
.then
   lr bx  ;c

.ifdef stm32c031

| w is byte count, x is flash address,
| y is ram buffer address, z is offset.
label stm32-flash-program  ( buf a u)
   1 ( PG) w movs   FLASH_CR >fr w str  ( set PG bit)
   { y x w } pop
   { lr } push
   0 z movs  ( offset)   w cnt mov  ( save)
   begin
      ( unlike paged flash, we program by double-words!)
      z y w ldr   z x w str   4 z z adds
      z y w ldr   z x w str   4 z z adds
      -busy bl  ( clobbers w)
      cnt z cmp
   u>= until
   { pc } pop  ;c

.then  ( def stm32c031)

.ifdef stm32f407

| w is byte count, x is flash address,
| y is ram buffer address, z is offset.
label stm32-flash-program  ( buf a u)
   1 ( PG)    w movs   FLASH_CR    >fr w str  ( set PG bit)
   2 ( psize) w movs   FLASH_CR 1+ >fr w strb ( psize=2; program by 32bit word)
   { y x w } pop
   { lr } push
   0 z movs  ( offset)   w cnt mov  ( save)
   begin
      ( unlike paged flash, we program by words!)
      z y w ldr   z x w str   4 z z adds
      -busy bl  ( clobbers w)
      cnt z cmp
   u>= until
   { pc } pop  ;c

.then  ( def stm32f407)

.then  ( sector, or indexed page)
| ---------------------------------------------------------------------------
| End of differentiated flash routines; back to shared code.
| ---------------------------------------------------------------------------

.ifdef testing

| w is byte count, x is dest address, y is src address, z is offset. Copy
| by words, not halfwords.
label copy-mem  ( src dest count)
   { y x w } pop
   0 z movs  ( offset)   w cnt mov  ( save)
   begin
      z y w ldr   z x w str   4 z z adds
      cnt z cmp
   u>= until
   lr bx  ;c

| For testing #retries.
label hang   hang b  ;c
label long   1 w movs   #24 w w lsls
             begin   1 w w subs  0= until  lr bx  ;c

.then  ( testing)

| We make sure to disable interrupts before calling our code!
label execute-assembly
   cpsid  ( disable interrupts)
   { w } pop   dsb   isb   w blx
.ifdef testing
   { cnt r4 z y x w } push
.then
   0 bkpt ;c

align  ( make sure RAM region is word-aligned)

here @flash-routines -  constant #flash-routines   ( size of the code)
goto  ( return to saved here)

__host

forth

.ifdef testing

: .rxregs  ( cnt freg z y x w)
   cr  ."        W         X         Y         Z      FREG       CNT        SP   Elapsed"
       (  00000000  00000000  00000000  00000000  00000000  00000000  00000000  00000000 )
   cr       .h32__    .h32__    .h32__    .h32__    .h32__    .h32__  tsp @ .h32__
                                                                                #retries @ .h32__ ;
.else  ( not testing)

: .rxregs ;

.then  ( testing)

( For quick and dirty execution of remote assembly code.)
: rx  ( x0 .. xn 'code - y0 .. yn <regs>)
   ?chat  1+ ( thumb)
   stack>  \m execute-assembly runwait  stack<  .rxregs ;
