| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading STM32C0/G0/G4 flash programming

hex
__meta

label stm32-flash-unlock
   FLASH_CR >iobase r4 lit  ( set up flash register base address)
   { x w } pop   FLASH_KEYR >fr w str
                 FLASH_KEYR >fr x str
   0 w movs      FLASH_CR   >fr w str  ( clear any program/erase bits)
   FLASH_SR >fr w ldrh   FLASH_SR >fr w strh  ( clear any error bits)
   lr bx  ;c
   pool,

label stm32-flash-lock
   80 ( LOCK) w movs   FLASH_CR 3 + >fr w strb  ( lock CR)
   lr bx  ;c

label stm32-flash-page-erase  ( page#)
   { w } pop   3 w w lsls  ( shift sector# up 3 bits)
   2 ( PER)  w w adds   FLASH_CR     >fr w str  ( set PER + page number)
   1 ( STRT) w movs     FLASH_CR 2 + >fr w strb ( set STRT bit)
   ( fall thru)  ;c

( Wait until flash command finishes. Clobbers w.)
label -busy
   begin   FLASH_SR 2 + >fr w ldrb   1 w w lsrs ( BSY -> Carry)   cc until
.ifdef testing
   w w w adds  | so we can see the result in testing mode
.then
   lr bx  ;c

| C0, G0, and G4 all have a 64-bit programming buffer, so we program them
| two 32-bit words at a time.

| w is byte count, x is flash address,
| y is ram buffer address, z is offset.
label stm32-flash-program  ( buf a u)
   1 ( PG) w movs   FLASH_CR >fr w str  ( set PG bit)
   { y x w } pop
   { lr } push
   0 z movs  ( offset)   w cnt mov  ( save)
   begin
      ( We program by double-words!)
      z y w ldr   z x w str   4 z z adds
      z y w ldr   z x w str   4 z z adds
      -busy bl  ( clobbers w)
      cnt z cmp
   u>= until
   { pc } pop  ;c
