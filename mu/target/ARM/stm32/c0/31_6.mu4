( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32C031x6 chip

( So downstream code knows what kind of chip we are.)
-d stm32c031

"0800_0000 constant @flash
     32 Ki constant #flash

"2000_0000 constant @ram
     12 Ki constant #ram

      -- 2 Ki constant #bl-ram  ( ram consumed by bootloader)

( Programming the C031 flash is like programming the F407, except that the
| C031 has a uniform sector/page size of 2 KiB.)

( Given a target flash address, return a sector# and true if address is on
| a sector boundary, and return false otherwise.)

( XXX should this be called map-flash-sector ?)
: lookup-flash-sector  ( 'target - sector# -1 | 0)
   @flash -  2 Ki /mod ( mod quot)
   swap 0= if  -1 ^  then  drop 0  ;

( We need to define #flashbuf for the chip. Should be at least 256 but no
| more than 2 Ki, the page size. Since we don't have a lot of RAM on the
| chip, let's keep it small.)

256 constant #flashbuf

.ifdef testing

: test-sector  ( 'target)
   dup lookup-flash-sector  if  swap  cr  u. ." sector " u. ^ then  drop ;

( Test every 256 byte chunk of the flash to see where the sector boundaries
| are. Make sure we get the correct values!)

: test-sectors
   @flash #flash over + swap do  i test-sector  256 +loop ;

.then

-- load peripheral equates etc
ld target/ARM/stm32/c0/31_x-equates.mu4

ld! target/ARM/processor/cortex-m0-plus.mu4
