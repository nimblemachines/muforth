( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32F407xG chip

( So downstream code knows what kind of chip we are.)
-d stm32f407

"0800_0000 constant @flash
      1 Mi constant #flash

"2000_0000 constant @ram
    128 Ki constant #ram

      8 Ki constant #bl-ram  ( ram consumed by bootloader)

( There isn't a single erase page size for this chip! Instead there are
| sectors of non-uniform size, laid out as follows:
|
| 4  16 Ki sectors
| 1  64 Ki sector
| 7 128 Ki sectors.
|
| We can either use mass erase - simpler! - or do some kind of address to
| sector lookup.)

: sector?  ( 'target size-in-KiB sector-offset - sector# -1 | 0)
   push  Ki push  r@ 1- over and 0= if  ( on sector boundary)
      pop /  pop +  -1 ^  then
   2pop  2drop drop   0 ;

: lookup-flash-sector  ( 'target - sector# -1 | 0)
   @flash -
   dup  64 Ki u< if  16 0 sector? ^  then
   dup  64 Ki  = if    drop  4 -1 ^  then
       128 Ki -     128 5 sector? ;

( We need to define #flashbuf for the chip. Should be at least 256 but no
| more than the smallest sector. Since we have lots of RAM on the chip,
| let's make it pretty big.)

4 Ki constant #flashbuf

.ifdef testing

: test-sector  ( 'target)
   dup lookup-flash-sector  if  swap  cr  u. ." sector " u. ^ then  drop ;

( Test every 256 byte chunk of the flash to see where the sector boundaries
| are. Make sure we get the correct values!)

: test-sectors
   @flash #flash over + swap do  i test-sector  256 +loop ;

.then

-- load peripheral equates etc
ld target/ARM/stm32/f4/07_x-equates.mu4

ld! target/ARM/processor/cortex-m4.mu4
