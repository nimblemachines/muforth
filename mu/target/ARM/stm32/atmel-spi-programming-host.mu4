( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading Atmel SPI flash programming (host)

( This is the host-side code to drive
| target/ARM/stm32/atmel-spi-programming-core.mu4)

( We need to know where to find the data structures in the STM32 memory.
| They are conveniently placed at the start of RAM. We are going to call
| directly into the stlink support code to read and write the STM32 memory.
| We can't use the "interact" versions - t.read, t.write, etc - because they
| will be associated with the 8051 target!)

decimal

"2000_0000  ( STM32 ram origin)
dup constant data      256 +  ( memory read/write buffer)
dup constant semaphore   4 +  ( semaphore + stm32 command)

( This command block is pretty specific to AVR/AT89LP SPI programming.)
dup constant cmd         1 +  ( flash command)
           ( addr )      2 +  ( flash addr: high byte, low byte)
           ( result )    1 +  ( single byte result)

           ( count )     2 +  ( byte count to transfer)

           ( toggle )    1 +  ( flash command toggle - for AVR)
                         1 +  ( padding to word boundary)
dup cmd - constant #flash-cmd ( length of flash cmd buffer)

( This is for UART and I2C communications, in concert with the data array.
| It consists of 4 bytes: station, #send, #recv, #err. We call it
| "serial-cmd" since it's metadata for the serial comm words.)

constant serial-cmd

hex

( Remote execute command.)
: rx-cmd  ( cmd)
   deca_f000 + pad lew!  pad semaphore 4 st.write  ( write to STM32 memory)
   ( Keep reading semaphore until STM32 signals that it is done.)
   begin  pad semaphore 4 st.read  pad lew@ face_d000 = until ;

( A few basic commands. None of these have any data associated with them.
| Mostly the STM32 just needs to change a setting or drive a GPIO high or
| low.)

: spi.reset-low      10 rx-cmd ;
: spi.reset-high     11 rx-cmd ;

: spi.slow-clock     12 rx-cmd ;
: spi.fast-clock     13 rx-cmd ;

( These are the workhorse commands.)
: spi.single         14 rx-cmd ;
: spi.bulk-read      15 rx-cmd ;
: spi.bulk-write     16 rx-cmd ;

( These are for serial communications.)
: uart.send-recv     17 rx-cmd ;
: i2c.send-recv      18 rx-cmd ;

variable spy  ( to spy on the protocol)
: spy-write  ( buf count)
   spy @ if  cr  for  c@+ swap  ." >" .h8_  next  drop ^  then  2drop ;

: spy-read   ( buf count)
   spy @ if  cr  for  c@+ swap  ." <" .h8_  next  drop ^  then  2drop ;

( Testing)
: st@  ( a - w)  ( read a word of memory via ST-LINK)
   pad swap 4 st.read  pad lew@ ;


.ifdef avr
-- ------------------------------------------------------------------------
-- AVR programming
-- ------------------------------------------------------------------------
: setup-single  ( avr-cmd addr data)
   pad m !
   rot m& ( cmd)  swap >lohi m& m& ( addr)  m& ( data)
   pad cmd 4 st.write  pad 4 spy-write ;

: setup-bulk  ( avr-cmd addr toggle buf len - buf len)
   2push ( buf len)
   pad m !
   rot m& ( cmd)  swap >lohi m& m& ( addr)  0 m& ( zero result)
   r@ >hilo m& m& ( count)  m& ( toggle)
   pad cmd #flash-cmd st.write  pad #flash-cmd spy-write
   2pop ;

( The existing AVR code needs the following commands defined:)
: avr.Hello ;
: avr.Bye  ;  ( XXX is there anything to do here?)

: avr.ResetHigh  spi.reset-high ;
: avr.ResetLow   spi.reset-low ;

: avr.SlowClock  spi.slow-clock ;
: avr.FastClock  spi.fast-clock ;

: avr.Read    ( avr-cmd addr data)  ( leaves result in pad)
   setup-single  spi.single
   pad cmd 4 st.read  pad 4 spy-read ;

: avr.Write   ( avr-cmd addr data)
   setup-single  spi.single ;

: avr.BulkRead   ( avr-cmd addr toggle buf len)
   setup-bulk ( buf len)
   spi.bulk-read
   data swap ( buf addr len)  st.read ;

: avr.BulkWrite  ( avr-cmd addr toggle buf len)
   setup-bulk ( buf len)
   data swap ( buf addr len)  st.write
   spi.bulk-write ;

.then  ( avr)


.def at89lp     ( at89lp51/52)
.def at89lp-ss  ( at89lp828/6440)  .or .if
-- ------------------------------------------------------------------------
-- AT89LP programming
-- ------------------------------------------------------------------------
( Copy cmd, addr, result placeholder, and count, into pad, and copy to STM32.)
: setup-bulk  ( len cmd addr - len)
   pad m !
   swap m& ( cmd)  >lohi m& m& ( addr)  0 m& ( result)  dup >hilo m& m& ( count)
   pad cmd #flash-cmd st.write  pad #flash-cmd spy-write ;

( Setup a single cmd, execute it, and read back the result.)
: at89.single  ( cmd addr)
   0 -rot  setup-bulk  drop
   spi.single    pad cmd 4 st.read   pad 4 spy-read ;

: at89.bulk-read   ( buf len cmd addr)
   setup-bulk
   spi.bulk-read   data swap ( buf addr len)  st.read ;

: at89.bulk-write  ( buf len cmd addr)
   setup-bulk      data swap ( buf addr len)  st.write
   spi.bulk-write ;

.then  ( at89lp or at89lp-ss)
