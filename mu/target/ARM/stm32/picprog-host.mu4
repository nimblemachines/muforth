| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading PIC18 SPI flash programming (host)

( This is the host-side code to drive target/ARM/stm32/picprog-core.mu4)

| We need to know where to find the data structures in the STM32 memory.
| They are conveniently placed at the start of RAM. We are going to call
| directly into the stlink support code to read and write the STM32 memory.
| We can't use the "interact" versions - t.read, t.write, etc - because they
| will be associated with the PIC target!

decimal

| Because the following constants refer to memory locations inside the
| connected STM32, let's prefix them to make them clear and unambiguous.

"2000_0000  ( STM32 ram origin)
dup constant stm32.data      256 +  ( memory read/write buffer)
dup constant stm32.semaphore   4 +  ( semaphore + stm32 command)

dup constant stm32.addr        4 +  ( flash addr)
dup constant stm32.count       4 +  ( transfer count; could be bytes or words)

dup constant stm32.out-count   2 +  ( byte count to write)
dup constant stm32.in-count    2 +  ( byte count to read)
drop

hex

( Remote execute command.)
: rx-cmd  ( cmd)
   deca_f000 + stm32.semaphore dap!  ( write to STM32 memory)
   ( Keep reading semaphore until STM32 signals that it is done.)
   begin  stm32.semaphore dap@  face_d000 = until ;

variable picprog-spy  ( to spy on the protocol)
: spy-write  ( buf count)
   picprog-spy @ if  cr  for  c@+ swap  ." >" .h8_  next  drop ^  then  2drop ;

: spy-read   ( buf count)
   picprog-spy @ if  cr  for  c@+ swap  ." <" .h8_  next  drop ^  then  2drop ;


.ifdef pic18f-q
| -------------------------------------------------------------------------
| PIC18-Q programming
| -------------------------------------------------------------------------

| We are going to use the generic flash programming code, which calls into
| the interact code, to do the programming. We need to do some "plumbing"
| to connect the SPI progamming code to the interact code. We do this in
| the usual way: using chat-via.

| Command table for programming pod
|
| 10  +prog             put target chip into programming mode
| 11  -prog             exit programming mode
| 12  uart-read-write   for debug; currently unused
| 13  read-flash
| 14  read-eeprom
| 15  erase-page
| 16  prog-flash
| 17  prog-eeprom

: +prog  ( - erase-page-size)
         10 rx-cmd  stm32.count dap@ ;

: -prog  11 rx-cmd ;

: setup  ( a u - 'data u)  ( write addr and count to stm32)
   swap stm32.addr dap!  dup stm32.count dap!  stm32.data swap ;

: sx.read-flash    ( buf a u)  setup            13 rx-cmd  st.read ;
: sx.read-eeprom   ( buf a u)  setup            14 rx-cmd  st.read ;

: s.erase          ( a)  stm32.addr dap!        15 rx-cmd ;

: s.program        ( buf a u)  setup  st.write  16 rx-cmd ;
: s.write-eeprom   ( buf a u)  setup  st.write  17 rx-cmd ;

| s.read-space needs to be careful - both about data vs flash, and about
| the read size of the flash regions. For data reads, since there is no way
| to read ram or i/o over SPI, simply return a buffer full of 0dd; for
| flash reads, check the address and call the appropriate read routine.

: s.read-space  ( buf a u space)
   if  ( data, ie ram or i/o)  nip  0dd fill ^  then
   over @config @device-config within if
      ( config or eeprom)  sx.read-eeprom ^  then
      ( all other flash)   sx.read-flash ;

| XXX When do we call -prog??? When are we done talking to the chip???
: s.hello       ( - chunk-size)  +prog  #256 ;

| By returning an impossible value (it's more than 16 bits) we can identify
| to the generic flashing code that we are not running in serial chat but
| instead using the SPI programming interface.

: s.get-status  ( - dp)  dead_c0de ;

| s.write-data will get called to copy ram at connect time; we want to
| ignore this data rather than signal an error.

: s.write-data    ( buf a u)  2drop drop ;

| NOTE: This is the PIC18 chat-via, not STM32!
|
| -prog is in the app-start slot. If everything flashed successfully, the
| PIC18 flash code will call t.app-start, and this will take the chip out
| of programming mode!

: spi   chat-via
   s.hello  s.get-status  chat-fail  s.read-space  s.write-data  s.write-eeprom
   -prog  nope  nope  nope  s.erase  s.program ;
.then  ( pic18f-q)
