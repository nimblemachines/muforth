( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading PIC18 SPI flash programming (host)

( This is the host-side code to drive target/ARM/stm32/picprog-core.mu4)

( We need to know where to find the data structures in the STM32 memory.
| They are conveniently placed at the start of RAM. We are going to call
| directly into the stlink support code to read and write the STM32 memory.
| We can't use the "interact" versions - t.read, t.write, etc - because they
| will be associated with the PIC target!)

decimal

( Because the following constants refer to memory locations inside the
| connected STM32, let's prefix them to make them clear and unambiguous.)

"2000_0000  ( STM32 ram origin)
dup constant stm32.data      256 +  ( memory read/write buffer)
dup constant stm32.semaphore   4 +  ( semaphore + stm32 command)

dup constant stm32.addr        4 +  ( flash addr)
dup constant stm32.count       4 +  ( transfer count; could be bytes or words)

dup constant stm32.out-count   2 +  ( byte count to write)
dup constant stm32.in-count    2 +  ( byte count to read)
drop

hex

( Remote execute command.)
: rx-cmd  ( cmd)
   deca_f000 + pad lew!  pad stm32.semaphore 4 st.write
   ( Keep reading semaphore until STM32 signals that it is done.)
   begin  pad stm32.semaphore 4 st.read  pad lew@ face_d000 = until ;

variable picprog-spy  ( to spy on the protocol)
: spy-write  ( buf count)
   picprog-spy @ if  cr  for  c@+ swap  ." >" .h8_  next  drop ^  then  2drop ;

: spy-read   ( buf count)
   picprog-spy @ if  cr  for  c@+ swap  ." <" .h8_  next  drop ^  then  2drop ;


.ifdef pic18f-q
-- ------------------------------------------------------------------------
-- PIC18-Q programming
-- ------------------------------------------------------------------------
: setup  ( a u - u)  ( put addr and count into pad; write to stm32)
   tuck swap ( u u a)  pad lew!+ lew!  pad stm32.addr 8 st.write ;

: data>  ( buf u)  stm32.data swap st.read ;
: >data  ( buf u)  stm32.data swap st.write ;

: +prog  10 rx-cmd ;
: -prog  11 rx-cmd ;

: read-flash-chunk  ( buf a u)  setup  13 rx-cmd  data> ;
: read-ee-chunk     ( buf a u)  setup  14 rx-cmd  data> ;

: prog-flash-chunk  ( buf a u)  setup  >data  15 rx-cmd ;
: prog-ee-chunk     ( buf a u)  setup  >data  16 rx-cmd ;

.then  ( pic18f-q)
