| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading PIC16/18 SPI flash programming (via STM32-based "pod")

| It might seem rather odd that this is here, but I'm interested in using
| an STM32 Discovery board as a "programming pod" for Microchip PIC16 and
| PIC18 microcontrollers, which have a simple SPI interface for erasing,
| programming, and reading the on-chip memories and configuration bytes.
|
| The idea is basically this:
|
| (1) the STM32 chip sits in a loop, reading a word of the RAM until a
| magic number appears there. This is the "semaphore" signal from the host
| that a command packet is available. When it sees the magic word, it goes
| to step 2.
|
| (2) The STM32 turns around and talks to the target chip via SPI, sending
| the command, and reading or writing the payload, if any. It buffers the
| response, and then writes a different magic number to the semaphore word,
| signaling the host that it has completed the command.
|
| Then it goes back to (1). The host reads the buffered target response,
| creates a new command packet, and sets the semaphore word.
|
| Programming the flash, EEPROM, and config bytes is done one word/byte at
| a time. It makes sense to buffer several of these and do them all at once,
| but initially I want to just be able to talk to the chip.
|
| The communication between the STM32 and the host can be over ST-LINK,
| which means that no USB-serial interface is necessary. The STM32 Discovery
| board can power the target as well.
|
| There is no need to flash this code into the STM32. It can easily run
| from RAM.

__meta
decimal

ram

here @ram = .not .if
   error" Something is wrong: data structures not starting at @ram."
.then

| We want to put the data structures that the host will use to communicate
| with the STM32 at the beginning of RAM so we know where to find them.
| Remember: when *using* this code, the host will have loaded PIC code into
| the memory spaces. It will have no idea about how the memory of the STM32
| is laid out, so we set up a simple, constant layout - data first, then the
| program.

( Let's put the big stuff first. Makes it easy to find when debugging.)
here equ data        256 allot  ( memory read/write buffer)
here equ semaphore  cell allot  ( semaphore + stm32 command)

| NOTE: these are both 4 bytes for alignment. addr only needs to be 3
| bytes, and count 2. But we read and write the stm32 memory in 4-byte
| chunks.

here equ addr          4 allot  ( flash addr)
here equ count         4 allot  ( byte count)

( XXX Do I want these for the uart code?)
here equ out-count     2 allot  ( byte count to write)
here equ in-count      2 allot  ( byte count to read)

hex

.ifndef in-ram

flash

( Lay down a vector table, using end of ram as initial SP)
0 vector-table flash-vectors
flash-vectors  ( make it the current table)

.then

( We want to write this code in Forth, so let's load the Forth kernel.)
ld target/ARM/v6-m/kernel-itc.mu4

| -------------------------------------------------------------------------
| Chip init
| -------------------------------------------------------------------------
#48,000,000 equ cpuclk
-d cpuclk-48m
chip-path z" init.mu4" concat load-file

| -------------------------------------------------------------------------
| Timers and delays
| -------------------------------------------------------------------------
| The PIC programming process requires several delays. Some are a few
| microseconds; others, a few milliseconds. Let's use one of the timers to
| do accurate timing.

.ifdef timer-testing

| The original timer code was written and tested on an F303, which has
| TIM3, TIM6, and TIM7.
|
| It turns out that this is not universally true; many chips lack one or
| both of TIM6 and TIM7.
|
| I'm going to leave the testing code alone and also define a more
| "universal" version that uses TIM3 - the only timer that seems to exist
| on all families and chips!
|
| Now on to the code.
|
| TIM6 and TIM7 are basic timers. Let's use TIM6 for the delay timer and
| also run TIM7 in an endless loop at full speed so we can test that TIM6
| is doing the right thing. TIMx_ARR resets to 0ffff, so we can leave it
| alone.

( Run timer7 full bore!)
: timer7-init
   [ 1 5 << #] RCC_APB1ENR set!  ( enable clock to TIM7)
   0 TIM7_PSC !  ( set prescaler)
   1 ( CEN) TIM7_CR1 ! ( start it!) ;

| NOTE: I used this when I was still trying to use the *hardware* SPI
| interface. I gave up on trying to get this to work and wrote some bitbanging
| routines instead. I'm leaving this here because it's an example of using a
| timer to measure some external input - in this case, counting clock edges.
|
| We are going to use the external trigger input, TIM3_ETR, which is AF0 on
| pin PD2.

: timer3-init
   ( Clock to port D.)
   [ 1 #16 4 ( D) + << #] RCC_AHBENR set!

   ( AF0 on PD2.)
   [ %10 2 2* << #] GPIOD_MODER set!  ( 2 bits per pin)

   ( Enable clock to TIM3.)
   [ 1 1 << #] RCC_APB1ENR set!

   ( Trigger on falling edge of ext trigger input.)
   c000 TIM3_SMCR !

   ( Enable timer.)
   1 ( CEN) TIM3_CR1 ! ;

: ttest  ( n)
   TIM7_CNT @  swap us  TIM7_CNT @  swap -  0ffff and ;

| We are going to clock the timer at 1Mhz, and set it up for "one-shot"
| mode. It will stop counting and set the "update" flag when the count
| register reaches the reload value.

: timer-init
   [ 1 4 << #] RCC_APB1ENR set!  ( enable clock to TIM6)
   8 ( OPM - one pulse mode) TIM6_CR1 !
   [ cpuclk #1,000,000 / 1- #] TIM6_PSC !  ( set prescaler)
   1 TIM6_EGR ! ( generate update event)
   timer7-init  timer3-init ;

.then  ( timer-testing)

| The universal version follows.
|
| We are going to clock the timer at 1Mhz, and set it up for "one-shot"
| mode. It will stop counting and set the "update" flag when the count
| register reaches the reload value.

: timer-init
   [ 1 1 << #]  ( enable clock to TIM3)
   | The clock enable register has different names for different chip
   | families!
.ifequ RCC_APB1ENR   RCC_APB1ENR    .then    | F051, F072, F303
.ifequ RCC_APB1LENR  RCC_APB1LENR   .then    | H503/H533
.ifequ RCC_APBENR1   RCC_APBENR1    .then    | C0x1
   set!
   8 ( OPM - one pulse mode) TIM3_CR1 !
   [ cpuclk #1,000,000 / 1- #] TIM3_PSC !  ( set prescaler)
   1 TIM3_EGR ! ( generate update event) ;

meta: us ;
meta: ms   #1000 * ;

meta: delay  ( us)  constant  does> @
   TIM3_ARR !  0 TIM3_SR !  1 ( CEN) TIM3_CR1 set!
   begin  TIM3_SR @  until ;


| -------------------------------------------------------------------------
| Big- and little-endian values
| -------------------------------------------------------------------------
( Little endian.)

( Split a value into its high part and low byte.)
: >hilo  ( v - hi lo)  dup 8 u>>  swap [ 1 8 << 1- #] and ;

( Join a low byte and a high part into a value.)
: lohi>  ( lo hi - v)  8 << or ;

( Big endian.)

( Split a value into its low byte and high part.)
: >lohi  ( v - lo hi)  >hilo  swap ;

( Join a high part and a low byte into a value.)
: hilo>  ( hi lo - v)         swap  lohi> ;


| -------------------------------------------------------------------------
| Bitbanged half-duplex SPI
| -------------------------------------------------------------------------
| I'm giving up - again! - on the STM32's SPI interface. It seems to
| broken, and the design makes it somewhere between difficult and
| impossible to talk to the PIC programming interface, which *shares* a
| single bi-directional data line between master and slave.

| -------------------------------------------------------------------------
| PIC18F programming (standard, J, and K families)
| -------------------------------------------------------------------------
.ifdef pic18f-std

( Load the bitbanged SPI code.)
-d lsb-first
| -d slow-bits  ( Defaults to fast-bits.)
ld target/ARM/stm32/bitbanged-spi-half-duplex.mu4

#100 us delay 100us
   1 ms delay t_enter_prog    | Huge overkill, but so what

| XXX These two values are correct for 1xk50 but are chip-specific and need to
| be passed from host.

1 ms delay t_prog_flash
5 ms delay t_prog_config

| Chip commands:
|   0000  execute core instruction
|   0010  read tablat
|   1000  tblrd*
|   1001  tblrd*+         ( read, post-increment)
|   1010  tblrd*-         ( read, post-decrement)
|   1011  tblrd+*         ( read, pre-increment)
|   1100  tblwr*          ( write)
|   1101  tblwr*+2        ( write, post-increment by 2)
|   1110  tblwrprog*+2    ( write, post-increment by 2, start programming)
|   1111  tblwrprog       ( write, start programming)
|
| Programming protocol. Each "packet" consists of a 4-bit command and
| a 16-bit data payload. The command is sent first, and everything is LSB
| first.

( Send a 4-bit command.)
: cmd  ( cmd)  4 >bits ;

( Send a command followed by a 2-byte payload.)
: cmd+wr  ( lo hi cmd)  cmd  lohi> #16 >bits ;

( Send a command and a dummy byte; read a byte and return it.)
| : cmd+rd  ( cmd - byte)  cmd      #16 bits>  #24 u>> ;
: cmd+rd  ( cmd - byte)  #12 >bits  8 bits>  #24 u>> ;

| NOTE: In all these core instructions the "a" bit is 0, meaning that we're
| using "access mode". This maps 00 to 5f to RAM, and 60 to ff to I/O regs
| f60 to fff.

: core  ( lo hi)  0 cmd+wr ;

( XXX use the same mnemonics as the assembler?  ldi, ld, st, clr?)
: lit   ( byte)         0e    ( movlw)  core ;
: load  ( freg)         50    ( movf)   core ;
: store ( freg)         6e    ( movwf)  core ;
: clear ( freg)         6a    ( clrf)   core ;
: bset  ( freg bit)  2* 80 +  ( bsf)    core ;
: bclr  ( freg bit)  2* 90 +  ( bcf)    core ;
: nop                  0 0              core ;

( XXX all these addresses should be come from the equates!)

( Useful addresses:)
0ff8 equ pu  ( aka TBLPTRU)
0ff7 equ ph  ( aka TBLPTRH)
0ff6 equ pl  ( aka TBLPTRL)
0ff5 equ memdata ( aka TABLAT)

: !p
   >hilo  lit  pl store
   >hilo  lit  ph store
          lit  pu store ;

: p@+  ( - byte)  9 cmd+rd ;


| Entering and exiting programming mode.
|
| The target uses one of two ways to enter program mode: a low-to-high
| transition on a PGM pin, or a bit string that gets clocked in immediately
| after MCLR goes low.

.ifdef uses-pgm-pin

| Exit programming mode.
: -prog
   0 GPIOB_ODR !  100us  reset/ ;

| Enter programming mode.
: +prog
   0 GPIOB_ODR !  100us  pgm/  100us  ; | reset/  100us ;

.then  ( def uses-pgm)

.ifdef uses-mchp-key

| NOTE: Unlike the PIC18-Q parts, for which MCLR is *low* during
| programming, on older parts MCLR is *high* during programming, and must
| be brough low and then high again to exit programming!

| Exit programming mode.
: -prog  reset\  t_enter_prog  reset/  t_enter_prog ;

| The string "MCHP" is the initialization bit string that must be clocked
| into the target, MSB first. Since we do everything else LSB first, we
| bit-reverse the string before sending it to the target.

{
: bitrev  ( bits #bits - bits')
   0 swap for  swap  dup u2/ swap 1 and  rot 2* +  next  nip ;
}

| Enter programming mode.
: +prog
   reset\  t_enter_prog
   [ token MCHP drop bew@  #32 bitrev #] #32 >bits
   t_enter_prog  reset/ ;

.then  ( def uses-mchp)

: rr
   clock-init  led-init  flash-leds  timer-init  spi-init ;

: tt  ( - revision device-id)
   rr  +prog  30_0000 !p p@+ p@+  3f_fffe !p  p@+ p@+ lohi> ;

.then  ( def pic18f-std)


.ifdef pic18f-q
| -------------------------------------------------------------------------
| PIC18F-Q programming
| -------------------------------------------------------------------------
.ifdef pic18f-q

( Load the bitbanged SPI code.)
| -d slow-bits  ( Defaults to msb-first and fast-bits.)
ld target/ARM/stm32/bitbanged-spi-half-duplex.mu4

  1 ms delay t_enter_prog
  1 us delay t_dly  ( nominally 1us)
#11 ms delay t_erase  ( bulk or page erase)
#11 ms delay t_prog_eeprom_config  ( presumably because it includes erase)
#75 us delay t_prog_flash

( Send a command; delay.)
: cmd  ( cmd)  #24 <<  8 >bits  t_dly ;

( Send a command followed by a payload.)
: cmd+wr  ( payload cmd)    cmd  9 <<  #24 >bits ;

( Send a command; recv a 24-bit payload containing 16 bits.)
: cmd+rd  ( cmd - payload)  cmd        #24 bits>  u2/ 0ffff and ;

( XXX Better names for these? The p suggests PIC and PC. And page erase.)
: bulk-erase ( bits)
                  18 cmd+wr  t_erase ; ( bits: 0 eeprom, 1 flash, 2 user-id, 3 config)
: !p    ( a)      80 cmd+wr  t_dly ;
: p+             0f8 cmd     t_dly ;  ( increment address)
: p@    ( - u)   0fc cmd+rd  t_dly ;  ( read without incrementing)
: p@+   ( - u)   0fe cmd+rd  t_dly ;  ( read and increment)
: p!+   ( w)     0e0 cmd+wr  t_prog_flash ;
: ee!+  ( b)     0e0 cmd+wr  t_prog_eeprom_config ;
: perase         0f0 cmd     t_erase ;  ( page from high bits of PC)

: set-addr  addr @ !p ;

:  setup  ( - data #bytes)  set-addr  data  count @ ;
: wsetup  ( - data #words)  setup  1+ 2/ ;

| Read page size out of device config info area of chip! Save it in count
| so host can read it too.

: get-page-size
   3c_0000 !p  p@+ ( words/page) 2*  count ! ;

| Exit programming mode.
: -prog  reset/  t_enter_prog ;

| The string "MCHP" is the initialization bit string that must be clocked
| into the target, MSB first. All PIC18-Q chips use this method.

| Enter programming mode.
: +prog
   -prog  ( first exit any previous session)
   reset\  t_enter_prog  [ token MCHP drop bew@ #] #32 >bits  t_enter_prog
   get-page-size ;

: read-flash  wsetup  for  p@+ >hilo  rot c!+ c!+  next  drop ;
: read-ee      setup  for  p@+       swap c!+      next  drop ;

( Only write config/ee space if bytes *differ*.)
: ?ee!+  ( b)  p@ over xor if  ( differ)  ee!+ ^  then  drop p+ ;

: erase-page  set-addr perase ;

: prog-flash  wsetup  for  c@+ c@+ -rot  lohi> p!+  next  drop ;
: prog-ee      setup  for  c@+ swap          ?ee!+  next  drop ;

( NOTE: device-id and revision are *word-sized* values.)
: tt  ( - revision device-id)  timer-init  spi-init  +prog
   3f_fffc !p  p@+ p@+ ;

| Use this to test the *read size* of each region. Config and EEPROM space
| return bytes; everything else, words.

: rr  ( - w w w b b w)  ( read some more values)
         0 !p  p@+  ( flash - words)
   20_0000 !p  p@+  ( user-id - words)
   2c_0000 !p  p@+  ( device information area: unique id and calibration - words)
   30_0000 !p  p@+  ( config - bytes)
   38_0000 !p  p@+  ( eeprom - bytes)
   3c_0000 !p  p@+  ( device configuration info - words) ;

( More detailed info from two read-only regions.)
: dia  ( device information area - words)
   2c_0000 !p  p@+ p@+ p@+ ;

: dci  ( device configuration info - words)
   3c_0000 !p  p@+ p@+ p@+ p@+ p@+ ;

.then ( pic18f-q)


| -------------------------------------------------------------------------
| PIC16F145x programming
| -------------------------------------------------------------------------
.ifdef pic16f145x

( Load the bitbanged SPI code.)
-d lsb-first
( Defaults to fast-bits.)
ld target/ARM/stm32/bitbanged-spi-half-duplex.mu4

    1 ms delay t_enter_prog
    1 us delay t_dly  ( nominally 1us)
    5 ms delay t_erase_bulk
#2500 us delay t_erase_page  ( Microchip calls this "row" erase)
    5 ms delay t_prog_config  ( time to erase and program a single config word)
#2500 us delay t_prog_flash  ( time to program 32 words (1 row/page)

: -prog  reset/  t_enter_prog ;

| The string "MCHP" is the initialization bit string that must be clocked
| into the target, LSB first. Everything else is LSB first as well, unlike
| the PIC18F-Q.

: +prog
   -prog
   reset\  t_enter_prog  [ token MCHP drop bew@ #] #33 >bits  t_enter_prog ;

| On the 16F145x, commands are 6 bits and the payload is 16 bits: 14 bits
| of data, plus a start and stop bit.

( Combine a command and payload; send the command; delay.)
: cmd+payload  ( payload cmd - payload')  swap 7 << +  6 >bits  t_dly ;

( Send a bare command with no payload; delay.)
: cmd     ( cmd)  0 swap cmd+payload drop ;

( Send a command; delay; send a payload.)
: cmd+wr  ( payload cmd)  cmd+payload  #16 >bits  drop ;

( Send a command; delay; recv a payload.)
: cmd+rd  ( cmd - payload)  cmd  #16 bits>  #17 u>>  03fff and ;

| A few notes on these programming commands.
|
| config! loads a word into the configuration latch and sets the address to
| 8000. Config words are programmed singly; prog (followed by a delay of
| t_prog_config) will erase and program a *single* configuration word.
|
| The address to program is set by executing p+ the requisite number of times.
|
| In order to program the flash, first the address needs to be set to 0000
| with p-reset. p+ can be used to increment to the desired address.
|
| p! loads a word into a program memory latch; there are 32 such latches.
| It's important to start loading them when the address is on a row (page)
| boundary. It's also important *not* to increment the address after
| loading the last latch; the row to program (or erase) is taken from the
| high bits of the address.
|
| When programming flash (less than 8000) addresses, prog (followed by
| a delay of t_prog_flash) will program into the flash the values loaded
| into the latches.
|
| An unanswered question: if programming fewer than 32 latches, do the
| contents default to 3fff (the "words" are 14 bits)? Or are the "leftover"
| values used, in which case *all* latches should be loaded, even at the
| end of the last row? Experiment to test this?
|
| When incrementing addresses, they wrap within a 32 Ki range: 7fff wraps
| to 0000; ffff wraps to 8000.
|
| The behavior of bulk erase depends on the current address. If less than
| 8000, program memory and config words are erased; user id words are left
| alone. If 8000 or above, all three are erased.
|
| If row erase is executed with the address 8000 or above, the user id
| locations are erased.

: config!  ( w)  00 cmd+wr  t_dly ;  ( load configuration latch; set addr to 8000)
: p!       ( w)  02 cmd+wr  t_dly ;  ( load program memory latch)
: p@     ( - w)  04 cmd+rd  t_dly ;  ( read program/config memory)
: p+             06 cmd     t_dly ;  ( increment address)
: p-reset        16 cmd     t_dly ;  ( reset address to 0000)

| prog must be followed by the correct delay - for flash or config.
: prog           08 cmd ;            ( begin internally timed programming)
: bulk-erase     09 cmd     t_erase_bulk ;
: row-erase      11 cmd     t_erase_row ;

: tt  timer-init  spi-init  +prog
   ( Read device id and revision and few other things.)
   0 config!  p+ p+ p+ p+  7 for  p@ p+  next ;

.then ( pic16f145x)

.ifdef with-uart

| I'm making this conditional because the code needs to modified to be made
| more generic. Probably each family or chip needs to implement a version
| of uart-init.

| -------------------------------------------------------------------------
| Serial communication - UART
| -------------------------------------------------------------------------
: uart-init
   | >>> BEGIN chip-specific bits
   | First, enable clocks to Port A. We are using uart1 on pins PA9 and PA10.
   [ 1 #16 1 ( A) + << #] RCC_AHBENR set!

   | Enable clocks to uart1 as well.
   [ 1 #14 << #] RCC_APB2ENR set!

   | Set mode bits (%10) and alternate function (AF1) for uart.
   [ %1010 #9       2*  << #] GPIOA_MODER set!  ( 2 bits per pin)
   [    11 #9  8 -  4 * << #] GPIOA_AFRH set!   ( 4 bits per pin)
   | >>> END chip-specific bits

   | Now for the uart itself.
   USART1_CR1  0 over ! ( reset and disable USART)
   %1100 ( TE+RE) ( enable tx and rx)  over set!
   [ cpuclk #115,200 / #] USART1_BRR !
   1 ( UE) ( enable USART)  swap set! ;

: ?uart-status  ( bit)
   begin  USART1_ISR @  over and  until  drop ;

: uart-recv  ( - b)   [ 1 #5 << ( RXNE bit) #] ?uart-status  USART1_RDR @ ;
: uart-send  ( b)     [ 1 #7 << ( TXE bit)  #] ?uart-status  USART1_TDR ! ;

: uart-send-recv
   data  out-count h@ for  c@+ swap  uart-send  next  drop
   data   in-count h@ for  uart-recv  swap c!+  next  drop ;

.else

| Dummy routines so the init code and command jump table compile.
: uart-init ;
: uart-send-recv ;

.then    | def with-uart


| -------------------------------------------------------------------------
| Jump tables
| -------------------------------------------------------------------------
: (dispatch)  ( index)
   1+ cells r@ +
   dup r@ @ u< if  r> drop  @execute ^  then
   drop  r> @ >r  ( skip jump table and keep executing) ;

compiler: [:  ( start a jump table)
   \t (dispatch) ,  here  0 , ( ip past last cfa) ;

compiler: :]  ( end a jump table)
   here  swap  image-! ;


| -------------------------------------------------------------------------
| Core command processing loop
| -------------------------------------------------------------------------
( Command index is above the word that it executes.)
: do-command  ( n)  10 -  [:
 ( 10     11     12 )
   +prog  -prog  uart-send-recv

 ( 13          14       15          16          17)
   read-flash  read-ee  erase-page  prog-flash  prog-ee
   :] ;

here ]  ( chip-init)
   clock-init  led-init  timer-init  spi-init  uart-init  flash-leds
   reset/
   begin
      face_d000 semaphore !  ( ready for another command)
      0  begin  drop  semaphore @  dup ffff_ff00 and  deca_f000 =  until
      0ff and  ( command byte)  do-command
   again [

| Startup code! Since we have a Forth kernel, let's write the startup code
| in Forth!

label startup
.ifdef in-ram
   cpsid  ( disable interrupts)
   ( Ignore the sp we were passed. Set rp and sp to end of RAM.)
   @ram #ram + rp lit   rp sp mov
.else
   Reset_exc handler
   ( Use SP from reset vector. It should point to the end of RAM.)
   sp rp mov
.then
   #64 cells sp sp sub  ( RP at end of RAM; SP below)
   ( chip-init)  ip  lit
   deca_fbad     top lit
   next  ;c
   pool,

.ifndef in-ram

HardFault_exc handler
   here b  ;c  ( hang)

NMI_exc handler
default-handler
   lr bx  ;c  ( return to sender!!)

.then  ( not in-ram)


| XXX The following is for interactive testing and needs to go away
| eventually.

.ifdef testing

: index  ( offset)
   100 0 do  i over +  i data + c!  loop  drop ;

: wipe
   100 0 do  0ff  i data + c!  loop ;

.then  ( testing (interactive)
