| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

( Moved F051 init code here, so it can be shared among projects.)

loading STM32F051x8 basic init

__meta
hex

( NOTES about the F051-Discovery board.)

| LEDs are attached to PC8 and PC9.
|
| Port  Led   Color
| ~~~~~~~~~~~~~~~~~~
| PC8   LD4   blue
| PC9   LD3   green

ld target/ARM/stm32/clock.mu4    ( clock utility words)

| Since we might be running this code from RAM, we need to assume that the
| clock might already be set up with the PLL running. Since we can't change
| any PLL settings while the PLL is running, we need to switch the system
| clock back to the HSE; turn off, reconfigure, and turn on the PLL; and then
| switch the system clock back to the PLL.

| NOTE: This example assumes that you are using an STM32F0 Discovery board.
| On that platform, the ST-LINK drives a clock signal to the F051 that we
| can use. If you have an external crystal instead, change the first line
| of clock-init to read:
|
|    +hse
|
| instead of
|
|    +hse-bypass


| Turn on HSE, which is driven by an 8 Mhz signal from the ST-LINK. Use it
| to drive the PLL to 48 Mhz - x6 - and when the PLL stabilizes, switch to
| it as the system clock source.

: clock-init
   +hse-bypass  ( turn on HSE without crystal osc; wait until it starts)
   >hse  ( switch to HSE as sysclk)
   -pll  ( turn off PLL)
   0011_0000 RCC_CFGR ! ( PLLMUL=6; PLLSRC=HSE)
   +pll  ( turn PLL back on)
   1 ( latency) FLASH_ACR set!  ( we need one cycle for 48 MHz clock!)
   >pll  ( switch to PLL as sysclk source) ;

ld target/ARM/stm32/f0/gpio.mu4

: led-init
   | Turn on clock to Port C
   ( Ports -FE_DCBA )
           %00_0100 enable-gpio
   | Make PC8 and PC9 outputs
   [ %0101 #16 << #] GPIOC_MODER set! ;

: wait   for next ;
: flash-leds   %11_0000_0000 dup GPIOC_BSRR !  2_0000 wait  GPIOC_BRR ! ;
