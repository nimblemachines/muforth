( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

( Moved F303 init code here, so it can be shared among projects.)

__meta
hex

ld target/ARM/stm32/clock.mu4    ( clock utility words)

( Since we might be running this code from RAM, we need to assume that the
| clock might already be set up with the PLL running. Since we can't change
| any PLL settings while the PLL is running, we need to switch the system
| clock back to the HSE; turn off, reconfigure, and turn on the PLL; and then
| switch the system clock back to the PLL.)

( NOTE: This example assumes that you are using an STM32F3 Discovery board.
| On that platform, the ST-LINK drives a clock signal to the F303 that we
| can use. If you have an external crystal instead, change the first line
| of clock-init to read:
|
|    +hse
|
| instead of
|
|    +hse-bypass
)

( Turn on HSE, which is driven by an 8 Mhz signal from the ST-LINK. Use it
| to drive the PLL to 48 or 72 Mhz - x6 or x9 - and when the PLL
| stabilizes, switch to it as the system clock source.)

: clock-init
   +hse-bypass  ( turn on HSE without crystal osc; wait until it starts)
   >hse  ( switch to HSE as sysclk)
   7 FLASH_ACR clr!  ( reset flash latency settings)
   -pll  ( turn off PLL)

.ifdef cpuclk-48m  ( for compatibility with F051 and F072)
   0051_0400 RCC_CFGR ! ( USBPRE=/1; PLLMUL=6; PLLSRC=HSE; APB1=/2)
   1 ( latency) FLASH_ACR set!  ( we need one cycle for 48 MHz clock!)
.else
   001d_0400 RCC_CFGR ! ( USBPRE=/1.5; PLLMUL=9; PLLSRC=HSE; APB1=/2)
   2 ( latency) FLASH_ACR set!  ( we need two cycles for 72 MHz clock!)
.then

   +pll  ( turn PLL back on)
   >pll  ( switch to PLL as sysclk source) ;

: led-init
   -- Turn on clock to Port E
   ( Ports GFED_CBAH )
        [ %0010_0000  #16 << #] RCC_AHBENR set!
   -- Make PE8 to PE15 outputs
   5555_0000 GPIOE_MODER set! ;

: wait   for next ;
: flash-leds
   0000_ff00 dup GPIOE_BSRR !  3_0000 wait  GPIOE_BRR ! ;
