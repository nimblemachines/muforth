| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading STM32H5 clock (48M or 96M, using PLL1)

__meta
hex

ld target/ARM/stm32/h5/clock.mu4    ( clock utility words)

| Let's run the chip @ 96M. We need to set up PLL1 for this. The P output
| is the chip clock and the AHB/APB bus clock; the Q output is for some
| other peripherals and should be 48M.

: clock-init
   +hse  ( turn on HSE oscillator)

[ here within-ram? ] .if
   >hse  1 -pll
.then

   0003_0c23 RCC_PLL1CFGR !   | PEN; QEN; M=12; VCO med range; 1-2M; src=HSE

.ifdef cpuclk-48m  ( for compatibility with F051 and F072)
   | Run cpuclk at 48M.
   | VCO = 24 / M * N = 384
   | P = 384 / 8 = 48
   | Q = 384 / 8 = 48
   0007_0ebf RCC_PLL1DIVR !   | R=/1; Q=/8; P=/8; N=192
   112 FLASH_ACR !            | prefetch on; WRHIGHFREQ=1; LATENCY=2
.else
   | Run cpuclk at 96M.
   | VCO = 24 / M * N = 384
   | P = 384 / 4 = 96
   | Q = 384 / 8 = 48
   0007_06bf RCC_PLL1DIVR !   | R=/1; Q=/8; P=/4; N=192
   124 FLASH_ACR !            | prefetch on; WRHIGHFREQ=2; LATENCY=4
.then

   1 +pll  ( turn on PLL1)
   >pll1 ;
