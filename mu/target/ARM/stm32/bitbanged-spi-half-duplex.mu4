| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading STM32 Bitbanged SPI

| This is currently for programming Microchip PIC16 and PIC18 processors,
| which use a *shared* bi-directional data line instead of separate MOSI
| and MISO. They also tend use a CPOL=0, CPHA=1 style: clock idles low, but
| data is clocked in on the *falling* (second) edge of the clock.
|
| I should probably disentangle the clock and data settings and make the
| code generic, so it can be used for AVR and 8051 devices as well, which
| *do* use separate MOSI and MISO, and clock data on the *rising* edge.

hex
__meta

| -------------------------------------------------------------------------
| Bitbanged half-duplex SPI
| -------------------------------------------------------------------------
| I'm giving up on the STM32's SPI interface. It seems to be broken, and
| the design makes it somewhere between difficult and impossible to talk to
| the PIC programming interface, which *shares* a single bi-directional data
| line between master and slave.
|
| I'm going to use PB3 as clock, PB4 as the bi-directional data, PB5 as the
| active-low reset output (MCLR), and PB6 for PGM (necessary for some older
| PICs).

: spi-init
   | Turn on clock to port B.
   ( Ports DCBA )
        [ %0010 #] enable-gpio

   | Clear port B. Clock idles low; target will be reset.
   0 GPIOB_ODR !

   | Set PB3 through PB6 to output; PB4 will toggle between input and output.
   | Mode %00 is input; %01 is output.
   [ %01_0101_01  3 2* << #] GPIOB_MODER !  ( 2 bits per pin)

   | Our max toggle rate is going to be around 5Mhz, so set output speed to
   | medium.
   [ %01_0101_01  3 2* << #] GPIOB_OSPEEDR !  ( 2 bits per pin)

   | Let's pull up PB4 so that if the slave isn't driving it we will read
   | one bits.
   | [ %01  4 2* << #] GPIOB_PUPDR !  ( 2 bits per pin) ;

   | Actually, let's try pulling PB4 *down* instead. It might help with
   | some of the quirks of the older PIC18 devices.
   [ %10  4 2* << #] GPIOB_PUPDR !  ( 2 bits per pin) ;

| Oddly enough, the F4 family chips lack a GPIOx_BRR register! Since the
| BSRR can be used to set and reset bits (hence the name), let's use that
| one register universally. We'll be doing halfword writes to the low half
| to *set* bits, and to the high half to *reset* them.
|
| Let's make equates to make this clearer.

GPIOB_BSRR      equ GPIOB_SET
GPIOB_BSRR 2 +  equ GPIOB_CLR

: bit/  ( bit)  GPIOB_SET h! ;
: bit\  ( bit)  GPIOB_CLR h! ;

( Clock on PB3.)
: clk/   [ 1 3 << #] bit/ ;
: clk\   [ 1 3 << #] bit\ ;

( Data on PB4.)
: data/   [ 1 4 << #] bit/ ;
: data\   [ 1 4 << #] bit\ ;

( Reset - aka /MCLR on the PIC - on PB5.)
: reset/  ( de-assert reset)   [ 1 5 << #] bit/ ;
: reset\  ( assert reset)      [ 1 5 << #] bit\ ;

( PGM on PB6.)
: pgm/  [ 1 6 << #] bit/ ;
: pgm\  [ 1 6 << #] bit\ ;

| First, let's define the "reference" implementations, in Forth. These will
| be somewhat slow. I haven't measured, but I think they toggle at around
| 250kHz.

.ifdef slow-bits

( Set the direction for PB4.)
: pb4-out   [ %01 4 2* << #] GPIOB_MODER set! ;
: pb4-in    [ %11 4 2* << #] GPIOB_MODER clr! ;

| Older PICs used an LSB-first protocol; newer ones use MSB-first, to be
| more SPI-compatible. We define both styles.

( Read bit on PB4.)
: bit@   ( bits - bits')
   clk/
.ifdef lsb-first
   u2/  GPIOB_IDR @  10 and  [ #31 4 - #] <<    | shift right, sample pin and shift to msb
.else  ( msb-first, the default)
   2*   GPIOB_IDR @  10 and        4      >>    | shift left, sample pin and shift to lsb
.then
   clk\  + ;

( Amusing note: The standard Forth-style pronunciation of bit! is "bit bang". ;-)

( Drive bit on PB4.)
: bit!   ( bits - bits')
   dup clk/
.ifdef lsb-first
   1 and if  data/  else  data\  then  u2/   | sample low bit, drive, shift right
.else  ( msb-first, the default)
      0< if  data/  else  data\  then  2*    | sample high bit, drive, shift left
.then
   clk\ ;

( Read some bits.)
: bits>   ( count - bits)   pb4-in  0  swap for  bit@  next  pb4-out ;

( Write some bits.)
: >bits   ( bits count)                     for  bit!  next  drop ;

.else  ( fast-bits, the default)

| Next, the high-performance versions of >bits and bits>. These are capable
| of toggling at just over 5Mhz. I had to put in some no-ops to slow them
| down a bit.

| Macros for timing.
|
| The processor doing the bitbanging must be run at 48M; however, even at
| that speed, the code is almost too fast for a PIC18. I think the problem
| is less the *frequency* than the setup times (for writes) and access
| times (for reads) being long enough.
|
| I originally wrote and tested the bitbanging code on F0 and F3 devices:
| the F051, F072, and F303, in particular (because there are Discovery
| boards available for all three.)
|
| I assumed that an unconditional forward branch would take three cycles.
|
| However, I got erroneous results with a C071 and an H533. The C071 is an
| expected result: this is a Cortex-M0+ device with 2-cycle branches. The
| H533 is a Cortex-M33; what is the story there? The processor reference
| manual doesn't have cycle counts for the instructions, but I'm assuming
| that it manages to do the forward branch in 2 cycles.
|
| I have modified the macros accordingly! And while I was at it,
| I specifically made a no-op (nop-branch) that takes the same time as
| a branch (because it is one!) in order to balance the arms of the
| conditional which decides whether to write a one or a zero bit.

| nop3        delays for three cycles
| nop-branch  delays for the same time as a branch, for balance
|
| Cortex-M0+ and Cortex-M33 both have 2-cycle branches, so be careful when
| trying to create a 3-cycle no-op.

{
assembler

: nop-branch   \m here 2 + \a again ;  ( jump to following instruction)
: nop3
   \a nop-branch     | 2 or 3 cycles, depending on processor
.def stm32c0  .def stm32h5  .or .if  ( processors with 2-cycle branches)
   \a nop            | add another cycle, to make it 3
.then ;

forth
}

( Send bits down the wire - "to bits".)
code >bits  ( bits count)
   w dpop1  GPIOB_MODER >iobase x lit
   1 3 << y movs  ( PB3: clock)
   1 4 << z movs  ( PB4: data)
   begin
.ifdef lsb-first
      1 w w lsrs  ( shift right; low bit -> carry)
.else  ( msb-first, the default)
      1 w w lsls  ( shift left; high bit -> carry)
.then
      GPIOB_SET >io x y strh  ( clock high)
      cs if  GPIOB_SET >io x z strh  else  GPIOB_CLR >io x z strh  nop-branch  then  ( drive bit)
      nop3  ( lengthen setup time)
      GPIOB_CLR >io x y strh  ( clock low)
   1 top top subs  0= until
   top dpop1  next  ;c

( Receive bits from the wire - "bits from".)
code bits>  ( count - bits)
   0 w movs  GPIOB_MODER >iobase x lit
   %11 z movs  4 2* z z lsls
   GPIOB_MODER >io x y ldr  z y y bics  GPIOB_MODER >io x y str  ( pb4 input)
   1 3 << y movs  ( PB3: clock)
   begin
      GPIOB_SET >io x y strh  ( clock high)
.ifdef lsb-first
      1 w w lsrs  ( shift right)  nop3 ( wait for output to propagate)
      GPIOB_IDR >io x z ldr
      4 z z lsrs  #31 z z lsls ( bit4 -> bit31; other bits 0)
.else  ( msb-first, the default)
      1 w w lsls ( shift left)  nop3 ( wait for output to propagate)
      GPIOB_IDR >io x z ldr
      #27 z z lsls  #31 z z lsrs ( bit4 -> bit0; other bits 0)
.then
      GPIOB_CLR >io x y strh  ( clock low)
      z w w adds  ( add in new bit)
   1 top top subs  0= until
   %01 z movs  4 2* z z lsls
   GPIOB_MODER >io x y ldr  z y y orrs  GPIOB_MODER >io x y str  ( pb4 output)
   w top mov  next  ;c  pool,

.then  ( fast-bits)
