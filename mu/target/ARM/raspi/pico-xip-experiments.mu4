( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading Pico XIP experiments

( Bit-banging the SPI flash chip via the RP2040's SIO - single-cycle i/o -
| port is nifty and all, but we really want to be able to do
| execute-in-place - XIP.
|
| Getting XIP to work with the Pico's Winbond W25Q16JV is the focus here.
|
| How do we turn XIP mode on and off? The RP2040 datasheet contradicts itself.
|
| On p596 it says, "XIP mode is enabled in DW_apb_ssi when the XIP cache is
| enabled."
|
| But on p124 it says, "If the cache is disabled, via the CTRL.EN register
| bit, then all four of the XIP aliases [0x10 to 0x13] will bypass the cache,
| and access the flash directly. This has a significant impact on XIP code
| execution performance."
|
| These can't both be true! Which one is it?!?)

__meta
hex

: xip-fast-clock   2 XIP_SSI_BAUDR !   ( /2 clock) ;
: xip-slow-clock   4 XIP_SSI_BAUDR !   ( /4 clock) ;

( Flush and enable the XIP flash cache.)
: xip-cache-flush
   XIP_CTRL_FLUSH  1 over !  @ drop ( @ completes after flush) ;

: xip-cache-enable
   1 XIP_CTRL_CTRL set!  ( enable XIP cache; this enables XIP) ;

: xip-enable   ( spi-ctrlr0 ctrlr0)
   0 XIP_SSI_SSIENR !  ( disable during config)
   XIP_SSI_CTRLR0 !
   XIP_SSI_SPI_CTRLR0 !
   0 ( num data frames - 1)  XIP_SSI_CTRLR1 !  ( read one 32-bit word)
   1 XIP_SSI_SSIENR !  ( re-enable)
   xip-cache-flush  xip-cache-enable ;

( We try three versions of XIP:
|
| [1] the simplest and slowest XIP setup: using the traditional SPI read
| command 03. This only uses the SO and SI pins - everything is clocked in or
| out one bit at a time.
|
| [2] fast read quad output: command and address are clocked in bitwise;
| data is clocked out 4 bits at a time.
|
| [3] fast read quad i/o: command is bitwise; address and data are 4 bits
| at a time.
|
| Sadly, because of the broken design of the XIP peripheral, it's
| impossible to get FRQIO to work. We are going to stick with FRQO for now.)

           ( frf trans-type wait-cycles addr-nybs read-cmd)
: basic-read     [ 0  0  0  6  03  >xip-regs, ]  xip-enable ;
: quad-o-read    [ 2  0  8  6  6b  >xip-regs, ]  xip-enable ;  ( FRQO: fast read quad output)
( quad-io-read   [ 2  1  6  6  eb  >xip-regs, ]  xip-enable ;  ( FRQIO: fast read quad i/o)


( tt - short for test - is basically our stage2. ;-)
: tt  qspi->xip  xip-cache-flush  xip-fast-clock  quad-o-read ;
: rd  1300_0020 @+ @+ @  1000_0040 @+ @+ @ ;
