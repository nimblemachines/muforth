( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading RP2040 QSPI/XIP utility words

decimal

( Handy host word to help calculate the complicated register settings we
| need for XIP_SSI_CTRLR0 and XIP_SSI_SPI_CTRLR0. It both calculates the
| two register values and creates target literals to push them at run time.)

( FRF can take the following values:
|   0 - normal SPI mode
|   1 - dual i/o mode
|   2 - quad i/o mode
|
| TRANS_TYPE can take the following values:
|   0 - command and address in SPI format
|   1 - command in SPI format, address in FRF
|   2 - command and address both in FRF
)

: >xip-regs  ( frf trans-type wait-cycles addr-nybs read-cmd - spi-ctrlr0 ctrlr0)
   ( read-cmd)    24 <<  ( XIP_CMD)  >r  swap
   ( wait-cycs)   11 <<  ( WAIT_CYCLES)
   [ 2             8 <<  ( INST_L: # of nybbles) #] +  >r
   ( addr-nybs)    2 <<  ( ADDR_L: # of nybbles)
   ( trans-type)  +  r> +  r> +  ( => spi-ctrlr0)  swap

   ( frf)         21 <<  ( SPI_FRF)
   [ 31 ( bits)   16 <<  ( DFS_32)
   3 ( eeprom rd)  8 <<  ( TMOD) + #] +  ( => ctrlr0) ;

: >xip-regs,   >xip-regs  swap  \m literal  \m literal ;

__meta

: 2drop  drop drop ;

( To show what the QSPI pins are connected to.)
: qspi-function@  ( sclk cs io0 io1 io2 io3)
   IO_QSPI_GPIO_QSPI_SCLK_CTRL  6 for  @+ cell+  next  drop ;

: qspi-function!  ( gpio-function)
   IO_QSPI_GPIO_QSPI_SCLK_CTRL  6 for  2dup !  8 +  next  2drop ;

( Connect QSPI pins to SIO rather than XIP.)
: qspi->sio   5 ( SIO function) qspi-function! ;

( Connect QSPI pins back to XIP.)
: qspi->xip   0 ( XIP function) qspi-function! ;
