( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading ARM kernel

( 2010-feb-03 - Heavily modified! and changed to DTC.)
( 2006-apr-01.)

( NOTE: Search for UNDEF to find as-yet undefined words;
                   PATCH to find words that need patching by metacompiler;
                   XXX   to find notes or questions as-yet unresolved)

__meta  ( fire up the metacompiler!!)

assembler hex

( Register usage.)
comment moved-from-assembler
 09 constant top ( t)  ( data stack top)
 0a constant ct  ( c)  ( for loop count reg)
 0b constant up  ( u)  ( user pointer; for multitasking!)
 0c constant sp  ( s)  ( data stack pointer)
 0d constant rp  ( r)  ( return stack pointer)
moved-from-assembler

( XXX how to tell the disassembler about our register choices?)
7 constant count  ( for for/next loops)
6 constant top
5 constant rp
4 constant ip

decimal

macro: push  ( r)  4 sp -) !  swap  str  ;
macro: pop   ( r)  4 sp )+    swap  ldr  ;

macro: nest    ( r)  4 rp -) !  swap  str  ;
macro: unnest  ( r)  4 rp )+    swap  ldr  ;

( top is considered st0)
macro: st1   0 sp +)  ;  ( address the second item on the stack)
macro: st2   4 sp +)  ;  ( address the third item on the stack)
macro: st3   8 sp +)  ;  ( address the fourth item on the stack)

macro: next  4 ip )+ pc ldr  ;
macro: panic  1 pc +) pc ldr  ;

( capture compiles a branch-and-link -over- the following cell; it captures
  the address of the following cell in lr)
macro: capture   here [ 2 cells #] +  bl  ;

( lr@ loads the cell at lr into a reg)
macro: lr@  ( reg)   0 lr +)  swap ( reg)  ldr  ;

macro: load-relocated  ( lit reg)   capture   swap  a, ( lit)   lr@  ;
macro: load-literal    ( lit reg)   capture   swap  ,  ( lit)   lr@  ;

macro: blr ( reg)  ( bl thru a register)
     pc lr mov  ( capture return address - beyond following instruction)
     ( reg) pc mov  ( jump via reg)  ;

( Useful macro for the "prologue" of parent does> words: saves the lr to a
  register, since the child will be doing a bl to the parent, and we don't
  want to clobber the value in lr, which is a pointer to the child's data.)

meta

macro: save-lr  lr r0 mov  ;

( Macros for C calling convention. call does all the work. We have to \
  prefix the if/then's to get the host .compiler. versions, and \f prefix
  several words to make sure we're getting the Forth word, and not the
  assembler one.)

assembler

macro: pops  =if  \f 0<  if  top push   ^  then
                             top pop    ^  then  \f drop ;

macro: takes  ( #input - #pops-performed)
   =if  1- =if  ( 2 params)  top r1 mov   r0 pop  ( 1)  ^  then
                ( 1 param)   top r0 mov           ( 0)  ^  then
   ( 0) ;

macro: leaves  ( #output)   if  r0 top mov  then ;

macro: call ( in out)  2dup - \f push ( #pops needed)
   swap takes  ( popped)  r3 blr  \f pop  swap - ( #pops left to do)
   pops  leaves ;


===========================================================================
Start of meta-compiled kernel
===========================================================================

target  ( compile into target vocab)

===========================================================================
Kernel header

These fields are at fixed offsets and shall not be moved or mucked with, on
pain of death!
===========================================================================

1 , ( Kernel/C API interface structure version)

( The following addresses will be patched after the kernel is loaded.

  ip0      is the address of the first FORTH word to execute.
  cold     points to code which fires up the inner interpreter - the Forth
           VM execution machinery.
  rp0      is the initial value for rp - the return stack pointer
  sp0      is the initial value for sp - the data stack pointer
  h0       is the initial heap - "here" - pointer. It is patched to point
           just after the body of the last word defined in the kernel.)

label 'cold  0 a,
label 'ip0  0 a,
label 'rp0  4 Ki ,
label 'h0  0 a,
label 'sp0  0 ,

label exit-context
0 ,   ( r0 -- caller's set jmp context address)
0 ,   ( pc -- caller's long jmp routine address)

label 'type     0 ,  -- pointer to C function: void type(char *s, int n)

( Not implemented yet)
label '?key     0 ,  -- ptr to C: cell_t qkey(void)
label 'key      0 ,  -- ptr to C: cell_t key(void)
label 'readline 0 ,  -- ptr to C: cell_t readline(buffer, len)
label 'getfile  0 ,  -- ptr to C: ??? getfile(???)
label 'sync-caches   0 , -- ptr to C: void sync_caches(ptr)


===========================================================================
End of kernel header, start of real kernel
===========================================================================

===========================================================================
Meta-compiler's version of defining words.

It makes sense to start with the meta-defining words so we can build
interesting things other than just code words.

We'll be defining the target-resident versions later in the kernel, which
is why we define labels here for dovar, doconst, docolon, and dodoes. We
patch their values into the target-resident defining words when we define
them.
===========================================================================

meta: create    new     ;code  label dovar
                               top push   lr top mov        next  ;c

meta: constant  new  ,  ;code  label doconst
                               top push   0 lr +) top ldr   next  ;c

meta: variable   create       cell      allot ;
meta: 2variable  create   [ 2 cells #]  allot ;

meta: :         new   __target-colon
                        ;code  label docolon
                               ip nest   lr ip mov   next  ;c

meta: <dodoes>  save-lr  code,
                        ;code  label dodoes
                               ip nest   lr ip mov
                               top push  r0 top mov   next  ;c

compiler: does>   <;code>  <dodoes>  __target-colon ;

( Explanation of dodoes: child word executes bl to parent; lr points to
  child's data; parent saves lr in r0; executes bl to dodoes; lr points to
  list of forth words to execute.)


===========================================================================
Words to talk to the C environment.
===========================================================================

( cold puts h0 into top; warm will later store it into h. The C caller puts
  the address of the kernel header into r0. An ldm loads the header into
  several registers as follows:

  version  cold  ip0   rp0   h0   sp0     -- defined in header in order
       r0   r1   ip    rp    top  sp      -- loaded by ldm in order
)

here "0decafbad ,  ( "sentinel" top - empty stack - value)

code cold
    { r1 r2 ( throw-away ) ip rp top sp } r0 ldm
    ( decafbad) pc) r3 ldr   r3 push   next  ;c

code bye
   ( 0   if        1         then   >r1       )
    0 # top cmp   1 # top mov 0=   top r1 mov

   ( exit-context dup       @ >r0
                      cell+ @ >pc
    But we do this all in assembler using r3 as a base
    and then load multiple into r0 pc )

    exit-context r3 adr  ( load address of exit-context)
    { r0 pc } r3 ldm  ;c

code type ( a u -- )   implements type
    'type pc) r3 ldr   ( fetch address of routine from 'type)
    2 0 call   next  ;c

code ?key ( - f)
    '?key pc) r3 ldr  ( fetch address of routine from '?key)
label key-call
    0 1 call   next  ;c

code key ( - ch)
    'key pc) r3 ldr   key-call b  ;c

( Pass address and count of buffer to readline; it returns the count of
  characters actually read.)

code readline  ( a u - readcount)
    'readline pc) r3 ldr  ( fetch address of readline routine)
    2 1 call   next  ;c

( Pass address and count of filename; returns address and count of
  contents.)

code getfile  ( a1 u1 - a2 u2 -1 | 0)
    'getfile pc) r3 ldr  ( fetch address of getfile routine)
    2 1 call
    0 # top cmp
    top r1 mov ne       -- r1 = ptr to {length, string} struct
    0 r1 +) r1 ldr ne   -- r1 = length
    4 # top top add ne  -- top = ptr to string
    top push ne
    r1  push ne
    -1 # top mov ne     -- top = -1 to indicate file read
    next  ;c

code sync-caches  ( a - )
    'sync-caches pc) r3 ldr  ( flush a cache line routine)
    1 0 call   next  ;c


===========================================================================
Definition of the low-level words - the Forth virtual machine primitives
needed for the meta-compiler.
===========================================================================

( Implement the "forward referenced" primitives -before- defining anything
  else. Once these primitives are defined it will be safe to make colon
  definitions.)

code nope  ( a no-op!)  next  ;c

code ^ implements ^
   ip unnest   next  ;c

code lit implements lit
   top push   4 ip )+ top ldr   next  ;c

code (branch) implements (branch)
.ifdef relbranch
   4 ip )+ r0 ldr   r0 ip ip add   next  ;c
.else
   0 ip +) ip ldr   next  ;c
.then

code (0branch) implements (0branch)
   top top tst   top pop
label zbranch
.ifdef relbranch
   4 ip )+ 0 ldr 0=   0 ip ip add 0= ( jump)
.else
   0 ip +) ip ldr 0= ( jump)
.then
   4 # ip ip add ne ( skip)   next  ;c

code (=0branch) implements (=0branch)
   top top tst   zbranch b  ;c

code (for) implements (for)
   count nest   top count mov   top pop   next  ;c

code (?for) implements (?for)
   top top tst   top r0 mov   top pop
.ifdef relbranch
   4 ip )+ r0 ldr 0=   r0 ip ip add 0= ( jump)
.else
   0 ip +) ip ldr 0= ( jump)
.then
   next 0= ( !!)
   count nest   r0 count mov   4 # ip ip add   next  ;c

code (next) implements (next)
   1 # count count sub s   count unnest 0=   4 # ip ip add 0=   next 0=
.ifdef relbranch
   4 ip )+ r0 ldr   r0 ip ip add   next  ;c
.else
   0 ip +) ip ldr   next  ;c
.then


( Do-loop frame looks like this:
  +--------------------+
  |  saved count reg   |
  +--------------------+
  |  addr of loop end  |   for leave and ?leave
  +--------------------+
  |       limit        |<--- rp
  +--------------------+

   Current index is in count register; current "user-visible" index is
   calculated as count + limit.)

code (do)   ( limit start)  implements (do)
             4 ip )+ r1 ldr   -- fetch following branch address for (leave)
.ifdef relbranch
               r1 ip r1 add   -- fixup offset
.then
                     r0 pop   -- limit
   { count r1 r0 } ! rp stm   -- push saved count, loop end, limit
           r0 top count sub   -- count (index) = start - limit
                    top pop   next  ;c

code (loop)  implements (loop)
   1 # count count add s
   { count r1 r0 } ! rp ldm 0=  -- restore count & pop r stack if zero
              4 # ip ip add 0=  -- skip branch if zero
.ifdef relbranch
   4 ip )+ r0 ldr ne   r0 ip ip add ne  -- take branch if non-zero
.else
   0 ip +) ip ldr ne                    -- take branch if non-zero
.then
   next  ;c

( Testing carry to see if we've crossed the 0 threshold doesn't work on the
  ARM - carry and borrow are inverses. So approaching the limit from below
  causes a carry when reaching or surpassing it; but approaching it from
  above - subtracting - carries -unless- we have crossed the threshold. Is
  this why people use overflow instead, because it works in both
  directions? For now I'm going to implement my simple C solution: if the
  sign of the index has changed, we've crossed the threshold.)

code (+loop)  ( incr)   implements (+loop)
   count r1 mov  ( save old count value)
   top count count add   top pop   count r1 teq
   { count r1 r0 } ! rp ldm 0<  -- restore count & pop r stack
                                -- if signs differ
              4 # ip ip add 0<  -- skip branch if signs differ
.ifdef relbranch
   4 ip )+ r0 ldr 0>=   r0 ip ip add 0>=  -- take branch if signs match
.else
   0 ip +) ip ldr 0>=                     -- take branch if signs match
.then
   next  ;c


( NOTE: the only primitive still undefined is (")

( But we let it be, since it depends on lots of other words... Since we now
  check to make sure that forward-referenced primitives are defined before
  compiling references to them into target colon words, there is no
  danger.)


===========================================================================
Definition of the low-level words - the rest of the Forth virtual machine.
===========================================================================

                here  0 a,
code +origin    ( origin) pc) r0 ldr  r0 top top add   next ;c

code execute         top r0 mov   top pop   r0 pc mov   ;c
code @execute   0 top +) r0 ldr   top pop   r0 pc mov   ;c

code +     r0 pop   top r0 top add   next  ;c

code d+    ( alo ahi blo bhi - sumlo sumhi)
           {  r2  r1  r0 } ! sp ldm   r2  r0  r0 add s   r0 push ( sumlo)
                                      r1 top top adc     next  ;c

code -     r0 pop   top r0 top sub   next  ;c
code and   r0 pop   top r0 top and   next  ;c
code bic   r0 pop   top r0 top bic   next  ;c
code or    r0 pop   top r0 top or    next  ;c
code xor   r0 pop   top r0 top eor   next  ;c

code negate     0 # top top rsb   next  ;c

code dnegate    ( lo hi - negated)
                st1 r0 ldr   0 #  r0  r0 rsb s   st1 r0 str
                             0 # top top rsc     next  ;c

code invert   top top mvn   next  ;c

code dup   top push  next  ;c
code nip   r0  pop   next  ;c
code drop  top pop   next  ;c

code swap  top r0 mov   st1 top ldr   st1 r0 str  next  ;c
code over  top push     st2 top ldr   next  ;c
: tuck  ( a b - b a b)  swap over ;

code >r   top nest   top pop      next  ;c
code r>   top push   top unnest   next  ;c
code r@   top push   0 rp +) top ldr   next  ;c
code rdrop           4 # rp rp add     next  ;c

.ifndef rot-in-forth

code rot  ( r1 r0 top - r0 top r1)
   { r1 r0  } sp ldm ia   r0 lr mov
   { lr top } sp stm ia   r1 top mov next  ;c

code -rot  ( r1 r0 top - top r1 r0)
   { r1 r0  } sp ldm ia
   { top r1 } sp stm ia   r0 top mov next ;c

.else
:  rot   >r swap  r> swap ;
: -rot   swap >r  swap r> ;
.then

code <<       r0 pop   r0 top lsl top mov   next  ;c
code >>       r0 pop   r0 top asr top mov   next  ;c
code u>>      r0 pop   r0 top lsr top mov   next  ;c
code rotate   r0 pop   r0 top ror top mov   next  ;c

code 2/    top 1 #asr top mov  next  ;c
code u2/   top 1 #lsr top mov  next  ;c
code 2*    top 1 #lsl top mov  next  ;c

code u<    r0 pop  top r0  cmp   -1 # top mov u<   0 # top mov u>=  next  ;c
code <     r0 pop  top r0  cmp   -1 # top mov  <   0 # top mov  >=  next  ;c
code 0<            top top tst   -1 # top mov 0<   0 # top mov 0>=  next  ;c
code 0=            top top tst   -1 # top mov 0=   0 # top mov ne   next  ;c
: not      0= ;
: =    xor 0= ;


( The rest of the do-loop words. These are compiled like any other normal
  word, so the meta-compiler doesn't need to know about them, and no
  "implements" call is necessary.)

code leave
   { count ip r0 } ! rp ldm   -- pop "do" frame and branch
   -- count = saved count; ip = branch addr; r0 = limit
   next  ;c

code ?leave
   top top tst   top pop         -- if top is true (non-zero) then
   { count ip r0 } ! rp ldm ne   -- pop "do" frame and branch
   -- count = saved count; ip = branch addr; r0 = limit
   next  ;c

( Calculate current loop indices for current [i], enclosing [j], and
  third-level [k] do-loops.

  The first case - i - is special, since count is already in a register. We
  fetch the limit off the R stack, and add them to get the index.

  For j & k we reach farther up into the stack. In both cases the entire do
  frame is on the R stack - the enclosing one starting two cells up; the
  third one three cells farther.)

code i   top push    0 rp +) r0 ldr ( limit)  r0 count top add   next  ;c

code j   top push   2 cells # rp r2 add  ( address of enclosing do frame)
                       { r1 r0 } r2 ldm   r0 r1 top add   next  ;c

code k   top push   5 cells # rp r2 add  ( address of third do frame)
                       { r1 r0 } r2 ldm   r0 r1 top add   next  ;c


comment =========================
               Intrinsics
        =========================

code @    0 top +) top ldr   next  ;c
code c@   0 top +) top ldrb  next  ;c

code !    { r1 r0 } ! sp ldm   0 top +) r0 str    r1 top mov   next  ;c
code c!   { r1 r0 } ! sp ldm   0 top +) r0 strb   r1 top mov   next  ;c

code +!   { r1 r0 } ! sp ldm   0 top +) r2 ldr
                r0 r2 r2 add   0 top +) r2 str    r1 top mov   next  ;c

code cell+   4 # top top add   next  ;c
code cell-   4 # top top sub   next  ;c
code 1+      1 # top top add   next  ;c
code 1-      1 # top top sub   next  ;c

0 constant 0
1 constant 1
-1 constant -1
2 constant 2

4 constant cell

code cell/  ( n - n/4)   top 2 #asr top mov   next  ;c
code cells  ( n - n*4)   top 2 #lsl top mov   next  ;c


===========================================================================
Grab bag - some random words that don't really belong anywhere.
===========================================================================
: u+  ( a b c - a+c b)      rot +  swap ;  ( "under-plus")
: v+  ( a b c d - a+c b+d)  >r u+  r> + ;  ( "vector-plus")

: 2dup   over  over ;
: 2drop  drop  drop ;

: within  ( n lo hi - lo <= n < hi)  over - >r  - r>  u<  ;


===========================================================================
Basic dictionary words.
===========================================================================
variable h  ( dictionary pointer)
: here    h @ ;
: allot   h +! ;
: c,  here c!    1 allot ;
: ,   here !  cell allot ;

( Alignment.)
: aligned  [ cell 1- #] +  [ cell negate #] and ;

( compile compiles value of the cell following it into the dictionary. It
  is used by compiling words to compile words into other words!)

: compile   r>  dup cell+  >r  @ , ;  ( fig)

( Numeric literal.)
: literal   compile lit  , ;

( String literal.)
( Assume that compiled strings are:
    * prefixed with a length cell
    * padded at the end to a cell boundary)

: count  ( z" - a u)  dup cell+  swap @ ;
: (")  ( - a u)  r> count  2dup + aligned  >r ;   implements (")


===========================================================================
Checking and resetting the stacks.
===========================================================================

( sp@ pushes the current stack pointer onto the stack. If the stack is
  empty, sp@ returns a pointer to the decafbad sentinel. "5 sp@ @ . " will
  print 5.)

code s0   top push  'sp0 pc) top ldr  next ;c  ( bottom of sp stack)
code r0   top push  'rp0 pc) top ldr  next ;c  ( bottom of rp stack)

code sp@   ( - a)  top push   sp top mov   next ;c
code rp@   ( - a)  top push   rp top mov   next  ;c

code sp!   ( a)  top sp mov   top pop   next  ;c
code rp!   ( a)  top rp mov   top pop   next  ;c
code rp+!  ( #cells)  top 2 #asl rp rp add   top pop   next  ;c

: sp-reset  s0 cell- sp! ;

( depth looks a little weird, but it makes sense if you think about it.

  Assume the stack is empty. sp == s0, and top == decafbad.

  Now we push s0. sp == s0 - 4, and top = s0.

  Now execute sp@, which will push the address of s0 on the stack.  sp ==
  s0 - 8, and top == sp. Subtract. top = s0 - [s0 - 8] = 8. cell/ yields 2.
  So we have to subtract 2 to get the right answer - 0 - for an empty
  stack.)

: depth  ( - #cells)  s0 sp@ -  cell/  2 - ;

( We allow the sp stack to come within a 1 KiB "buffer zone" of here.
  Closer than that and we reset it. In reality this calculation is off by
  two cells, but we don't care. We're much more careful about the underflow
  case - we'd like to know -exactly- when we underflow the stack. In this
  case we carefully adjust s0 so that when the stack is empty will be equal
  to sp@, and if the stack has underflowed, then adjusted[s0] u< sp@.)

( XXX do we want to be so draconian as to throw away all the stack state on
  overflow? Or just drop a few cells?)

( XXX we really want to abort here with a nice message in each case.)

-- fig has this: ---------------------------------------------------------
-- : ?stack
--    09E sp@ <  1 ?error    sp@ 020 <  7 ?error ;
-- Those error strings:
--   1  Empty stack
--   7  Full stack
-- -----------------------------------------------------------------------

: ?stack   ( check stack for over- and under-flow; reset if necessary)
   sp@  here [ 1 Ki #] +    u< if  ." Full stack"             then
   s0  [ 2 cells #] -  sp@  u< if  ." Empty stack"  sp-reset  then ;


===========================================================================
Basic console output.
===========================================================================
32 constant bl  ( ASCII code for blank - that is, space)
13 constant #CR
10 constant #LF

: emit   ( ch)  sp@  1  type  drop ;
: space   bl emit ;
: cr  #CR emit  #LF emit ;


.ifdef debug-dot

( Printing hex.)
: 16/mod   ( n - q r)  dup 4 u>>   swap 15 and ;

: >digit   ( n - ch)  ( convert 1 binary digit to char; hex to uppercase)
   9 over u<  7 and +  [ char 0 #] +  ;

: .   8 for  16/mod >digit swap  next  drop
      8 for  emit  next  space ;

.then


===========================================================================
String support.
===========================================================================

( "March" two pointers in lock step.)
: march  ( a1 a2 increment - a1+ a2+)   dup v+ ;

( Compare two names; assumes they are of equal length. By substituting an
  exact equals function it is possible to change from case-insensitive to
  case-sensitive compares.)

.ifdef case-sensitive
: name-char=  ( ch1 ch2 - f)  = ;
.else
: >lowercase
   dup  [ char A #]  [ char Z 1+ #]  within
   if  [ char a  char A - #] +  then ;

: name-char=  ( ch1 ch2 - f)
   >lowercase  swap  >lowercase  = ;
.then

: string=   ( n1 n2 count compare - f)
   swap ( compare count)
   ?for
      >r
      over c@  over c@  r@ execute ( compare one char)
                        0= if ( mismatch)  r> r> 2drop  2drop   0  ^  then
      1 march  ( incr pointers)  r>  next  then   drop  2drop  -1 ;

( Note: This only works for non-overlapping strings!)
: cmove     ( src dest count)
   ?for
      over c@  over c!  ( move one char)
      1 march  ( incr pointers)  next  then   2drop ;



===========================================================================
Token parsing.
===========================================================================
variable start   ( points to first character of input stream)
variable end     ( points past last character of input stream)
variable first   ( points to first unconsumed character)

.ifdef skip-scan-in-asm

( Skip while char at a equals ch and not at end of input.)
code skip  ( end a ch - end a+)
   { r1 r0 } sp ldm  ( r1=end, r0=a, top=ch)
   begin
      r1 r0 cmp
   while u<
      1 r0 )+ r2 ldrb
      r0 top cmp
   until ne
   then
   4 # sp sp add   r0 top mov   next  ;c

( Scan while char at a doesn't equal ch and not at end of input.)
code scan  ( end a ch - a+ trailing)
   { r1 r0 } ! sp ldm  ( r1=end, r0=a, top=ch)
   begin
      r1 r0 cmp
   while u<
      1 r0 )+ r2 ldrb
      r0 top cmp
   until 0=
   ( matched)   r0 push ( a+)  1 # top mov ( trailing)   next
   then
   ( eot)       r0 push ( a+)  0 # top mov ( trailing)   next  ;c

.else

( white= implements a special kind of equality. If the second char is a
  space, the first character is considered "equal" to it if it is any kind
  of whitespace. If the second char is a non-space, the two chars must be
  equal.

  For simplicity, I'm going to consider any control char - ASCII value < 32
  - to be whitespace!)

: white=  ( c1 c2)
   dup bl = if  drop  33 u<  ^  then  = ;

( Skip while char at a equals ch AND not at end of input.)
: skip  ( end a ch - end a+)
   >r ( ch)
   begin  2dup swap u< while  dup c@ r@ white=  while  1+  repeat  then
   r> drop ;

( Scan while char at a doesn't equal ch AND not at end of input.)
: scan  ( end a ch - a+ trailing)
   >r ( ch)
   begin  2dup swap u< while  dup c@ r@ white= not  while  1+  repeat
   ( matched, consumed trailing)  ( end a+)  nip  1  r> drop  ^  then
   ( ran out of input)            ( end a+)  nip  0  r> drop  ;

.then

: (token)   ( last trailing - a u)
   over  first @  - ( count)  >r
   + ( last+trailing)  first @  swap first !  ( consume input)  r> ;

: token  ( - a u)
   end @  first @  bl skip ( leading whitespace)  dup first !
   ( first)   bl scan  (token) ;

: parse  ( ch - a u)
   end @  first @  rot scan  (token) ;

===========================================================================
Dictionary search.
===========================================================================
variable current
variable .forth.
variable .compiler.

: definitions   current ! ;
: forth         .forth. definitions ;
: compiler   .compiler. definitions ;

( Names precede the link field and are compiled in an interesting way. The
  count byte immediately precedes the link. If you then back up that many
  -more- bytes you'll find the first character of the name. So names are
  "right justified" - or padded on the left - so that the link field falls
  on a cell boundary.)

: link>name   ( 'link - a u)  1- dup  c@  tuck -  swap ;
: >body   ( cfa - pfa)  cell+ ;

( find takes a token [a u] and a chain [the head of a vocab word list] and
  searches for the token on that chain. If found, it returns the address
  of the code field of the word; if -not- found, it leaves the token [a u]
  on the stack, and returns false [0].)

: find  ( a u chain - a u 0 | cfa -1)
   ( link) >r
   begin  begin
      r>  @ ( follow link)  =while  ( link non-zero)
      >r  r@ 1- c@ ( len)  over =  until ( lengths match)  [ swap -]
      over ( a)  r@ link>name  ['] name-char=  string= until ( names match)
      2drop ( token)  r> cell+ ( cfa)  -1 ^  then  ( 0) ;

===========================================================================
  Go forth and multiply ... and divide.

  These routines are all based on a handful of low-level primitives:
     um* : u1 u2 - ud  ( all unsigned)
      m* : n1 n2 -  d  ( all signed)
  um/mod : ud  u - urem uquot  ( all unsigned)
  fm/mod :  d  n - mod quot  [signed floored division]

  Any word whose name starts with 'u' is unsigned, both in its arguments
  and its results; the others are signed.

  All of the */ variants calculate a double-length intermediate product.

  To calculate a single-length signed product, calculate a double-length
  _unsigned_ product and drop the high-order word. Weird but true. And an
  extra-credit challenge: is "m* drop" always equal to "um* drop"? Why or
  why not? ;-)

===========================================================================
code *    ( n1 n2 - n1*n2)
   r0 pop   r0 top top mul   next  ;c

code um*  ( u1 u2 - ud)
   st1 r0 ldr   top r0 top r0 umull   st1 r0 str  next ;c

code m*   ( n1 n2 - d)
   st1 r0 ldr   top r0 top r0 smull   st1 r0 str  next ;c


===========================================================================
um/mod  ( ud u -- rem quo)

This algorithm uses long division.  It first attempts to subtract the
divisor from the 64 bit dividend.  If the divisor is bigger than the
dividend (which will be true after the subtraction if the carry is set)
then it unwinds the subtraction.  Else, it sets a bit indicating the
subtraction was applied, thus building up the quotient.

All this happens by keeping the divisor in the 32 bits of r2 and shifting
the dividend up through the pair (r1:r0).  The high order bit of the
dividend (after the subtraction) will always be 0 (unless the subtraction
needs to be backed out).

Also note that as the dividend is being shifted up, the quotient is formed
in the low order bits of the r0 register.  Each time the subtraction was
successful, the low order bit is set.

After the divisor has been subtracted through the dividend 32 times,
whatever remains in the r1 (the high portion of the dividend) is
necessarily the remainder.
===========================================================================
code um/mod  ( ud  u - urem uquot)
     top r2 mov    -- Divisor
     r1 pop        -- Dividend, hi
     r0 pop        -- Dividend, lo
     #32 # r3 mov  -- Loop count

     here

     r0 1 #lsl r0 mov s -- Shift the low bits up
     r1 r1 r1 adc       -- Shift the carry in

     r2 r1 cmp          -- Can the dividend subtract the divisor?
     1 # r8 mov u>=     -- Yes, note it later
     r2 r1 r1 sub u>=   -- And perform the subtraction
     0 # r8 mov u<      -- No.

     r0 r8 r0 or        -- Set (or not) the quotient bit

     1 # r3 r3 sub s -- Decrement counter
     b ne         -- Branch until done

     r1 push      -- Remainder
     r0 top mov   -- Quotient
     next  ;c


===========================================================================
Interpreter and compiler.
===========================================================================
variable 'eat    ( how to consume a token)

meta: defer   ( default)  create  a,  does> @execute ;

' nope      defer (abort)    ( what to do in case of error)

: complain  ( a u)  type space  ." isn't defined"  (abort) ;  ( ERROR)

' complain  defer number     ( try to convert a number)
' complain  defer number,    ( try to convert a number and compile as a literal)

: interpret  ( a u)
   over +  ( start end)  end !  dup start !  ( source)  first !
   begin  token  =while  'eat @execute  ?stack  repeat  2drop ;

: evaluate  ( a u)
   start @ >r  end @ >r  ( save source)
   first @ >r            ( save our place in the input)
   interpret
   r> first !  r> end !  r> start ! ;

: interpret-token
      .forth. find  if  execute  ^  then  number ;

: compile-token
   .compiler. find  if  execute  ^  then
      .forth. find  if  ,        ^  then  number, ;

:  ]  ( start compiler)  [']   compile-token  'eat ! ;
: #]  literal  ] ;

target-compiler
: [   ( exit compiler)   ['] interpret-token  'eat ! ;
target

===========================================================================
Making new names in the dictionary.
===========================================================================
variable last         ( cfa of last word defined)

.def show-names  .def debug-dot  .and .if
: being-defined  ( a u - a u)
   cr  current @ .  here .  2dup type space ;
.else
: being-defined ;
.then

: code,   here last !  ( make a code field)  0 , ;

: token,  ( a u)  dup 1+ aligned  allot  ( room for name+len+padding)
          dup here 1- c! ( len)  here over 1+ -  swap cmove ;

: link,   here  current @  dup  @  ,  !  ( last-link 2! ) ;

: name    token  ( a u)  being-defined  token,  link,  code, ;

( (patch) ( rewrites the bl instruction at cfa to call to 'code.)
: |pc-  ( to from - offset)   8 + ( compensate for prefetch)  - ;
: >branch-offset  ( to from - bits)  |pc-  cell/  "00ffffff and ;
: (patch)   ( 'code cfa)  tuck >branch-offset  "eb000000 or ( op)
            ( cfa op)  over !  sync-caches ;

: patch   last @ (patch) ;


comment super-botched
( XXX It's a botch that there are two kinds of (;code) - one that points
  the last word to the code that follows it - currently used by the
  target-resident does> - and one that fetches a literal from the cell that
  follows it - currently used by the meta-compiler to patch the
  target-resident defining words with the code sequences that were defined
  earlier ... when the meta-compiler versions of the defining words were
  defined.

  Got all that? ;-)
super-botched

( (;code@) ( is followed by a literal - a pointer to code - that is used to
  patch the last word. Used by the meta-compiler to point the following
  versions of create, constant, and : to code that was already laid down.)

: (;code@)   r> @  patch ;  implements (;code@)

( (;code)  ( patches last to point to the code that directly follows it.
  Compiled by does> , below.)

( XXX Since this is only used by does> , and since we can only define does>
  words using the target-resident definers [no assembler!], maybe we should
  rename this? The thing that is -always- going to follow (;code) ( is a
  does> prologue - "lr r0 mov" - followed by a bl to dodoes. So maybe there
  is a name that better represents this? Then I wouldn't feel so bad about
  there being two versions of the "same" thing.

  XXX should this be called (does>) ( or something like that? We can never
  define ;code words once we're running the target-based colon compiler; so
  why not name this word based on which word - in the target - it assists?)

: (;code)   r>  patch ;

===========================================================================
Target-resident defining words.
===========================================================================
: create    name      ;calls  dovar
: constant  name  ,   ;calls  doconst

-- : variable  create  cell allot ;
: variable  create  0 , ;   ( initialise to zero)

: :         name  -]  ;calls  docolon

target-compiler
: does>   compile (;code)  here  lit  [ assemble  lr r0 mov  ;c  -] ,
          sync-caches  ( we've just compiled a piece of code!)
          code,  [ lookup dodoes  aliteral -]  patch ;

: ;   compile ^  \ [  ;
target


===========================================================================
Error handling, abort, and quit.
===========================================================================

.ifdef debug-vm
: .vm
   cr ."  top " dup .
   cr ."   sp " sp@ .
   cr ."   rp " rp@ .
   cr ." here " here .  ;
.else
: .vm ;
.then

: prompt
   'eat @  ['] interpret-token = if  ."  Ok"  then ;

: query   ( - a u)  s0 dup  256 readline ;

: quit  ( r0 rp! ???)
   begin  .vm  cr  query interpret  prompt  again  [

: abort
   sp-reset  r0 rp!  ( decimal)  forth  \ [  quit  [

' abort  is (abort)


.ifdef choose-your-poison

-- -----------------------------------------------------------------------
( fig)
-- rp!  loads rp from r0 (a user variable)
-- sp!  loads sp from s0 (ditto)

: quit
   \ [
   begin  rp!  cr  query  interpret
      state @  0= if  ."  Ok"  then   again  [

: abort
   sp!  decimal
   cr  ." fig-FORTH circa 1980"
   forth  quit  [

( Cold start vector IP points to the beginning of abort.)

-- -----------------------------------------------------------------------
( Zen Forth)
: ok?  state @ 0= if  ." Ok"  then ;

( Assuming s0 and r0 are variables containing the bottom of sp and rp
  stacks, resp. The idea here is that preset totally empties both stacks,
  but reset only touches the r stack, and resets it leaving the topmost
  entry alone. When abort calls quit, the topmost stack entry holds a
  return address pointing at the call to gripe, so any after any call to
  reset a word will return into abort, call gripe, and loop. It's pretty
  clever. (Hack courtesy of Wil Baden)

: reset             r>  r0 @ cell-  rp!  >r ;
: preset  s0 @ sp!  r>  r0 @        rp!  >r ;

: err  reset ;  ( returns to abort after the call to quit!)

: quit
   reset  begin  cr  query  space interpret  ok?  again  [

( gripe assumes that token has been moved into ram - @ there - as a counted
  string before processing. I don't do this - it's a lot of wasted work.)

: gripe  ( a u)  ( default error handler)
   there count type space ( token)  type ( msg) ;

: abort   begin  preset  quit  gripe  again  [

target-compiler
( Target-resident compiling word)
: abort"  \ if  \ "  compile err  \ then ;
target

-- -----------------------------------------------------------------------
( muforth)

: .mode-prompt   state @  cell+  @execute ;  ( secondary prompt)
: .Ok   ."  Ok"  ;
: prompt   .Ok  .mode-prompt  ;  ( ` Ok' then sub-prompt)

: quit
   begin  cr  <stdin  >stdout  typing interpret  >stderr  prompt  again  [
   ( infinite loop, until error... )

: error  ( print error)  ;
: carefully  catch  if  error ^  then ;

: warm
   >stdout command-line count  ['] interpret carefully
   begin  ['] quit carefully  again  [

.then


comment =========================
               Warm
        =========================

decimal

comment ===================
        Stack Test Routines
        ===================


.ifdef debug-dot

: stack-test
  sp@ . s0 sp! sp@ . cr
  depth . sp@ depth . drop depth . cr
  depth . sp@ . depth . cr
  1 2 3 . . . depth . cr
  depth . 1 2 3 depth . sp@ @ . drop sp@ @ . drop sp@ @ . drop depth . cr
  ." rotate tests" cr
  1 2 3 . . . cr
  1 2 3 rot       . . .  ." <- should be 1 3 2" cr
  1 2 3 -rot      . . .  ." <- should be 2 1 3" cr
;

: ..  .  . ;
: 2.  over . dup . ;
: .d  dup . over . ;

: mul  ( a b --)
  2dup  2.  ." um* "  um*  ." = " .. cr
  2dup  2.  ."  m* "   m*  ." = " .. cr
  2dup  2.  ."   * "    *  ." = " .  cr
  2drop ;

: mul-test
  1 2            mul
  100000 100000  mul
  -1 10000       mul
  10000 -1       mul
  -1 -1          mul
  0  -1          mul
  -1  0          mul
;

( Test do, loop, and friends.)
( Just print two bytes)
: .b   16/mod >digit swap  15 and >digit  emit emit  space ;

: do-test
   cr  10 0 do  i .b  loop
   cr  -100 -120 do  i .b loop
   cr  -10 10 do  i .b  -1 +loop
   4 0 do   cr   4 0 do   4 0 do
      i 4 <<  j 2 << +  k +  .b  loop  space space  loop loop ;

( Running do-test under muforth on the host yields this:

00 01 02 03 04 05 06 07 08 09
88 89 8A 8B 8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B
0A 09 08 07 06 05 04 03 02 01 00 FF FE FD FC FB FA F9 F8 F7 F6
00 10 20 30   04 14 24 34   08 18 28 38   0C 1C 2C 3C
01 11 21 31   05 15 25 35   09 19 29 39   0D 1D 2D 3D
02 12 22 32   06 16 26 36   0A 1A 2A 3A   0E 1E 2E 3E
03 13 23 33   07 17 27 37   0B 1B 2B 3B   0F 1F 2F 3F   )

.then  ( debug-dot)


: banner
( Print banner.)
 ." muforth/ARM-dtc "
 ." Copyright (c) 2002-2018 David Frech. All rights reserved."  cr cr
 ." muforth is free software; read the LICENSE for details." cr
;

.ifdef debug-dot

: print-memory
  ." Kernel base address: " 0 +origin . cr
  ." Kernel here value:   " here      . cr
  ." Kernel data sp:      " s0        . cr
  ." Kernel return sp:    " r0        . cr
;

-- : eval-test  " 0 . cr" evaluate ;

code push-regs  top push   { 0 15 to } ! sp stm   sp top mov   next ;c
code toss-regs  16 cells # top sp add   top pop   next ;c
: .reg-name   ( n - )   3 * " r00r01r02r03 ip rptop ctr08r09r10r11r12 sp lr pc" drop + 3 type space ;
: .reg-val    ( reg-ptr n - reg-ptr )  cells over + @ . ;
: .reg  ( {regs} n - {regs} v)  dup .reg-name  ."  = " .reg-val ."    " ;
: (regs)  cr  16 0 do  i .reg  i 3 and 3 = if cr then  loop ;
: .regs   push-regs  (regs)  toss-regs ;

( daf - quick & dirty memory dumper)
: du  ( last first)  do  cr i dup . @ .  cell +loop ;

.else

: print-memory ;

.then  ( debug-dot)

: ld   token  getfile if ." loaded" else ." not found" then ;

: lower-test
   cr  128 32 do  i emit  loop
   cr  128 32 do  i >lowercase emit  loop ;

: warm   h  !  \ [  banner  print-memory    abort ;


( Patch .forth. and .compiler. in .target. to reflect the reality on the
  host.)

.target.          parallels .forth.
.target-compiler. parallels .compiler.


( Patch pointers in header.)

' cold        lookup 'cold !
' warm cell+  lookup 'ip0 !
here          lookup 'h0 !
