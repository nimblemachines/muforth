: char   token  drop  c@ ;
: (    [ char ) #]  parse  2drop ;

( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)


( A startup file analogous to muforth's startup file. It expands the
  capabilities of a bare-bones ARM kernel so that it can be used
  interactively.)


( Make searching vocab chains easier.)

( Roll tokenizing and searching into one.)
: token'   token  rot  find ;  ( chain - a u 0 | cfa -1)

( : huh?  if ^ then  complain ;  ( flag)  
: huh?  drop ;

: chain'   token'  huh?  ;
: \chain   chain'  , ;  ( compile a word from a particular chain)

( XXX .forth. or current?)  
: '     .forth. chain' ;
( : '     current @ chain' ; )
compiler
: [']   '  literal ;
: \     .compiler. \chain ;
: \f       .forth. \chain ;
forth


( Utility words for making special literals.)
: ctrl   char  [ bl 2* ( 64) #]  xor ;  ( how you get ^? = 127.)

compiler
: (      \f ( ;
: char   \f char literal ;
: ctrl   \f ctrl literal ;
forth

( A nice way to do full-line comments with no trailing delimiter.)
: --  ctrl J parse  2drop ;  ( throw away until a newline)
compiler
: --  \f -- ;
forth


-- -----------------------------------------------------------------------
-- Setting defer'd words and values.
-- -----------------------------------------------------------------------

( Fixing up defer'ed words.)
: now  ' ;
: is   ' >body ! ;   ( Usage: now (number) ( is number )
: to   is ; ( assigning to values is the same!)


-- -----------------------------------------------------------------------
-- Support words for compiling control structures.
-- -----------------------------------------------------------------------

( Mark a branch source for later fixup.)
: >mark  ( - src)  here  0 , ;

( Resolve a forward or backward jump, from src to dest.)
( When using absolute branch addresses, this is easy: just store dest at src.)
: <resolve  ( dest src)  ! ;
: >resolve  ( src dest)  swap <resolve ;

compiler
: =if   ( - src)        compile (=0branch)  >mark ;
: if    ( - src)        compile  (0branch)  >mark ;
: then  ( src)          here >resolve ;
: else  ( src0 - src1)  compile   (branch)  >mark  swap  \ then ;

: begin   ( - dest)  here ;
: =until  ( dest -)       \ =if  <resolve ;
: until   ( dest -)        \ if  <resolve ;
: again   ( dest -)     compile   (branch)  >mark  <resolve ;
: =while  ( dest - src dest)  \ =if  swap ;
: while   ( dest - src dest)   \ if  swap ;
: repeat  ( src dest -)   \ again  \ then ;

( n for .. next         goes n times; 2^wordsize if n=0 )
( n ?for .. next then   goes n times; 0 if n=0 )

: for     ( - dest)      compile (for)          \ begin ;
: ?for    ( - src dest)  compile (?for)  >mark  \ begin ;
: next    ( dest -)      compile (next)  >mark  <resolve ;

( do, loop, +loop)
: do      ( - src dest)   compile (do)     >mark  \ begin ;
: loop    ( src dest)     compile (loop)   >mark  <resolve  \ then ;
: +loop   ( src dest)     compile (+loop)  >mark  <resolve  \ then ;
forth


-- -----------------------------------------------------------------------
-- Utility.
-- -----------------------------------------------------------------------
: >     swap <  ;
: min   2dup >  if swap then  drop  ;
: max   2dup <  if swap then  drop  ;


-- -----------------------------------------------------------------------
-- Numeric conversion - input.
-- -----------------------------------------------------------------------
variable radix    ( the current input & output number base)
variable dpl      ( decimal point location)
variable #digits  ( count of digits converted)

: base   radix ;  ( Compatibility)

: radixer  create ,  does> @  radix ! ;

( In order to keep this compilable by the target -before- it knows how to
  parse numbers - which is what we're defining now! - let's keep the
  calculated constants. I thought of converting - and in fact started to
  convert - these to numbers that the -metacompiler- could parse and
  compile, but that limits us to loading this code -only- via the
  metacompiler. I like the idea that the target is going to bootstrap
  itself!)

2 2* 2* dup 2* ( 16!)  radixer hex
dup            (  8!)  radixer octal
2 +            ( 10!)  radixer decimal
2                      radixer binary

decimal
( On and off)
: on  -1 swap !  ;
: off  0 swap !  ;

( Punctuation in numbers: sign, radix, decimal point, separators.)
: punct  ( a u ch - a' u' matched)
   over if ( still chars to process)  swap >r  over c@  xor if
   ( no match)  r>            0 ^  then  ( return false)
   ( match)     r>  1 -1 v+  -1 ^  then  ( a+1 u-1 true)
   -- ( end of input)  drop  r> drop ;      ( return to caller's caller!)
   ( end of input)  drop 0 ;

: ?sign  char - punct ;

: ?radix
        char " punct  if  hex ^  then
        char # punct  if  decimal ^  then
        char ' punct  if  octal ^  then
        char % punct  if  binary ^  then ;

( . resets dpl; others leave it unchanged; this means that embedding . in a
  number causes a double number to be pushed, and dpl set to the count of
  digits _after_ the _last_ . in the number.)

: punctuation
        char . punct  if  dpl off  ^  then
        char , punct  if   ^  then
        char - punct  if   ^  then
        char / punct  if   ^  then
        char : punct  if   ^  then
        char _ punct  if   ^  then  complain ;

: digit?    ( ch - digit -1 | junk 0)
   char 0 -  [ 2 2* 2* 1+ #]  ( 9)   over u< if  ( !decimal)
          [ 2 2* 2* 2* 1+ #]  ( 17)  -
     [ 2 1+  2* 2* 2*  1+ #]  ( 25)  over u< if  ( !hex, UPPERCASE)
          [ 2 2* 2* 2* 2* #]  ( 32)  -
     [ 2 1+  2* 2* 2*  1+ #]  ( 25)  over u< if  ( !hex, lowercase)
      ( junk)  0 ^
   then  then  ( hex) [ 2 2* 1+ 2* #]  ( 10) +  then  ( decimal)
   dup radix @  u<  ;

: @digit?   ( a - a digit -1 | a junk 0)   dup c@  digit?  ;

: *digit  ( ud a digit - ud*base+digit a)
   swap >r ( a)  swap ( lo digit hi)
   radix @ um*  drop  rot ( digit hi*radix lo)
   radix @ um*            ( digit hi*radix lo*radix_lo lo*radix_hi)
   d+
   r>  dpl @ 0< 1+  dpl +! ;  ( increment dpl if dpl >= 0)

: convert  ( ud a count - ud' a+ count-)
           ( a+ is first unconvertible char)
   =if  for  @digit?  while  *digit  1+  next  0 ^
                      then  drop ( non-digit)  r> ( count-)
   then  ( 0) ;

: digits   ( ud a count - ud' a+ count- #converted)
   dup >r ( chars left)  convert  r> over - ( count of digits converted)
   #digits +! ;

: (number)  ( a u - d)
   -- XXX radix preserve
   >r >r  0 0  r> r>  ?radix  ?sign >r
   #digits off  dpl on
   begin  digits  =while  punctuation  repeat  2drop ( a u)
   r> ( sign)  if dnegate then  ( apply saved sign)
   #digits @  0= if  complain  then ;

( Connect to the token consumers.)
: single?   dpl @  0< ;  ( return true if single-length number)

( XXX FIXME better names? use -: instead?)
: make-number
   (number)  single? if  drop  then ;

: make-literal
   (number)  single? if  drop  literal  ^  then
                         swap  literal  literal ;

now make-number    is number
now make-literal   is number,


-- -----------------------------------------------------------------------
-- Numeric conversion - output.
-- -----------------------------------------------------------------------
: >digit   ( n - ch)  ( convert 1 binary digit to char; hex to uppercase)
   9 over u<  7 and +  char 0  +  ;

: /digit   ( ud - udquot urem)
   0 radix @ um/mod     ( 0:hi / radix -> urhi uqhi)  >r
     radix @ um/mod  ( urhi:lo / radix -> urlo uqlo)  r> rot  ;

: s->d  ( n - d)  ( sign-extend)  dup 0< ;  ( high word on top)
: abs   ( n - |n|)   s->d  if   negate  then ;
: dabs  ( d - |d|)   s->d  if  dnegate  then ;

( XXX Should we convert numbers by pushing digits onto the stack
  instead?)

( Longest number we can convert is a negative base-2 double-number.)
65 aligned allot here constant pad  ( 64 digits + sign + alignment)

variable hld
: hold   -1 hld +!  hld @ c! ;
: <#     pad hld !  ;
: #>     ( ud - a #)  2drop  hld @  pad over - ;
: sign   ( n -)   0< if  char - hold  then  ;

: #     ( ud - ud')   /digit  >digit  hold  ;
: #s    ( ud - 0 0)   begin  #  2dup or 0=  until  ;

: (ud.)   ( ud - a #)  <#  #s  #>  ;
: ud.     ( ud -)      (ud.)  type  space  ;

: (u.)    ( u - a #)   0  (ud.)  ;
: u.      ( u -)       (u.)  type  space  ;

: (d.)    ( d - a #)   dup >r ( sign)  dabs  <#  #s  r> sign  #>  ;
: d.      ( d -)       (d.)  type  space  ;

: (.)     ( n - a #)   s->d  (d.)  ;
: .       ( n -)       (.)  type  space  ;

( Non-truncating field.)
: spaces  ( n)  0 max  ?for  space  next  then  ;
: field   ( a c field - a c)  over - spaces  ;

:  (.r)   ( n field - a #)   >r  (.)   r>  field  ;
:   .r    (.r)  type  ;

: (u.r)   ( u field - a #)   >r  (u.)  r>  field  ;
:  u.r    (u.r)  type  ;

( Useful shortcut.)
: ?  @ .  ;


-- -----------------------------------------------------------------------
-- Fancy math operators.
-- -----------------------------------------------------------------------
: fm/mod ;  ( UNDEF)

:  */mod  ( n1 n2 n3 - r q)  >r   m*   r>             fm/mod ;
: u*/mod  ( u1 u2 u3 - r q)  >r  um*   r>             um/mod ;

:  /mod   ( n1    n2 - r q)  >r  s->d  r>  (  d1 n2)  fm/mod ;
: u/mod   ( u1    u2 - r q)         0 swap ( ud1 u2)  um/mod ;

:  */     ( n1 n2 n3 - n1*n2/n3)   */mod  nip ;
: u*/     ( u1 u2 u3 - u1*u2/u3)  u*/mod  nip ;

:  /      ( n1 n2 - quot)    /mod  nip ;
: u/      ( u1 u2 - uquot)  u/mod  nip ;

:  mod    ( n1 n2 - mod)     /mod  drop ;
: umod    ( u1 u2 - umod)   u/mod  drop ;


-- -----------------------------------------------------------------------
-- Trap frames - for locals, exceptions, and dynamic binding
-- -----------------------------------------------------------------------

( Trying out, after all these years, the techniques that Klaus Schleisiek
  presented in 1984 [at FORML] and that I read about in 1993.

  The basic idea is that, in addition to return address pointers
  [saved IPs], there are stack frames on the return stack. These can be for
  any purpose, but we're interested here the following: trap frames, local
  variable storage, and "fluid" rebinding of variables - aka dynamic
  scoping.)

( Here is a picture of the return stack, with high memory towards to top of
  the page, and low memory further down:

  ^   |                    |
  |   +--------------------+
  |   |  prev return addr  |
  |   +--------------------+
  |   |        ...         |   several cells could be here; depends on the
  |   +--------------------+   type of frame
  |   |        ...         |
  |   +--------------------+
  |   |   cfa of cleanup   |
  |   +--------------------+
  +---+     prev frame     |<--- fp
      +--------------------+
      |    ip of remove    |<--- rp      remove just calls unlink
      +--------------------+                                          )

variable fp    ( the "top" - most recently pushed - frame)
               ( fp points to a frame ptr, which pts to a frame ptr...)

( link creates a new frame. It fetches the cfa of the following word and
  pushes it onto the return stack. This is the cleanup routine. Then it
  links this frame into the list rooted at fp, and then returns to its
  caller, skipping the following cfa. link is called by a word that builds
  a new stack frame.)

: link     r> dup @  >r         ( fetch following cfa & push to r)
           fp @ >r  rp@ fp !    ( link this frame to previous)
           cell+ >r             ( skip fetched cfa) ;

( unlink undoes what link did. It unlinks the frame from the list rooted at
  fp, and then runs the cleanup routine, which will do whatever is
  necessary to de-allocate the frame and undo any state changes made by the
  word that called link.)

: unlink   r>  ( save return address)
           fp @ rp!  r> fp !    ( unlink frame)
           r> execute           ( execute cleanup word)
           >r  ( restore return address) ;

( unwind is useful in the context of exceptions. It starts at fp and
  unlinks each frame in turn until fp points to a frame with a zero link.)

: unwind   r>  ( save return address)
           -- begin  fp @ @  while  unlink  repeat
           begin  fp @  while  unlink  repeat
           >r  ( restore return address) ;


create remove  -]  unlink ;   ( remove pushes IP)


( Now some interesting applications.)

-- -----------------------------------------------------------------------
-- Dynamic binding
-- -----------------------------------------------------------------------
( Restore saved value of a variable.)
: restore
   r>  ( ra)
   r> r>  ( a value)  swap  !
   >r  ( ra) ;

( Preserve the value of a variable for the duration of the execution of the
  calling word.)

: preserve  ( a)  ( address of variable)
   r>  ( ra)
   swap dup @  ( a value)  >r >r  link restore ( push cleanup)
   remove >r  ( normal return - unlink and cleanup)
   >r  ( ra) ;


-- -----------------------------------------------------------------------
-- Local variable frames
-- -----------------------------------------------------------------------
( Deallocate local variables.)
: unroom
   r>  ( ra)
   r>  ( #cells)  rp+!  ( rp+! takes cell count!)
   >r  ( ra) ;

( Allocate space for local variables.)
( NOTE: do -not- try to use a for loop to push cells! It doesn't work! The
  return stack is being used to store the loop index, but you're busy
  pushing stuff there! All hell breaks loose! If you absolutely want to
  zero locals as they are allocated, do a begin/until loop with the count
  on the data stack.)

: room  ( #cells)
   r>  ( ra)
   ( allocate, and perhaps initialise)
   -- swap dup  begin  "55aa55aa >r  1-  dup 0= until  drop
   -- swap dup  begin  0         >r  1-  dup 0= until  drop
   swap dup  negate rp+!  ( allocate)
   ( #cells)  >r
   link unroom
   remove >r  ( normal return - unlink and cleanup)
   >r  ( ra) ;

-- -----------------------------------------------------------------------
-- Trap handlers
-- -----------------------------------------------------------------------

( Here is a picture of the return stack, with high memory towards to top of
  the page, and low memory further down:

  ^   |                    |
  |   +--------------------+
  |   |  prev return addr  |    ... trap <trap-type> <handler>  ...
  |   +--------------------+         |
  |   | ip of call to trap |---------+
  |   +--------------------+
  |   |     saved sp       |
  |   +--------------------+
  |   |  trap type <pfa>   |
  |   +--------------------+
  |   |    cfa of nope     |   cleanup operation is to do nothing
  |   +--------------------+
  +---+     prev frame     |<--- fp
      +--------------------+
      |    ip of untrap    |<--- rp
      +--------------------+                                          )

( pop trap type, sp, and ip)
create untrap  -]  unlink  r> drop  r> drop  r> drop ;

( trap: creates a new trap type, uniquely defined because the value it
  compiles is its own dictionary address. At runtime it "raises" this trap
  type, and unwinds the stack to find a matching handler, printing an error
  message if nothing matched. If it finds a handler, it calls it, but
  leaves the IP on the return stack that points to the code that -set- the
  trap, so the whole thing is re-executed until it exits successfully - ie,
  returns normally without trapping.)

: trap:  create   does>
         begin  fp @  0= if ( XXX ." trapped" )  ^  then
                unlink  dup r> =  until  ( matches trap type)
         drop  r> sp!  r@ cell+ cell+  ( skip to handler)  @execute ;

( trap is followed in the definition by a trap type word, and a handler.)
: trap   r> ( ra)
         dup cell- >r  ( resume address: call ourselves again!)
         sp@ cell+ >r  ( sp at time trap set; cell+ to ignore ra)
         dup @ >body >r  ( fetch and push trap type)
         link nope       ( null cleanup action; untrap cleans up)
         untrap >r       ( does the unlink and cleanup on normal return)
         ( ra)  cell+ cell+ >r  ( skip trap type and handler and return)
         ;


-- -----------------------------------------------------------------------
-- Goofy test code
-- -----------------------------------------------------------------------
( Jump to the outermost frame and "return" to it.)
: undo  r>  fp @  cell- rp!  >r ;

( Let's talk to the user while these stack frames are set up, so we can
  dump and debug them.)

trap: undefined-token
trap: overflow
trap: ate-the-stack
trap: abort

: test-frames
   ( allocate a bunch of stuff)
   radix preserve  binary
   radix preserve  hex
    5  6  7  trap undefined-token  0
   10 11 12  trap ate-the-stack   -1
   30 40 50  trap overflow         1
   4 room
   -- token number
   quit
   ( dealloc) ;

: tt   test-frames ;
: ff   rp@  4 rp+!  rp@  -4 rp+!  ;
: gg   ff ;
: uw   rp@  unwind  rp@ radix @ ;

