( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading ARM memory allocation

forth

( A single memory space.)
256 Ki constant #image
#image buffer image

( Convert relative target address to address inside image)
: image+  [ #image 1- #] and  image  +  ;

( Read and write image memory. Assume little-endian ARM!)
meta
: @   image+  lew@ ;
: c@  image+  c@ ;
.ifdef debug-meta-store
: !   radix preserve hex
      out-channel preserve >stderr
      cr 2dup u. u.
      image+  lew! ;
.else
: !   image+  lew! ;
.then
: c!  image+  c! ;
: +!  dup \m @ rot + swap \m ! ;

: cells  2 << ;  ( target cells are 32 bits)
: cell/  2 >> ;  ( signed)
1 \m cells constant cell
: cell+  \m cell + ;
: cell-  \m cell - ;
forth


( We keep a bitmap of which cells need relocation.)
#image        ( num of bytes in image)
   \m cell/   ( num of bits in bitmap - one per target cell)
   7 +  3 >>  ( num of bytes in bitmap)
   constant #reloc-bitmap

#reloc-bitmap buffer reloc-bitmap

( Mark a target address as needing relocation.)
: index>bit  ( index - mask target-cell-offset)
   dup 7 and  1 swap <<  ( mask)
   swap 3 >>  ( offset) ;

: 'reloc  ( target-addr - mask a)
   \m cell/  ( convert to cell index)
   index>bit  reloc-bitmap +  ( mask a) ;

( Mark an address - a cell - as relocated.)
: reloc  ( a)   'reloc  dup  c@  rot  or  swap  c! ;

( Is an address relocated?)
: reloc?  ( a)  'reloc       c@      and ;


( Hook our image into the muforth memory dumper, and decorate relocated
  cells with a prefix `+'.)

( ARM quirk - to disasm loads we want to show the loaded value, so we need
  to do an "out of sequence" load.)

defer |@  ( fetch cell from image/target)

-: ( buf a u)  swap image+ -rot  cmove ;

: >image   [ .meta. chain' @ #]  is |@       ( ARM only)
           [ #]      is |read
           ['] lew@  is |cell@   ( We hope this is a little-endian ARM!)
                     32 |addr !  ( size of addr in bits)
                      4 |cell !  ( size of cell in bytes) ;
>image

: decorator  ( reloc? - char)  if  char +  ^  then  bl ;
: decorate  ( a n #spaces - a n)
            1- spaces  over reloc? decorator  emit ;
' decorate is decorate-cell


( Basic dictionary words.)
meta
variable h  ( dictionary pointer)
: here  \m h  @ ;
: aligned  [ \m cell 1- #] + [ \m cell negate #] and ;
: align   \m here  \m aligned  \m h ! ;
: allot   \m h +! ;
: c,   \m here  \m c!      1  \m allot ;
: ,    \m here  \m !  \m cell \m allot ;
: a,   ( address that needs relocation)  \m here  reloc  \m , ;

( Sometimes, esp when making linked lists, we want to treat 0 specially.
  Non-zero values should be compiled using a, to make them relocated; but 0
  should remain 0, so we compile it with the plain , )

: z,  ( n)  =if  \m a,  ^  then  \m , ;  ( if 0, use , otherwise a, )

forth
