| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading ST-LINK debug

hex

0483 3748 usb-find-device  .if   ." ST-LINK/V2 "    constant stlink  .else
0483 374b usb-find-device  .if   ." ST-LINK/V2-1 "  constant stlink  -d stlink-v2-1  .else

   warn" No ST-LINK devices found. "
.then .then


.ifdef stlink

( Device found - load support)

.ifdef usb-read-pipe  ( OSX or Linux)

| On OSX in particular, if you don't do this, the next time around the
| board wedges... Weird.

: done   stlink  usb-close ;

: uread   ( buf len - #read)  1  stlink  usb-read-pipe ;
.ifdef stlink-v2-1
: uwrite  ( buf len)          1  stlink  usb-write-pipe ;
.else
: uwrite  ( buf len)          2  stlink  usb-write-pipe ;
.then

.else  ( BSD system)

| Try shooting in the dark. The user can also tweak these by reading the
| output of
|
|   usbdevs -d

| XXX Now that we can use open-file? to *try* to open files, we can "probe"
| for a ugen device that matches. For now, let's leave this code alone and
| simply abort if ugen0 doesn't work.

.ifdef stlink-v2-1
   z" /dev/ugen0.01" r/w open-file? ?abort  dup constant stlink-read
                                                constant stlink-write
.else
   z" /dev/ugen0.01" r/o open-file? ?abort  constant stlink-read
   z" /dev/ugen0.02" w/o open-file? ?abort  constant stlink-write
.then

: uread   ( buf len - #read)  stlink-read   usb-read ;
: uwrite  ( buf len )         stlink-write  usb-write ;

.then  ( def usb-read-pipe)

( Debug)
variable stlink-spy
: .cmd   stlink-spy @ if
   radix preserve  hex
   cr  pad  8 for  c@+ swap u.  next  drop  then ;

| For sending commands, we want to zero out the buffer - 16 bytes' worth -
| and then always send 16 bytes.

: <cmd  ( - pad)  pad #16 erase  pad ;
: cmd>      .cmd  pad #16 uwrite ;

: ?expected  ( #expected #got)
   2dup  -  if  swap  ." expected "  u.  ." got "  u.  ^  then  2drop ;

: expect  ( #expected - pad)
   pad over uread  ( #expected #got)  ?expected  pad ;

: .jtag-version  ( bits)
   radix preserve  decimal  6 u>>  3f and  ."  JTAG v" u. ;

( Check vid and pid but don't print them out.)
: .ver  ( bits vid pid - jtag-version)
   swap  0483 = ( ST Micro)  if
   dup 3748 =  if  drop  ." ST-LINK/V2"    .jtag-version  ^  then
       374b =  if        ." ST-LINK/V2-1"  .jtag-version  ^  then
   then  drop  ." Weird. Is this an ST-LINK/V2?" ;

: cmd1  (       b0)  <cmd          c!  cmd> ;
: cmd2  (    b1 b0)  <cmd      c!+ c!  cmd> ;
: cmd3  ( b2 b1 b0)  <cmd  c!+ c!+ c!  cmd> ;

: get-ver  ( - ver vid pid)
               0f1 cmd1  6 expect  beh@+  ( big-endian!)  leh@+ leh@ ;
: get-mode     0f5 cmd1  2 expect  c@ ;

| Exit DFU mode and enter mass storage mode.
: dfu>      07 0f3 cmd2 ;

| Some commands return a status byte.
: ?status  ( a)
   c@  80 - if  error" fault returned. Executing 'jtag' again might help."  then ;

| All debug commands are prefixed with 0f2.
| NOTE: If we use the v1 API we cannot use dap@ and dap!

| >swd    0a3 20 0f2 cmd3 ;                     | debug, API V1 enter, swd enter
: >swd    0a3 30 0f2 cmd3  2 expect  ?status ;  | debug, API V2 enter, swd enter

| Exit SWD debug mode and enter mass storage mode.
: swd>        21 0f2 cmd2 ;

| For debug commands requiring more than two bytes.
: <dbg  ( subcmd - a)  0f2 <cmd  c!+ c!+ ;

| Read or write a single word.
: dap!  ( w a)     35 <dbg  lew!+ lew!  cmd>  2 expect      ?status ;
: dap@  ( a - w)   36 <dbg        lew!  cmd>  8 expect  dup ?status  4 +  lew@ ;

| For reading and writing multiple words.
: mem  ( a u subcmd - u)
   push tuck swap pop  ( u u a subcmd)  <dbg  lew!+ ( a)  leh! ( u)  cmd> ;

( XXX aligned to 32-bit address boundaries, and byte counts?)
: read32   ( buf a u)   07 mem  tuck  uread  ?expected ;
: write32  ( buf a u)   08 mem  uwrite ;

: cpuid  ( - cpuid)  0e000_ed00 dap@ ;

| Read the DBGMCU_IDCODE register. It's not always in the same place! If
| one is not defined, the value returned will be 0. In that case try
| another location!

: mcuid  ( - mcuid)
   4001_5800 dap@  ( C0/F0/G0 address)  ?if ^ then
   e004_2000 dap@  ( F1/F3/F4/G4 address)  ?if ^ then

   | H5 Refman rm0481 says debugger should use e00e_4000; cpu should use 4402_4000.
   e00e_4000 dap@  ( H5 address) ;

( Say hello.)
: .mode  ( mode#)
   dup 0=  if  drop  ." DFU"  ^  then
   dup 1 = if  drop  ." Mass"  ^  then
   dup 2 = if  drop  ." Debug"  ^  then
               drop  ." Unknown" ;

: tell-mode  ( - mode)
   get-mode  dup  .mode  ."  mode " ;

| Make sure we read or write an aligned byte count. But we assume that buf
| is 4-byte-aligned!
| : aligned32  4 aligned-by ;    | requires memory code, which may not have been loaded yet.
: aligned32  3 +  -4 and ;

: st.read   ( buf a u)  aligned32  read32 ;  ( Easy peasy!)
: st.write  ( buf a u)  aligned32 write32 ;

| Connect quietly. Useful when STM32 is used in the background, eg for
| programming AVR, 8051, PIC, etc.

: st.connect-quietly
   get-mode
   dup  0=  if  drop  dfu>  get-mode  then
   dup  1 = if  drop  >swd  get-mode  then
        2 = if  ^  then  ( debug mode)
   error" Couldn't put ST-LINK into debug mode." ;

| Let's connect and put it into Debug mode. This way subsequent code
| doesn't have to worry about it.

st.connect-quietly

.then  ( def stlink)
