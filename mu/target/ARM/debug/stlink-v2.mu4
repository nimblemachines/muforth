( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading ST-LINK debug

hex

0483 3748 usb-find-device  .if   ." ST-LINK/V2 "    constant stlink  .else
0483 374b usb-find-device  .if   ." ST-LINK/V2-1 "  constant stlink  -d stlink-v2-1  .else

   warn" No ST-LINK devices found. "
.then .then


.ifdef stlink

( Device found - load support)

.ifdef usb-read-pipe  ( OSX or Linux)

( On OSX in particular, if you don't do this, the next time around the
| board wedges... Weird.)

: done   stlink  usb-close ;

: uread   ( buf len - #read)  1  stlink  usb-read-pipe ;
.ifdef stlink-v2-1
: uwrite  ( buf len)          1  stlink  usb-write-pipe ;
.else
: uwrite  ( buf len)          2  stlink  usb-write-pipe ;
.then

.else  ( BSD system)

( Try shooting in the dark. The user can also tweak these by reading the
| output of
|
|   usbdevs -d
)

.ifdef stlink-v2-1
   z" /dev/ugen0.01" open-file-rw  dup constant stlink-read
                                       constant stlink-write
.else
   z" /dev/ugen0.01" open-file-ro  constant stlink-read
   z" /dev/ugen0.02" open-file-wo  constant stlink-write
.then

: uread   ( buf len - #read)  stlink-read   usb-read ;
: uwrite  ( buf len )         stlink-write  usb-write ;

.then  ( def usb-read-pipe)


( A simple buffer for chatty communication protocols. Words for putting
| values into a buffer and taking them out again.)

variable cp  ( chat pointer)
10 buffer chatbuf
: !chat  chatbuf  cp ! ;
: #chat  cp @  chatbuf - ;
: +cp    1 cp +! ;

( XXX Note: this is different from how I named these in
| target/S08/bdm-usb-host.m4. Change those as well?)

: >b  ( byte)    cp @  c!  +cp ;
: b>  ( - byte)  cp @  c@  +cp ;

( Little-endian 16-bit values. In the ARM world these are "halfwords".)
: >h  ( hword)    >hilo  >b >b ;
: h>  ( - hword)          b> b>  lohi> ;

( Little-endian 32-bit values. In the ARM world these are "words".)
: >w  ( word)    >3210  >b >b >b >b ;
: w>  ( - word)          b> b> b> b>  0123> ;

( 16-bit halfword and 32-bit word fetch and store. Little endian.)
: h@  ( addr - h)  leh@ ;
: h!  ( h addr)    leh! ;
: w@  ( addr - w)  lew@ ;
: w!  ( w addr)    lew! ;

: Send1    !chat  >b ;
: Send2    Send1  >b ;
: Send3    Send2  >b ;

: ?expected  ( #expected #read)
   2dup  -  if  swap  ." expected "  u.  ." got "  u.  ^  then  2drop ;

: _expect-check  ( #expect)
   chatbuf over ( expect)  uread  !chat  ?expected ;

: _expect  ( #expect - #read)
   chatbuf swap  uread  !chat ;

: expect  _expect-check ;

: Expect1   1 expect  b> ;
: Expect2   2 expect  b> b> ;

( Commonly expected values. * means to expect it, then fetch it from
| returned buffer.)

: b*       2 expect  b> ;  ( only interested in low byte)
: h*       2 expect  h> ;
: w*       4 expect  w> ;

( Debug)
variable stlink-spy
: .cmd   stlink-spy @ if
   radix preserve  hex
   cr  chatbuf  8 for  c@+ swap u.  next  drop  then ;

( For sending commands, we want to zero out the buffer - 16 bytes' worth -
| and then always send 16 bytes.)

: <cmd   chatbuf 10 erase  !chat ;
: cmd>   .cmd  chatbuf 10 uwrite ;

: cmd1  ( b0)        <cmd  >b        cmd> ;
: cmd2  ( b1 b0)     <cmd  >b >b     cmd> ;
: cmd3  ( b2 b1 b0)  <cmd  >b >b >b  cmd> ;

: .jtag-version  ( bits)
   radix preserve  decimal  6 u>>  3f and  ."  JTAG v" u. ;

( Check vid and pid but don't print them out.)
: .ver  ( bits vid pid - jtag-version)
   swap  0483 = ( ST Micro)  if
   dup 3748 =  if  drop  ." ST-LINK/V2"    .jtag-version  ^  then
       374b =  if        ." ST-LINK/V2-1"  .jtag-version  ^  then
   then  drop  ." Weird. Is this an ST-LINK/V2?" ;

: ver             0f1 cmd1  6 expect  b> b>  hilo>  ( big-endian!)   h> h> ;
: <dbg      <cmd  0f2 >b  >b ;  ( finish command with cmd>)
: dfu>         07 0f3 cmd2 ;  ( exit dfu mode)
: get-mode        0f5 cmd1  2 expect  b> ;

( For simple two-byte debug commands.)
: dbg  ( subcmd)  <dbg  cmd> ;

( Weird exception: only debug command that requires _three_ command bytes.)
: >swd    0a3 20 0f2 cmd3 ;
: swd>        21     dbg ;

: check   b*  80 - if  error" fault returned. Executing 'jtag' again might help."  then ;
: dbg.core-state
           01 dbg  b* ;
: dbg.halt     02 dbg  check ;
: dbg.reg@     ( reg# - value)  05 <dbg  >b ( reg#)      cmd>  w* ;
: dbg.reg!     ( value reg#)    06 <dbg  >b ( reg#)  >w  cmd>  check ;
: dbg.run      09 dbg  check ;
: dbg.step     0a dbg  check ;
: dbg.idcode   22 dbg  w* ;  ( returns IDCODE of SW-DP)

( Read and check count against expected.)
: uread-check  ( buf len)  tuck  uread  ?expected ;

( Memory accesses.)
: mem  ( a u subcmd - u)   <dbg  swap >w  dup >h  cmd> ;

( XXX do we even need this? I'm interested in putting instructions into
| memory, pushing values onto the stack, and read and writing registers. Do
| I care about byte-granular memory accesses?)

( XXX Write a memory test to see how these actually work, and what happens
| with unaligned accesses, etc.)

: write8   ( buf a u)   0d mem  uwrite ;

( XXX aligned to 32-bit address boundaries, and byte counts?)
: read32   ( buf a u)   07 mem  uread-check ;
: write32  ( buf a u)   08 mem  uwrite ;

variable 'target
variable 'host
defer doit  ( buf target len)
: .doit   cr ." chunk "  rot u.  swap u. u. ;

( XXX should we call doit with anything other than len?)
: chunk  ( len)
   cr  ." chunk "  'host @ u.  'target @ u.  dup u.
   push  'host @  'target @  r@  doit  r@ 'host +!  pop 'target +! ;

( XXX order of params?)
: chunked  ( target len buffer 'code)  is doit  'host !  swap 'target !
   40 /mod  ( r q)  swap push  for  40  chunk  next
                      pop  =if  ( rem)  chunk  ^  then  drop ;

( XXX write code to read/write by chunks)
: readregs  ( buf)
   04 dbg  ( read all regs)
   dup 40 uread-check   40 +  14 uread-check ;


( Read and write "debug" registers. What is this?)
.ifdef stlink-debug-regs

( XXX these don't work yet! ReadPipe errors out.)
: writedebug  ( w a)    35 <dbg  >w >w  cmd>  check ;
: readdebug   ( a - w)  36 <dbg  >w     cmd>  8 expect  h>  check ;

.then

: read4  ( a - w)  pad swap 4 read32  pad w@ ;

: cpuid  ( - cpuid)  0e000_ed00 read4 ;

( Read the DBGMCU_IDCODE register. It's not always in the same place! If
| one is not defined, the value returned will be 0. In that case read the
| second location.)

: mcuid  ( - mcuid)
   4001_5800 read4  ( F0 address)  ?if ^ then
   e004_2000 read4  ( F3/F4 address) ;

( Say hello.)
: .mode  ( mode#)
   dup 0=  if  drop  ." DFU"  ^  then
   dup 1 = if  drop  ." Mass"  ^  then
   dup 2 = if  drop  ." Debug"  ^  then
               drop  ." Unknown" ;

: tell-mode  ( - mode)
   get-mode  dup  .mode  ."  mode " ;

: .core-state
   dbg.core-state  80 = if  ." running" ^  then  ." halted" ;

( Quick flash memory test.)
: read-2k
   z" muforth-f0.img"  create-file  ( fd)
   0800_0000 800  pad  ['] read32  chunked
   dup  pad 800 write  close-file ;

: aligned32  3 + -4 and ;

( Make sure we read or write an aligned byte count.)
: st.read   ( buf a u)  aligned32  read32 ;  ( Easy peasy!)
: st.write  ( buf a u)  aligned32 write32 ;

( Connect quietly. Useful when STM32 is used in the background, eg for
| programming AVR, 8051, PIC, etc.)

: st.connect-quietly
   get-mode
   dup  0=  if  drop  dfu>  get-mode  then
   dup  1 = if  drop  >swd  get-mode  then
        2 = if  ^  then  ( debug mode)
   error" Couldn't put ST-LINK into debug mode." ;

( Let's connect and put it into Debug mode. This way subsequent code
| doesn't have to worry about it.)

st.connect-quietly

.then  ( def stlink)
