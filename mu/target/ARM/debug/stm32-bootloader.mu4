( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32 serial bootloader support

( See AN3155, USART protocol used in the STM32 bootloader, for details.)

hex

variable checksum
: sum  ( w)  checksum @  xor  checksum ! ;

: >b   dup sum  send ;
: b>            recv ;

( ACK is 79, NACK is 1f)
: ?ack
   b>
   dup 79 = if  drop ^  then
       1f = if   .ifdef bootloader-double-nack  b> drop  .then
          error" received NACK"  then
   error" unknown response from target" ;

: >sum    checksum @  >b  ?ack ; ( resets checksum to zero!)
: >cmd    ( cmd)  dup send  invert send  ?ack ;  ( send command and its inverse)
: >addr   ( a)  ( big-endian)  >0123  >b >b >b >b  >sum ;
: >hword  ( u)  >lohi  >b >b ;

( Command set)
: b.get-commands  ( - #commands version)
                             ?spkt  00 >cmd  b> b> ; ( receive #commands bytes)
: b.read-memory   ( a u)     ?spkt  11 >cmd  swap >addr  1- >cmd ; ( receive u bytes)
: b.go            ( a)       ?spkt  21 >cmd       >addr ;
: b.write-memory  ( a u)     ?spkt  31 >cmd  swap >addr  1- >b ; ( send data and checksum, then ?ack)
: b.erase-memory             ?spkt  43 >cmd ;  ( followed by page list bytes, or ff,00)
: b.extended-erase-memory    ?spkt  44 >cmd ;  ( followed by page list halfwords, or ffff,00)
: b.read-unprotect           ?spkt  92 >cmd  ?ack ;

: setup-chunk  ( buf a u - u a u)   rot m !  tuck ;

( Protocol can erase several pages at once. We do one at a time for
| simplicity. Note that we send pagecount-1 - ie, 0 for a pagecount of 1 -
| to target!)

: >page-index  ( a - i)  0800_0000 -  /page / ;

( Original erase command uses byte-sized page indices.)
: orig-erase-page      ( a)  0 >b      >page-index  >b      >sum ;
: orig-mass-erase          0ff >cmd ;

( Extended erase command uses hword-sized page indices.)
: extended-erase-page  ( a)  0 >hword  >page-index  >hword  >sum ;
: extended-mass-erase    0ffff >hword                       >sum ;

: orig-erase  ( a)
   b.erase-memory  =if  orig-erase-page ^  then
                  drop  orig-mass-erase ;

: extended-erase  ( a)
   b.extended-erase-memory  =if  extended-erase-page ^  then
                           drop  extended-mass-erase ;

defer b.erase         now orig-erase     is b.erase  ( default)
: use-extended-erase  now extended-erase is b.erase
   ." Using extended erase command."  cr ;

( Connect to target bootloader, get version and command list, and look for
| command 44 - extended erase - and use it if possible.)

: b.hello  ( - chunk-size)
   checksum off  #115200 bps  even-parity  7f send  ?ack
   b.get-commands  ( #commands version)
   cr  ." Bootloader version "
   radix preserve hex  <#  #  char . hold  #  #> type  cr
   ( Now receive the list of command bytes and look for extended erase.)
   for  b>  44 =  if  use-extended-erase  then  next  ?ack
   100 ;

.ifdef csr  ( Gigadevice RISC-V chip)
   : b.get-status  ( - sp)  dead_c0de ;
.else  ( STM32 part)
   : b.get-status  ( - sp pc)  dead_c0de dup ;
.then

( XXX Needs to write SP and PC to two consecutive locations, and then send
| the address of the SP to the bootloader.)

: b.run         ( pc sp)  2drop chat-fail ;

: b.read  ( buf a u)
   setup-chunk  b.read-memory   for  b> m&  next ;

: b.write  ( buf a u)
   setup-chunk  b.write-memory  for  m* >b  next  >sum ;


( XXX Do we need a boot-via in addition to chat-via? We can't do
| tethered-style code execution using the serial bootloader. We can only
| jump to our application, never to return.)

: boot
   chat-via  b.hello  b.get-status  b.run  b.read  b.write
   nope  nope  b.erase  b.write ;
