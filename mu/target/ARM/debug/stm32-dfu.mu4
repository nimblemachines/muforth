( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32 USB DFU support (DEPRECATED UNTIL FIXED)

( You should *not* be loading this file. It doesn't work reliably, and
| needs to be fixed.)

( By supporting the STM32 USB DFU interface, it's possible to ignore the
| broken ST-LINK interface and talk directly to the target chip.
|
| The DFU interface supports reading and writing both Flash and RAM, so it
| can be used directly to "explore" the chip as well as writing
| muforth-specific USB chat firmware to it.
|
| References:
|
| * STM32 System memory boot mode, app note AN2606
| * USB DFU protocol used in the STM32 bootloader, app note AN3156
| * USB DFU 1.1 spec: https://usb.org/sites/default/files/DFU_1.1.pdf
)

hex

0483 df11 usb-find-device  ( STM32 DFU)  .if  constant dfu-device  .else
28e9 0189 usb-find-device  ( GD32 DFU)   .if  constant dfu-device  .else

   ." No supported USB devices found. "
.then .then

.ifdef dfu-device  ( we found something)

: usb  ( bmRequest bRequest wValue wIndex wLength 'buffer)
   dfu-device  usb-control drop ;

: ms   #1,000,000 * ( ns)  0 swap  nanosleep ;


( Commands)

( DFU_DNLOAD)
: dfu.dnload  ( wValue wLength 'buffer)  2push
            21 01  rot 0  2pop  usb ;

( DFU_UPLOAD)
: dfu.upload  ( wValue wLength 'buffer)  2push
           0a1 02  rot 0  2pop  usb ;

variable stbuf  ( for checking status)

( DFU_GETSTATUS)
: dfu.get-status   ( - state:status)
           0a1 03  0 0 6  stbuf  usb
           stbuf c@+ ( status stbuf+1)
                 c@+ c@+ c@+  push  lohi> lohi> ( timeout) ms
           pop c@  lohi> ( state:status) ;

( DFU_CLRSTATUS)
: dfu.clear-status
            21 04  0 0 0  stbuf  usb ;


: !=   = 0= ;  ( to be more like C?)

( Wait until device no longer busy.)
: -busy  ( - status)
   0  begin  drop  dfu.get-status  dup 04_00 ( dfuDNBUSY) != until ;

: >idle
   begin  dfu.clear-status  dfu.get-status  02_00 ( dfuIDLE) = until ;

( Check to see if we are either in dfuIDLE or in a particular
| status/state. Reset to dfuIDLE if neither is true.)

: ?status  ( status)
   -busy  02_00 ( dfuIDLE) over =  if  2drop ^  then
                                =  if        ^  then
   >idle ;

( Since the DFU protocol is stupidly sensitive to what state it's in,
| let's be careful and create "smarter" dnload and upload words that take
| special care with state transitions.
|
| NOTE: When using dnload and upload to transfer to and from target memory,
| resp, the target transfer address is calculated as follows:
|
|   target_address = [wValue - 2] * wLength + base_address
|
| base_address defaults to 0800_0000 but can be set using the set-address
| command, below.
|
| After much swearing and gnashing of teeth, I discovered that the wLength
| value really needs to be the device's flash page size! Nothing else will
| work reliably.
|
| With a little cleverness I was able to get reading and writing of both
| RAM and flash working. In particular, if the host requests fewer than /page
| bytes, we request exactly /page bytes from the device and *cache* the
| result, then satisfy the read request from the cache. This makes du - which
| almost always requests 16 bytes at a time - work perfectly.)

: dnload   ( wValue wLength 'buffer)
   -- cr  ." dnload "  2 nth u.  over u.
   05_00 ?status  ( dfuDNLOAD-IDLE)
   dfu.dnload  -busy drop ;

: upload   ( wValue wLength 'buffer)
   -- cr  ." upload "  2 nth u.  over u.
   09_00 ?status  ( dfuUPLOAD-IDLE)
   dfu.upload ;


variable cmd   ( we need a small buffer for DNLOAD sub-commands)

( DFU_DNLOAD subcommands)
-- : exit-dfu                                        0 0 cmd  dnload ;
: >cmd        ( cmd)               cmd c!         0 1 cmd  dnload ;
: >cmd+addr   ( target-addr cmd)   cmd c!+  lew!  0 5 cmd  dnload ;

( DFU_DNLOAD subcommand 21)
: set-address  ( target-addr)   21 >cmd+addr ;

( DFU_DNLOAD subcommand 41, with address)
: erase-page   ( target-addr)   41 >cmd+addr ;

( DFU_DNLOAD subcommand 41, without address)
: mass-erase                    41 >cmd ;

( DFU_DNLOAD subcommand 92)
: unprotect                     92 >cmd ;


( d.read allows us to do a bit of exploring. Sadly, we can't read any of
| the I/O space, so it's impossible to see how the DFU bootloader has set
| up, eg, the clock system.)

( Our chunk size is the page erase size of the device's flash.)
/page constant #d.chunk
#d.chunk buffer last-chunk  ( last chunk read from device - flash or ram)

( Really just flash or ram.)
variable last-addr  last-addr off

: ?set-address  ( a)
   ff00_0000 and
   last-addr @  over last-addr !  over = if  drop ^  then
   -- cr ." set-address " dup u.
   set-address ;

( Chunk is 2 + chunk_index; u is size of chunks)
: setup-chunk  ( a - chunk u)
   dup ?set-address
   00ff_ffff and  #d.chunk /  2 +  #d.chunk ;

: ?read-chunk  ( a - offset)
   dup [ #d.chunk 1- #] and  =if  ( address is the *not* at the beginning of a chunk)
      nip ^ then  ( offset)
   swap setup-chunk  last-chunk  ( 0 chunk u buf)  upload ;


: d.hello   ( - chunk-size)  #d.chunk ;

.ifdef csr  ( Gigadevice RISC-V chip)
   : d.get-status  ( - sp)  dead_c0de ;
.else  ( STM32 part)
   : d.get-status  ( - sp pc)  dead_c0de dup ;
.then

: d.run     ( pc sp)  2drop chat-fail ;

: d.read    ( buf a u)
   swap ?read-chunk  ( offset)  last-chunk +  ( buf u src)
   -rot cmove ;

: d.write   ( buf a u)   drop  setup-chunk rot  dnload ;
: d.erase   ( a)   =if   erase-page ^  then  drop  mass-erase ;

: dfu
   chat-via  d.hello  d.get-status  d.run  d.read  d.write
   nope  nope  d.erase  d.write ;


.then
