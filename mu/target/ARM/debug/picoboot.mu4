( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading RP2040 PICOBOOT support

( C header files describing the structures are here:
| https://github.com/raspberrypi/pico-sdk/tree/master/src/common/boot_picoboot/include/boot/picoboot.h)

hex

2e8a 0003 usb-find-device  .if  constant picoboot  .else
   ." No PICOBOOT devices found."
.then

.ifdef picoboot

( NOTE: We are not supposed to hardwire the endpoint numbers here, but I'm
| going to do it anyway so we can get this code working ASAP. ;-)

.ifdef usb-read-pipe  ( Linux and OSX)

( These are for executing commands over the two bulk endpoints.)
: uwrite  ( buf len)   3  picoboot  usb-write-pipe ;
: uread   ( buf len)   4  picoboot  usb-read-pipe  drop ;

.else  ( ndef usb-read-pipe: BSD system)

( Try shooting in the dark. The user can also tweak these by reading the
| output of
|
|   usbdevs -d
)

z" /dev/ugen0.03" open-file-wo  constant picoboot-write
z" /dev/ugen0.04" open-file-ro  constant picoboot-read

( These are for executing commands over the two bulk endpoints.)
: uwrite  ( buf len )   picoboot-write  usb-write ;
: uread   ( buf len )   picoboot-read   usb-read  drop ;

.then

( This is for resetting the PICOBOOT interface. Again, we are hardwiring
| this for now. The Mass Storage device is interface 0; PICOBOOT is
| interface 1.)

: picoboot.reset   41 41 0 1 0 pad picoboot  usb-control  drop ;


#32 buffer cmdbuf
variable bp  ( buf pointer)
: >b  ( b)   bp @  c!+  bp ! ;
: >h  ( h)   >hilo  >b >b ;  ( little-endian)
: >w  ( w)   >3210  >b >b >b >b ;  ( little-endian)

variable spy  ( whether to spy on the protocol)
: .b     m*                  .h8_ ;
: .w     m* m* m* m*  0123>  .h32 space ;
: ?spy
   spy @ if
      radix preserve
      cr  cmdbuf 8 +  m !  ( skip magic and token)
      .b ( cmd)
      7 m +!  ( skip to command bytes)  .w ( addr?)  .w ( #bytes?)
   then ;

( NOTE: For now we are using a token that is always 0. It would be better
| if it was an increasing integer. We can try this later.)

: <pico  ( #transfer-bytes #cmd-bytes cmd)
   cmdbuf bp !
   431f_d10b >w  0 >w ( token)  >b ( cmd)  >b ( #cmd-bytes)
   0 >h ( reserved)  >w ( #transfer-bytes) ;

: pico>  ( pad buffer with zeros)
   ?spy
   [ cmdbuf #32 + #]  bp @ -  for  0 >b  next
   cmdbuf #32 uwrite ;

( Transferring data.)
: ack>   pad 1 uread ;
: ack<   pad 1 uwrite ;


( RAM-resident helper functions and buffer space.)
h @ ( save region ptr)
ram
__meta

here equ pico-sp  cell allot  ( used to call Forth code)
here equ addr     cell allot  ( memory address)
here equ count    cell allot  ( memory count)
here equ data     #256 allot  ( memory read/write buffer)

( PICOBOOT has stupid and unnecessary limits on what we can read: only the
| first 8KiB of the 16KiB ROM, flash only starting at multiples of 256 and
| lengths of 256, and none of the I/O space.
|
| Since PICOBOOT allows us to *execute* arbitrary code, let's just write a
| simple memory read function with none of PICOBOOT's silly limitations!
| We'll use this to read the memory into a buffer in ram, and then use
| PICOBOOT's read command to read the ram over USB.
|
| As long we use only caller-saved registers, we don't need to save
| anything.)

( Read from high memory to low.)
label pico-read-memory
   addr w lit   { x y } w ldm  ( x=addr, y=count, w=data)
   begin   4 y y subs  y x z ldr   y w z str  0= until
   lr bx  ;c  pool,  ( this will word-align ram region)

( We want to be able to read the flash, so set up the XIP machinery.)
ld target/ARM/raspi/pico-stage2.mu4

__host
h ! ( restore region ptr)


( PICOBOOT commands.)

( Important NOTE about the following commands:
|
|   >>> NONE OF THE FLASH-RELATED COMMANDS FUCKING WORK!!! <<<
|
| Consequently, support for them has been removed.)

: picoboot.read   ( buf addr size)  dup 8 84  <pico  swap ( addr) >w  ( size) dup >w  pico>  uread   ack< ;
: picoboot.write  ( buf addr size)  dup 8 05  <pico  swap ( addr) >w  ( size) dup >w  pico>  uwrite  ack> ;
: picoboot.exec            ( addr)    0 4 08  <pico  1+ ( addr+thumb) >w              pico>  ack> ;

variable stage2-has-run

: ?stage2
   stage2-has-run @  if ^ then
   \m stage2 picoboot.exec  ( set up XIP so we can read the flash)
   stage2-has-run on ;

variable rom-func-table
variable rom-data-table
variable rom-table-lookup

: h@+  ( a - h a+2)  c@+ c@+  push  lohi>  pop ;

( These are the commands required by the chat/debug interface.)
: pi.version
   pad 0010 4 picoboot.read  pad lew@
   dup  00ff_ffff and  0001754d ( "Mu" 01) =  if
      #24 u>>  cr ." PICOBOOT v" u.
      pad 0014 6 picoboot.read
      pad h@+ h@+ h@+ drop
      rom-table-lookup !  rom-data-table !  rom-func-table !  ^  then
   drop  ." Hmm. No version found in the ROM." ;

: pi.hello   ( - chunk-size)
   picoboot.reset
   pi.version
   #256 ;

: pi.get-status   ( - sp pc)
   pad \m pico-sp 4 picoboot.read  pad lew@  "deadbeef ;

: pi.run      ( pc sp)
   pad lew!  pad \m pico-sp 4 picoboot.write
   picoboot.exec ;

: pi.read     ( buf a u)
   ?stage2  ( make sure we can read from flash)
   swap pad lew! ( addr)  dup pad \m cell+ lew! ( count)
   pad \m addr 8 picoboot.write  \m pico-read-memory picoboot.exec ( copy to data)
   \m data swap picoboot.read ( read from data into buf) ;

: pi.write    ( buf a u)  picoboot.write ;

: pi.flash-begin
   error" PICOBOOT's support for programming the flash is broken;
use a UF2 file instead." ;

: pi.flash-end ;

: pico
   chat-via  pi.hello  pi.get-status  pi.run  pi.read  pi.write
             pi.flash-begin  pi.flash-end  chat-fail  chat-fail ;

.then  ( ifdef picoboot)
