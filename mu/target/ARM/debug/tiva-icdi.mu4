( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading Tiva/Stellaris debug support

( TI won't just come out and say it, but their "ICDI" - in-circuit debug
| interface - is simply an implementation of GDB's remote debug protocol
| over bulk USB endpoints. All the documentation needed to talk to this
| interface is in the GDB docs!
|
| If you claim interface 2 on the board, and read endpoint 3 and write
| endpoint 2 - both 64 byte bulk endpoints - you'll be talking to a
| relatively standard GDB stub.)

( NOTE: In order to have a reasonable conversation with an ICDI-based board
| you have to do a "qSupported" query first, otherwise all memory reads
| will return 0, and it will be impossible to stop the core.)

hex

.ifdef hid-find-device  ( if yes, we are running Linux or OSX; if no, BSD)

1cbe 00fd usb-find-device  .if  constant icdi

( Device found - load support)

2 icdi usb-claim-interface

( On OSX in particular, if you don't do this, the next time around the
| board wedges... Weird.)

: done   2 icdi  usb-release-interface  icdi usb-close ;

: uread   ( buf len - #read)  3  icdi  usb-read-pipe ;
: uwrite  ( buf len)          2  icdi  usb-write-pipe ;

.then  ( matched icdi)

.else  ( BSD system)

( Try shooting in the dark. The user can also tweak these by reading the
| output of
|
|   usbdevs -d
)

z" /dev/ugen0.03" open-file-ro  constant icdi-read
z" /dev/ugen0.02" open-file-wo  constant icdi-write

: uread   ( buf len - #read)  icdi-read   usb-read ;
: uwrite  ( buf len )         icdi-write  usb-write ;

.then

( Did we find a target we can talk to?)

.ifdef uread

( Let's size the buffer so we can move 256 bytes at a time. For writing,
| the buffer will look like this:
|
| $M2000f000,100:xx ... xx#ss
|
| The overhead is: 7 punct + 3 len + 8 address = 18 bytes. We need 2 bytes
| in the buffer for each byte read or written; so 256 * 2 + 18 total. Let's
| round up our overhead to a multiple of 8.)

variable bp  ( buf pointer)
218 constant #maxbuf  ( these are HEX numbers!)
#maxbuf buffer buf

: 0buf  buf #maxbuf 55 fill ;
: !buf  buf bp ! ;
: #buf  bp @  buf - ;
: +bp   1 bp +! ;

( XXX Note: this is different from how I named these in
| target/S08/bdm-usb-host.m4. Change those as well?)

: >b  ( byte)    bp @  c!  +bp ;
: b>  ( - byte)  bp @  c@  +bp ;

: >string  ( a u)  tuck  bp @ swap cmove  bp +! ;
: >num
   radix preserve  hex  <# #s #>  ( a u)  >string ;

: >nyb      0f and  >digit  >b ;
: nyb>          b>  digit>  0f and ;  ( hopefully it was actually hex... ;-)

: >hex  ( b)    dup  4 >> >nyb  >nyb ;
: hex>  ( - b)  nyb> 4 <<       nyb> + ;

: >hexstring  ( a u)
   for  c@+ swap  >hex  next  drop ;

: hexstring>  ( a u)
   for  hex> over c!  1+  next  drop ;

( Binary data is sent escaped.)
: escape-byte  ( b)
   char } >b  ( escape char)  20 xor >b ;

: >binary  ( b)
   dup  char $ = if  escape-byte  ^  then
   dup  char # = if  escape-byte  ^  then
   dup  char } = if  escape-byte  ^  then
   >b ;

: >binarystring  ( a u)
   for  c@+ swap  >binary  next  drop ;

: checksum  ( - sum)
   #buf  1-  ( don't count $)  !buf +bp  ( skip $)
   0 ( sum)  swap for  b> +  next  0ff and ;

: sum  ( a u - sum)
   0 -rot ( sum)  for  c@+ push  +  pop  next  drop  0ff and ;

: checksum2  ( - sum)
   buf 1+  ( skip $)  #buf 1-  sum ;

( Whether to spy on traffic to ICDI.)
variable spy

: .visible  ( b)
   dup 80 and if  char + emit  80 xor    then
   dup  bl u< if  char ^ emit  char @ +  then  emit ;

: bintype  ( a u)
   for  c@+ swap  .visible  next  drop ;

: recv
   buf #maxbuf uread  ( - #read)
   spy @ if  cr ." < "  buf swap type  ^  then  drop  ( #read) ;

: send
   spy @ if  cr ." > "  buf #buf bintype  then
   buf #buf uwrite ;

( Running Liunx under VirtualBox showed terrible behaviour on USB reads:
| instead of handing back _one_ packet with all the data, several smaller
| reads are returned instead. So we have to piece together the packet,
| reading until "#xx".)

: smart-recv
   buf  begin  dup #maxbuf uread  +  dup 3 - c@  char # =  until
   buf -  ( #buf)
   spy @ if  cr ." < "  buf swap type  ^  then  drop  ( #read) ;

: ack?  buf c@  char + = ;

: check?  ( - ok)
   !buf  b> char $ = if
      0  begin  b>  dup char # xor while  +  repeat
      drop  0ff and  hex> = if  ( checksums match?)  -1  ^  then
      spy @ if  ." checksum failed "  then  0  ^  then
   spy @ if  ." invalid packet start "  then  0 ;

: ?hexstring>  ( u)
   #buf 4 - 2/ over ( u)  = if  !buf +bp  hexstring>  ^  then
   spy @ if  ." size mismatch "  then  drop ;

: <pkt  ( begin a debug packet)
   0buf  !buf  char $ >b ;

: pkt>  ( end a debug packet)
   checksum2  char # >b  >hex  0 >b
   begin  begin  send recv  ack? until  smart-recv  check? until ;

: cmd    ( char)    <pkt  >b        pkt> ;
: cmd,n  ( n char)  <pkt  >b  >num  pkt> ;

compiler
: <cmd>           \c char  compile cmd ;
: <cmd,n>   ( u)  \c char  compile cmd,n ;
forth

: t.cycle            <cmd>   i ;
: t.cycles  ( u)     <cmd,n> i ;
: t.step             <cmd>   s ;
: t.halt             <cmd>   ? ;
: t.run              <cmd>   c ;
: t.go    ( addr)    <cmd,n> c ;
: t.getregs          <cmd>   g ;

: t.getreg  ( - u)   <cmd,n> p  pad 4 ?hexstring>  pad lew@ ;

: t.setreg  ( value n)
   <pkt  char P >b  >num  char = >b  pad lew!  pad 4 >hexstring  pkt> ;

: addr-len  ( a u - u)   swap >num  char , >b  dup >num ;
: ti.read  ( buf a u)
   <pkt  char m >b  addr-len  pkt>  ?hexstring> ;

( OMFG!! The M command doesn't work! TI's firmware is totally broken. No
| matter what the input, the first byte is set to 00. Then, the first
| nybble of the input is skipped, and thus what is stored into memory is
| shifted by a nybble!
|
| Crazy that this hasn't been fixed.)

: t.write-broken  ( buf a u)
   <pkt  char M >b  addr-len  char : >b  >hexstring  pkt> ;

: ti.write  ( buf a u)
   <pkt  char X >b  addr-len  char : >b  >binarystring  pkt> ;

: ti.hello  ( - chunk-size)
   <pkt  " qSupported" >string  pkt>  t.halt
   100 ( 256 byte chunk size) ;

( XXX no waiting until target ready... will this work?)
: ti.get-status   ( - sp pc)   #13 t.getreg  #15 t.getreg ;
: ti.run    ( pc sp)           #13 t.setreg  t.go ;

( XXX Not yet implemented.)
: ti.erase    ( a)  drop chat-fail ;
: ti.flash    ( buf a u)  drop 2drop chat-fail ;

: jtag
   chat-via  ti.hello  ti.get-status  ti.run  ti.read  ti.write  ti.erase  ti.flash ;

.else  ." No supported USB devices found."

.then
