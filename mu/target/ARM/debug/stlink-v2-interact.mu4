( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading ST-LINK debug (interact)

hex

( Load the flash programming routines into ram.)

.equates. .contains FLASH_AR .if  ( chip uses *addresses* for erasing flash)
   ld target/ARM/stm32/flash-programming.mu4
.else  ( chip uses sector/page *indexes* for erasing flash)
   ld target/ARM/stm32/flash-programming-sectored.mu4
.then

( Skip the rest of the file if no ST-LINK was found.)

.ifdef stlink

( The interface for the interact code. Implemented by all debug transports.)

( Connect to device, but don't halt it. This is a verbose connect that says
| what it's doing.)

: st.connect
   cr  ver .ver
   cr  tell-mode
   dup  0=  if  drop  ." => "  dfu>  tell-mode  then
   dup  1 = if  drop  ." => "  >swd  tell-mode  then
        2 = if  ^  then  ( debug mode)
   error" Couldn't put ST-LINK into debug mode." ;

: st.get-status  ( - sp pc)
   begin  dbg.core-state  80 xor  until
   #13 dbg.reg@  #15 dbg.reg@ ;

: st.run  ( pc sp)
   #13 dbg.reg!  #15 dbg.reg!  dbg.run ;

.ifdef no-flash-programming

: st.hello  ( - bogus-chunk-size)
   st.connect  dbg.halt
   ( We don't have flash routines yet; return bogus chunk size)
   1 Ki ;

( No-op flash routines.)
: st.flash-begin ;
: st.flash-end ;
: st.erase  ( a | sector#)  drop ;
: st.program  ( buf a u)  drop 2drop ;

.else

( Copy the flash programming routines to RAM when we connect.)
: st.hello  ( - chunk-size)
   st.connect  dbg.halt
   [ h @  ram  @flash-routines image+  swap h ! #]  ( address in ram image)
   @flash-routines #flash-routines st.write  ( copy code to ram)
   #flashbuf ;  ( return size of RAM flash buffer as chunk-size)

( Write unlock keys to FLASH_KEYR.)
: st.flash-begin
   cdef_89ab  4567_0123  \m stm32-flash-unlock rx ;

( Re-lock flash controller registers.)
: st.flash-end   \m stm32-flash-lock rx ;

( stm32-erase takes a flash address for uniform page devices, and a sector
| number, for sectored devices. target/ARM/v6-m/flash.mu4 has already
| figured this out for us.)

: st.erase  ( a | sector#)  \m stm32-flash-erase rx ;

( Copy buf contents to ram buffer, then write to flash from there.)
: st.program  ( buf a u)
   push ( u)
   ( copy chunk to target ram, aligning copied data by 8 for STM32C parts)
   swap @flashbuf r@  ( a buf flashbuf u)  8 aligned-by  st.write
   ( program chunk into flash)
   @flashbuf swap pop  ( flashbuf a u)  \m stm32-flash-program rx ;

.then  ( def no-flash-programming)

: jtag
   chat-via  st.hello  st.get-status  st.run  st.read  st.write
   st.flash-begin  st.flash-end  st.erase  st.program ;

.then  ( def stlink)
