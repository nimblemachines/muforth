( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading Serial chat code - in Forth! (target)

__meta
hex

{ h @ } flash  ( save region and set to flash)
0 vector-table  ( lay down a vector table, using end of ram as initial SP)

{ h ! }  ( restore region pointer)

label fake-reset  ( for bootloader Run command)
   @ram #ram + ,  ( initial SP)
   0 ,            ( "reset" vector)

ld target/ARM/v6-m/kernel-itc.mu4

-- : +!    (    n addr)  tuck @  +    swap ! ;
: set!  ( bits addr)  tuck @  or   swap ! ;
: clr!  ( bits addr)  tuck @  bic  swap ! ;

( Convert a bit-width to an all-ones mask.)
: >mask  ( width - bits)   1 swap <<  1- ;

( Store some bits into a field of a register or memory location.)
: f!    ( bits lsb width addr)
   >r  >mask over  << r@ clr!  << r> set! ;

: 2drop  drop drop ;

( Read a register, over and over, by byte or word, either until one of the
| bits specified is set [?set,?cset], or until all of the bits specified
| are clear [?clr,?cclr].)

: ?set   ( reg bits)   begin  over @   over and     until  2drop ;
: ?clr   ( reg bits)   begin  over @   over and  0= until  2drop ;
: ?cset  ( reg bits)   begin  over c@  over and     until  2drop ;
: ?cclr  ( reg bits)   begin  over c@  over and  0= until  2drop ;

: >sysclk  ( clksrc)
   5 * >r  RCC_CFGR r@ over c!  ( set clksrc)
   begin  dup c@ r@ =  until  r> 2drop ;

: >hsi  0 ( SW=HSI) >sysclk ;
: >hse  1 ( SW=HSE) >sysclk ;
: >pll  2 ( SW=PLL) >sysclk ;

: hse-start   ( hsebits)  [ RCC_CR 2 + #] tuck c!  2 ?cset ; 
: hse-byp-on  5 ( HSEON + HSEBYP) hse-start ;
: hse-on      1 ( HSEON)          hse-start ;

: pll-on    [ RCC_CR 3 + #]  1 over c!  2 ?cset ;
: pll-off   [ RCC_CR 3 + #]  0 over c!  2 ?cclr ;

( Turn on HSE, which is driven by an 8 Mhz signal from the ST-LINK. Use it
| to drive the PLL to 48 Mhz - x6 - and when the PLL stabilizes, switch to
| it as the system clock source.)

: clock-init
   -- hse-on  >hse  ( non ST-LINK)
   hse-byp-on  >hse  ( ST-LINK)
   pll-off
   ( XXX writing 00 to low byte of CFGR sets HSI as clock source!)
   ( How about doing it like this:)
   RCC_CFGR dup c@ ( get SWS:SW bits)
   0051_0400 +  swap ! ( USBPRE=/1; PLLMUL=6; PLLSRC=HSE; APB1=/2)
   pll-on
   1 ( latency) 0 3 FLASH_ACR f! ( we need one cycle for 48 MHz clock!)
   >pll ;

: led-init
   -- Turn on clock to Port E
   ( Ports GFED_CBAH )
        [ %0010_0000  #16 << #] RCC_AHBENR set!
   -- Make PE8 to PE15 outputs
   5555_0000 GPIOE_MODER ! ;

( Also include GPIOA init for USART1.)
( NOTE: AF7 on F303)
( I let the F303 boot into the serial bootloader, connected to it, then
| stopped it with ST-LINK and pulled out some configuration.
|
| Settings for PA9 and PA10:
|
|    MODER      10 for both: alternate function
|    OSPEEDR:   11 for both: fastest speed
|    PUPDR:     01 for both: pullup
|    AFRH:    0111 for both: AF7
|
| On older chips - eg F103/F105 - and on the new GigaDevice GD32VF103! -
| the GPIO configuration is somewhat different.
|
| GPIOx_CRL and _CRH have 4 bits per GPIO pin: CNF<2>:MODE<2>
|
| Here are the tables of their meanings:
|
| MODE  Meaning
|  00   Input
|  01   Output; Maximum speed 10 MHz
|  10   Output; Maximum speed 2 MHz
|  11   Output; Maximum speed 50 MHz
|
| If MODE = 00:
| CNF   Meaning
|  00   Analog
|  01   Input floating
|  10   Input pull-up / pull-down
|  11   Reserved
|
| If MODE != 00:
| CNF   Meaning
|  00   Output, general purpose, push-pull
|  01   Output, general purpose, open-drain
|  10   Output, alternate function, push-pull
|  11   Output, alternate function, open-drain
|
| If MODE = 00 and CNF = 10, the GPIOx_ODR bit corresponding to the pin
| determines the direction of the pull-up/-down:
|
| ODR
|  0   pull-down
|  1   pull-up
)

: uart-init
   [ 1 #14 << #] ( USART1 clock enable) RCC_APB2ENR set!
   [ 1 #17 << #] ( GPIOA clock enable)  RCC_AHBENR set!

   ( PA9 is TX; PA10 is RX)
   %1010 #18 4 GPIOA_MODER f!  ( alternate function)
   -- %1111 #18 4 GPIOA_OSPEEDR f!  ( do we *really* need this?)
   %0101 #18 4 GPIOA_PUPDR f!  ( pull up)
     "77   4 8 GPIOA_AFRH f!  ( AF7: USART1)

   0 USART1_CR1 tuck !  ( disable)
   %1100 ( TE+RE) over !
   [ #48,000,000 #115,200 / #] USART1_BRR !
   1 ( UE: uart enable) swap set! ;

( NOTE: USARTx_ISR and USARTx_SR have TC, TXE, and RXNE bits in the same
| place.)

: b>  ( - b)  USART1_ISR [ 1 5 << #] ( RXNE) ?set  USART1_RDR @ ;
: >b  ( b)    USART1_ISR [ 1 7 << #] ( TXE)  ?set  USART1_TDR ! ;

( XXX hardwiring in the address of data stack bottom!)
code depth
   @ram #ram +  #32 cells -  w lit  ( bottom of data stack)
   sp x mov   x w w subs   2 w w lsrs
   top dpush1   w top mov   next  ;c

: wait   for next ;
: flash-leds  0000_ff00 GPIOE_ODR set!  3_0000 wait  0000_ff00 GPIOE_ODR clr! ;

: chip-init   clock-init  led-init  uart-init  flash-leds ;

: lohi>  ( lo hi - w)   8 << or ;
: >hilo  ( w - hi lo)   dup 8 u>>  swap 0ff and ;

: w>   ( - w)  b> b> b> b>  lohi> lohi> lohi> ;
: >w   ( w)    >hilo >b  >hilo >b  >hilo >b  >b ;

( XXX one of these needs to flip the values around, or the host does.)
: stack>  ( get stack values from host)
   b> for  w>  next ;

: >stack  ( send stack values to host)
   b> for  >w  next ;

: version        [ muforth-commit drop 8 evaluate #] >w  r@ >w ;
: read-memory    w> ( addr)  b> ( #words)  for            @+ swap  >w  next  drop ;
: write-memory   w> ( addr)  b> ( #words)  for  w>  swap  !+           next  drop ;
: run            stack>  execute  depth >w ;

( XXX Do we need these in general? Should they be in the kernel?)
( XXX Maybe defined in terms of create/does words? lshifter, urshifter,
| srshifter?)

: cells   2* 2* ;
: cell/   2/ 2/ ;

: jump  ( index)  cells r> + @execute ;  [r]

: dispatch  ( cmd)
   10 -  dup 4 u< if
      jump  version  read-memory  write-memory  run
   then  drop ;

-- : chat   chip-init  begin  b> dispatch  again ;
: chat   chip-init  begin  RCC_CFGR @ >w  again ;

( So we can "call" this code or jump to it at reset.)
label reset
   @ram #ram + w lit   w sp mov
   ( fall thru)  ;c

( XXX Do we need to add 1 to the address for thumb bit?)
here 1+ ( thumb!)  fake-reset cell+ !

Reset_exc handler
   -- Startup code!
   -- Since we have a Forth kernel, let's write the startup code in Forth!
   sp rp mov   #64 cells sp sp sub  ( RP at end of RAM; SP below)
   ' chat cell+  ip  lit
   0decafbad     top lit
   next  ;c
   pool,

HardFault_exc handler
   here b  ;c  ( hang)

NMI_exc default-handler
   lr bx  ;c  ( return to sender!!)
