( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading CMSIS-DAP support

-- Thanks are due to ARM for developing this open-source standard. The
-- specification and reference implementation (!) are at
-- https://silver.arm.com/browse/CMSISDAP. An account is necessary to
-- access this.

-- XXX Can multiple DAP commands be packed into a single USB packet (ie,
-- HID report)?

hex


comment CMSIS-DAP-commands
|
|   I have left out a few that I don't think are that interesting - eg, those
|   that concern talking to JTAG-DPs. The only interface this currently works
|   with is the Freedom Board's OpenSDA CMSIS-DAP, which only supports the
|   SW-DP (since the target chip, a Kinetis KL25Z, only _has_ an SW-DP).
|
|   Numbers are in hex.
|
|   DAP.LED
|     > 01 xx yy        xx=00 for Connect, 01 for Running;
|                       NOTE: only Connect implemented on Freedom board
|                       yy=00 for off, 01 for on
|     < 01 00
|
|   DAP.Connect
|     > 02 pp         pp=00 for default, 01 for SWD, 02 for JTAG
|     < 02 pp         pp=00 failed, 01 SWD, 02 JTAG
|
|   DAP.Disconnect
|     > 03
|     < 03 ss         ss=standard status: 00=ok, ff=failed
|
|   DAP.Write_ABORT
|     > 08 xx yy yy yy yy   xx=which device - ignored for SWD
|                           yy=abort register word
|     < 08 ss
|
|   DAP.SWJ_Pins
|     > 10 pp mm dd dd dd dd   pp=pin values to set
|                              mm=mask - which pins to change
|                              dd=delay in us
|     Mapping for pp and mm:
|        Bit 0: SWCLK/TCK
|        Bit 1: SWDIO/TMS
|        Bit 2: TDI
|        Bit 3: TDO
|        Bit 5: nTRST
|        Bit 7: nRESET
|
|     < 10 pp                  pp = pin values read from device
|
|   DAP.SWJ_Sequence
|     > 12 nn dd ..       nn = bit count 1 .. 256 (0 encodes 256)
|                         dd = bit data, lsb first
|     < 12 ss
|
|   DAP.SWD_Configure
|     > 13 cc     cc<1:0> = 00 1 cycle turnaround
|                           01 2 cycles
|                           10 3 cycles
|                           11 4 cycles
|                 cc<2>   = DataPhase: 0 = do not generate on WAIT/FAULT
|                                      1 = always generate on WAIT/FAULT
|                                          for sticky overrun
|     > 13 ss
|
|   DAP.Transfer_Configure
|     > 04 ii ww ww mm mm    ii = idle cycles after each transfer
|                            ww = # retries after each WAIT response
|                            mm = # retries for value match
|     < 04 ss
|
|
|   DAP.Transfer
|     > 05 ii nn  rr dd dd dd dd  rr dd dd dd dd ..
|                           ii = DAP index - ignored for SWD
|                           nn = transfer count: 1 .. 255
|                           rr = transfer request
|                           dd = optional data (word)
|                                transfer data or match value
|
|     Requests have the following format:
|
|        Bit 0: APnDP: 0 = Debug Port (DP), 1 = Access Port (AP).
|        Bit 1: RnW: 0 = Write Register, 1 = Read Register.
|        Bit 2: A2 Register Address bit 2.
|        Bit 3: A3 Register Address bit 3.
|        Bit 4: Value Match (only valid for Read Register):
|               0 = Normal Read Register, 1 = Read Register with Value Match.
|        Bit 5: Match Mask (only valid for Write Register):
|               0 = Normal Write Register, 1 = Write Match Mask (instead of Register).
|
|     < 05 nn rr  dd dd dd dd ..
|                           nn = transfers executed: 1 .. 255
|                           rr = last response from target
|                           dd = data words received from target
|
|     Responses have the following format:
|
|        Bit 2..0: ACK (Acknowledge): 1 = OK (OK/FAULT for JTAG), 2 = WAIT, 4 = FAULT.
|        Bit 3: 1 = Protocol Error (SWD)
|        Bit 4: 1 = Value Mismatch (Read Register with Value Match)
|
|   DAP.Transfer_Block
|     > 06 ii nn nn rr  dd dd dd dd ..
|                           ii = DAP index - ignored for SWD
|                           nn = transfer count: 1 .. 65535
|                           rr = transfer request
|
|     Request has the following format:
|
|        Bit 0: APnDP: 0 = DP (Debug Port), 1 = AP (Access Port)
|        Bit 1: RnW: 0 = Write Register, 1 = Read Register
|        Bit 2: A2 := Register Address bit 2
|        Bit 3: A3 := Register Address bit 3
|
|     < 06 nn nn rr  dd dd dd dd ..
|                           nn = transfers executed: 1 .. 65535
|                           rr = last response from target
|                           dd = data words received from target
|
|     Response has the following format:
|
|        Bit 2..0: ACK (Acknowledge): 1 = OK, OK/FAULT (JTAG), 2 = WAIT, 4 = FAULT
|        Bit 3: Protocol Error (SWD)
|
|   DAP.Transfer_Abort
|     > 07
|     No response, but aborted Transfer or Transfer_Block will respond with
|     information about actually transferred data.
|
| end CMSIS-DAP-commands


.ifdef hid-find-device  ( OSX and Linux have this, BSDs don't)

0d28 0204 hid-find-device  ( MBED CMSIS-DAP)  .if  constant cmsis  .else
c251 f002 hid-find-device  ( Keil CMSIS-DAP)  .if  constant cmsis  .else

   ." No supported USB devices found. "

.then .then

.ifdef cmsis  ( ie, we matched one of the two devices above)

( Device found - load support)

: uread   ( buf len - #read)  cmsis  hid-read ;
: uwrite  ( buf len)          cmsis  hid-write ;

.then

.else  ( no hid-find-device; we must be running some flavour of BSD)

( Try shooting in the dark. The user can also tweak this by reading the
| output of
|
|   usbdevs -d
)
z" /dev/uhid0" open-file-rw   constant cmsis

: uread   ( buf len - #read)  cmsis  -rot read ;
: uwrite  ( buf len)          cmsis  -rot write ;

.then

( Did we find a target we can talk to?)

.ifdef uread

( A simple buffer for chatty communication protocols. Words for putting
| values into a buffer and taking them out again.)

40 buffer sendbuf
40 buffer recvbuf

variable bp  ( buf pointer)
: !send  sendbuf  bp !  sendbuf 40 55 fill ;
: !recv  recvbuf  bp ! ;
: #send  bp @  sendbuf - ;
: +bp    1 bp +! ;

( XXX Note: this is different from how I named these in
| target/S08/bdm-usb-host.m4. Change those as well?)

: >b  ( byte)    bp @  c!  +bp ;
: b>  ( - byte)  bp @  c@  +bp ;

( Little-endian 16-bit values. In the ARM world these are "halfwords".)
: >h  ( hword)    >hilo  >b >b ;
: h>  ( - hword)          b> b>  lohi> ;

( Little-endian 32-bit values. In the ARM world these are "words".)
: >w  ( word)    >3210  >b >b >b >b ;
: w>  ( - word)          b> b> b> b>  0123> ;

( 16-bit halfword and 32-bit word fetch and store. Little endian.)
: h@  ( addr - h)  leh@ ;
: h!  ( h addr)    leh! ;
: w@  ( addr - w)  lew@ ;
: w!  ( w addr)    lew! ;

( Whether to spy on traffic to DAP.)
variable spy

: ?type  spy @ if  type  ^  then  2drop ;
: .send
   radix preserve  hex
   cr  #send u.  ." # "
   sendbuf  #send for  c@+ swap u.  next  drop ;

: usend-recv  ( - r0 r1)  ( return first two bytes of response)
   spy @ if  .send  then
          sendbuf  40  uwrite
   !recv  recvbuf  40  uread  b> b>
   rot  spy @ if  ." # " u.  ^  then  drop ;

: <cmd  ( cmd)  !send  >b ;
:  cmd>   ( - r1)  sendbuf c@ ( cmd)  push  usend-recv
   swap pop  2dup xor if
   error" response didn't match command"  then 2drop ;

: check  ( r1)  if  error" DAP_ERROR response"  then ;

: DAP.LED  ( on/off)
   01 <cmd  00 >b  0= 1+ ( nonzero -> 0, zero -> 1)  >b  cmd> drop ;

: DAP.Connect
   02 <cmd  01 >b  cmd>  01 xor check ;

: DAP.SWD_Configure  ( config)
   13 <cmd  >b  cmd> check ;

( Send 56 1's then 8 0's.)
: DAP.Connect_Sequence
   12 <cmd  #64 >b  -1 >w  00ff_ffff >w  cmd> check ;

: DAP.Transfer_Configure
   04 <cmd  ( idle cycles) 04 >b  ( WAIT retries) 80 >h  ( match retries) 80 >h
   cmd> check ;


( Support for reading and writing basic DP and AP registers.)

( Unlike all other commands that access DP registers, DP.ABORT is
| self-contained. The other DP access words are intended for use inside of
| a "DAP.Transfer" operation - ie, bracketed by <xfer and xfer>.)

: DP.ABORT   ( abort)  08 <cmd   00 >b  >w     cmd> check ;
: -fault  -2 DP.ABORT ;  ( clear any faults)


( Whether to flash the "connect" LED for each transfer.)
variable led
: ?led  ( flag)
   led @ if  spy @ ( save)  spy off  swap DAP.LED  spy !  ^  then  drop ;

variable #xfers
: <xfer
   -1 ?led
   05 <cmd  00 ( DAP#) >b  00 ( count placeholder) >b  #xfers off ;

: >x  ( xfer)  ( add transfer to sequence)  >b  1 #xfers +! ;

:  xfer>
   #xfers @  =if  ( do nothing if no xfers queued up)
      sendbuf 2 + c!  cmd>
      0 ?led
      #xfers @  xor if  ." transactions not completed "  then
      b> dup 1 = if  drop  " OK "              ?type          ^  then
         dup 2 = if  drop  " WAIT "            ?type          ^  then
         dup 4 = if  drop  " FAULT "           ?type  -fault  ^  then
         dup 8 = if  drop  " Protocol error "  ?type          ^  then
            10 = if        " Value mismatch "  ?type          ^  then
                           " BOGUS return"     ?type          ^
   then  ( 0) ?led ;


: _DP.IDCODE            02 >x      ;
: _DP.CTRL    ( ctrl)   04 >x  >w  ;  ( NOTE: SELECT[0] must be 0)
: _DP.STAT              06 >x      ;  ( NOTE: SELECT[0] must be 0)
: _DP.SELECT  ( sel)    08 >x  >w  ;
: _DP.RESEND            0a >x      ;
: _DP.RDBUFF            0e >x      ;  ( NOTE: CMSIS firmware reads this for us!)


( Create a generic way to keep a "shadow" copy of a register value, and
| only update the real register if the new value is different from the old
| shadow value. The shadow value can be read using @, but it should only be
| changed via punch. Or should the word be called "box" - as in shadow
| boxing?)

: shadow   create  ( 'set-code initial)  ,  , ;
: punch  ( new-value 'body)
   push  r@ @  ( shadow)  over xor if  ( different)
      dup r@ !  pop cell+ @execute  ^
   then  pop  2drop ;


' _DP.SELECT -1  shadow select

: select!   ( sel - reg)  dup -10 and  select punch  0c and ;

( Adds a read or write of an AP register to a transfer.)
: AP.Rd  ( sel)               select!  3 +  >x     ;  ( set AP and RnW bit)
: _wr    ( w sel bits)  swap  select!    +  >x  >w ;
: AP.Wr  ( w sel)                      1    _wr    ;  ( set AP only)

: AP.Match  ( w sel)                  13    _wr    ;  ( Set AP, match, and RnW bits)
: AP.Mask   ( w sel)                  21    _wr    ;  ( Set AP and mask bits)

( Generates a transfer made up of a single read AP or write AP - possibly
| preceded by a SELECT.)

: AP.Read   ( sel - w)  <xfer  AP.Rd  xfer>  w> ;
: AP.Write  ( w sel)    <xfer  AP.Wr  xfer> ;


-- -----------------------------------------------------------------------
-- These are addresses that go into SELECT.
-- -----------------------------------------------------------------------
( AHB-AP registers)
0000_0000 constant AHB.CSW
0000_0004 constant AHB.TAR
(    0008 reserved)
0000_000c constant AHB.DRW  ( Access size depends on CSW.size bits)

( Bank registers. These always generate word-sized accesses,
| but require CSW.size bits to be set to word size.)

0000_0010 constant AHB.BD0  ( TAR and -10)
0000_0014 constant AHB.BD1  ( TAR and -10 + 4)
0000_0018 constant AHB.BD2  ( TAR and -10 + 8)
0000_001c constant AHB.BD3  ( TAR and -10 + 0c)

0000_00f8 constant AHB.ROM
0000_00fc constant AHB.IDR

( For KL25Z:)
( MDM-AP registers)
0100_0000 constant MDM.Status
0100_0004 constant MDM.Control
0100_00fc constant MDM.IDR

-- -----------------------------------------------------------------------
-- These are addresses in the chip's memory map.
-- -----------------------------------------------------------------------
( Defines for AHB.CSW)
comment %%hardwired%%
| 0 constant CSW.byte    ( memory bus transaction sizes)
| 1 constant CSW.hword
| 2 constant CSW.word
|
|  0 constant CSW.no-incr
| 10 constant CSW.single-incr
| 20 constant CSW.packed-incr  ( *not* supported on KL25Z!)
|
| 37 constant CSW.size-incr-mask
| %%hardwired%%


( Support for Kinetis - initially KL25 - Flash programming.)
4002_0000 constant FSTAT
4002_0004 constant FCMD     ( cmd:addr<23:0>)
4002_0008 constant FDATA0   ( varies)
4002_000c constant FDATA1   ( varies)

: _flashregs   FSTAT  AHB.TAR AP.Wr ;

( Even though we only need to write a byte, it's easier and causes way
| fewer transfers to write the whole word.)

: _fstat!  ( bits)    AHB.BD0 ( FSTAT) AP.Wr ;
: _fstat@  ( - bits)  AHB.BD0 ( FSTAT) AP.Rd ;

( Also: this does its own xfer.)
: fstat@  ( - bits)   AHB.BD0 ( FSTAT) AP.Read ;

: _fcmd!  ( addr cmd)
   #24 <<  +  AHB.BD1 ( FCMD) AP.Wr ;

: _fdata0!  ( w)  AHB.BD2 ( FDATA0)  AP.Wr ;
: _fdata1!  ( w)  AHB.BD3 ( FDATA1)  AP.Wr ;


( XXX To test flash programming.)
( NOTE!! In order to see the effects of programming it is best to _turn
| off_ the flash caching, by writing the DFCC bit - disable flash
| controller cache - bit 13 - in MCM_PLACR, at f000_300c. This code doesn't
| currently do this, which leads to mystifying results. The actions are
| successful, but the contents of the flash don't immediately reflect this.)

( Reading FSTAT right after erasing shows 00 - it takes longer than a
| single transfer to erase a block. But reading it in a second transfer
| yields 80 - in the few tests I've done. Of course it's best just to loop on
| the value and not assume that it had enough time to finish!)

: erase  ( addr - stat)
   <xfer  _flashregs  09 _fcmd!  80 _fstat!  xfer>
   fstat@ ;

( Reading FSTAT right after programming shows 80.)
: prog  ( w addr - stat)
   <xfer  _flashregs  06 _fcmd!  _fdata0!  70 _fstat!  80 _fstat!  _fstat@
   xfer>  w> ;


: _debugregs   DHCSR  AHB.TAR AP.Wr ;

( Add debug key to command bits and store into DHCSR.)
: _dhcsr!  ( value)  a05f_0000 +  AHB.BD0 AP.Wr ;
: _dhcsr@  ( - value)             AHB.BD0 AP.Rd ;

: dhcsr!   ( value)  <xfer  _debugregs  _dhcsr!  xfer> ;

: run    [ C_DEBUGEN C_MASKINTS +          #]  dhcsr! ;
: halt   [ C_DEBUGEN C_MASKINTS + C_HALT + #]  dhcsr! ;
: step   [ C_DEBUGEN C_MASKINTS + C_STEP + #]  dhcsr! ;

: halted?  ( - f)   <xfer  _debugregs  _dhcsr@  xfer> w>  S_HALT and ;

variable ahb.csw@reset  ( capture this value and use it for later xfers)

: _xfer-word        ahb.csw@reset @  02 or  AHB.CSW AP.Wr ;
: _xfer-word-incr   ahb.csw@reset @  12 or  AHB.CSW AP.Wr ;

( Delays.)
: us  ( #microsecs)  #1,000 *  0 swap nanosleep ;
: ms  ( #millisecs)  #1,000 *  us ;

( connect to device)
: dap.hello  ( - chunk-size)
   -- spy on  ( uncomment for more verbosity)
   led off
   DAP.Connect  00 DAP.SWD_Configure  DAP.Transfer_Configure
   DAP.Connect_Sequence
   <xfer  _DP.IDCODE  xfer>  w>  ( SW-DP IDCODE)
   -fault
   <xfer  0 _DP.SELECT  5000_0000 _DP.CTRL ( pwr up sys & dbg)  xfer>
   cr ."  SW-DP ID    AHB.IDR    AHB.CSW    MDM.IDR      CPUID"
   (     0000_0000  0000_0000  0000_0000  0000_0000  0000_0000 )
   cr  .h16_16__
   <xfer  AHB.IDR AP.Rd  xfer>  w>  .h16_16__
   <xfer  AHB.CSW AP.Rd  xfer>  w>  dup  3f bic  ahb.csw@reset !  .h16_16__
   <xfer  MDM.IDR AP.Rd  xfer>  w>  .h16_16__
   <xfer  _xfer-word
          CPUID AHB.TAR AP.Wr  AHB.DRW AP.Rd  xfer>  w>  .h16_16__
   cr
   1 3 << MDM.Control AP.Write  ( system reset request)
   halt
   1 2 << MDM.Control AP.Write  ( debug request)
   -- begin  MDM.Status AP.Read  [ 1 #16 << #] and  until
   begin  halted?  until
   0 MDM.Control AP.Write  ( release reset and debug requests)
   -- spy off
   100  ( 256 byte chunk size)
;


( When reading words from the target, we have to worry about the recv
| buffer filling up long before the xmit buffer does. It takes one byte to
| request a read from AHB.DRW; but this requires 4 bytes in the recv buffer.
| By sending lots of reads all at once we exceed the capacity of our recv
| buffer. So be much more careful: only read hex 14 words at a time.)

: xfer-read-buf  ( buf u - buf+4u 0)
   2 <<  2dup +  ( buf+4u)  -rot  ( buf+4u buf 4u)
   bp @  -rot  cmove  0 ;

: ?xfer-read-buf  ( buf u - buf' u')  ( after hex 14 words, start a new xfer)
   1+  #14 over = if  xfer>  xfer-read-buf  <xfer  then ;

: ?xfer-write  ( after hex 30 bytes, start a new xfer)
   30 #send u< if  xfer>  <xfer  then ;

( Another problem! The AHB.TAR register incrementer only affects the bottom
| bits - on the KL25, it wraps every 1 Ki - so only the low 10 bits are
| getting incremented! Thus we need to reset TAR every once in a while...
|
| Let's be conservative and reset AHB.TAR every 256 bytes.)

: ?tar  ( a - a+4)
   4 +  dup 0ff and  0= if  ( rolled over)  dup  AHB.TAR  AP.Wr  then ;

: xfer-setup  ( buf a u - a buf u)
   <xfer  over  AHB.TAR  AP.Wr  _xfer-word-incr
      rot swap ( a buf u) ;

: xfer-end  ( return AHB.CSW to xfer word, no incr)
   <xfer  _xfer-word  xfer> ;

: dap.read   ( buf a u)
   xfer-setup
      0 ( count)  swap  2 >> for  AHB.DRW  AP.Rd
         ?xfer-read-buf  rot ?tar -rot  next  xfer>
   xfer-read-buf
   xfer-end  2drop  drop ;

: dap.write  ( buf a u)
   xfer-setup
      2 >> for  dup 4 +  swap lew@  AHB.DRW  AP.Wr
         ?xfer-write    swap ?tar swap  next  xfer>
   xfer-end  2drop ;


( Instead of reading and writing all regs when we stop and start - a lot of
| slowish USB traffic - just read and write the regs we care about. We
| don't keep a local copy of regs.)

: readreg  ( regindex)
   <xfer  _debugregs
      AHB.BD1 ( DCRSR) AP.Wr  AHB.BD2 ( DCRDR) AP.Rd
   xfer> w> ;

: writereg  ( value regindex)
   <xfer  _debugregs
      swap  AHB.BD2 ( DCRDR) AP.Wr  1_0000 + AHB.BD1 ( DCRSR) AP.Wr
   xfer> ;


( Register indices for _readreg and _writereg:
|  0  R0
| ..  ..
| 12  R12
| 13  Current SP
| 14  Link register [LR]
| 15  DebugReturnAddress
| 16  xPSR
| 17  Main stack pointer, MSP
| 18  Process stack pointer, PSP
| 20  CONTROL.PRIMASK)

( The interface for the interact code. Implemented by all debug transports.)

( XXX Time out after a while?)
: dap.get-status  ( - sp pc)
   begin  halted?  until  #13 readreg  #15 readreg ;

: dap.run  ( pc sp)      #13 writereg  #15 writereg  run ;

( XXX Not yet implemented.)
: dap.flash-begin    chat-fail ;
: dap.flash-end      chat-fail ;
: dap.erase     ( a)  drop chat-fail ;
: dap.program   ( buf a u)  drop 2drop chat-fail ;

: jtag
   chat-via  dap.hello  dap.get-status  dap.run  dap.read  dap.write
   dap.flash-begin  dap.flash-end  dap.erase  dap.program ;


.ifdef debugdebug
( Hacks and such to test out the debug connection.)

( To and from byte lane(s)
: a>shift  ( a - #shifts)  3 and 8 * ;
: >lanes   ( data a - word)       a>shift << ;
:  lanes>  ( a word - data)  swap a>shift >> ;

: addr!  ( a - a)  -fault  <xfer  dup  AHB.TAR AP.Wr ;
: size!  ( size)         300_0000  or  AHB.CSW AP.Wr ;

: drw@   ( a - result)        AHB.DRW  AP.Rd  xfer>  w> lanes> ;
: drw!   ( data a)    >lanes  AHB.DRW  AP.Wr  xfer> ;

: rb  ( a - b)  ( read byte from target)   addr!  0 size!  drw@    0ff and ;
: rh  ( a - h)  ( read hword from target)  addr!  1 size!  drw@  0ffff and ;
: rw  ( a - w)  ( read word from target)   addr!  2 size!  drw@ ;

: wb  ( b a)  ( write byte to target)   addr!  0 size!  drw! ;
: wh  ( h a)  ( write hword to target)  addr!  1 size!  drw! ;
: ww  ( w a)  ( write word to target)   addr!  2 size!  drw! ;


: readreg  ( reg-index - value)
   <xfer  300_0002 AHB.CSW AP.Wr
          DHCSR AHB.TAR AP.Wr  AHB.BD1 ( DCRSR) AP.Wr
          1_0000 AHB.BD0 AP.Mask  1_0000 AHB.BD0 AP.Match
          AHB.BD2 ( DCRDR) AP.Rd  xfer>  w> ;

( XXX Hacks to see how long it takes the S_REGRDY bit to be set. In all my
| tests it gets set _immediately_.)

: reghack  ( reg-index - DHCSR reg-value)
   <xfer  300_0002 AHB.CSW AP.Wr
          DHCSR AHB.TAR AP.Wr  AHB.BD1 ( DCRSR) AP.Wr
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD2 ( DCRDR) AP.Rd  xfer>  w> w> w> w>  w> w> w> w>  w> ;

: wreghack  ( value reg-index - DHCSR * 8)
   <xfer  300_0002 AHB.CSW AP.Wr  DHCSR AHB.TAR AP.Wr
          swap  AHB.BD2 ( DCRDR) AP.Wr  ( write new register value)
          1_0000 + AHB.BD1 ( DCRSR) AP.Wr  ( write "command" to write reg)
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd  xfer>  w> w> w> w>  w> w> w> w> ;

: __readreg  ( reg# - reg#+1)
   dup  AHB.BD1 ( DCRSR) AP.Wr  1+  AHB.BD2 ( DCRDR) AP.Rd ;

: __writereg  ( buf reg# - buf+4 reg#+1)
   push  dup 4 +  swap lew@
   AHB.BD2 ( DCRDR) AP.Wr  r@ 1_0000 + AHB.BD1 ( DCRSR) AP.Wr
   pop 1+ ;

: getregs  ( buf)
   <xfer  _debugregs  xfer>

   0 ( reg#)  <xfer  8 for  __readreg  next  xfer>  push
   bp @  over  [ 8  2 << #]  cmove

         pop  <xfer  8 for  __readreg  next  xfer>  push
   bp @  over  [ 8  2 << #] +  [ 8  2 << #]  cmove

         pop  <xfer  5 for  __readreg  next  xfer>  drop
   bp @  swap  [ 10  2 << #] +  [ 5  2 << #]  cmove ;

: setregs  ( buf)
   <xfer  _debugregs  xfer>
   0 ( reg#)  5 for  <xfer   4 for  __writereg  next  xfer>  next
                     <xfer          __writereg  drop  xfer> ;

.then  ( debugdebug)

.then  ( ifdef uread)
