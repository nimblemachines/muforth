( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

ld target/common/endian.mu4

loading CMSIS-DAP support

-- Thanks are due to ARM for developing this open-source standard. The
-- specification and reference implementation (!) are at
-- https://silver.arm.com/browse/CMSISDAP. An account is necessary to
-- access this.

-- XXX Can multiple DAP commands be packed into a single USB packet (ie,
-- HID report)?

hex


comment CMSIS-DAP-commands

  I have left out a few that I don't think are that interesting - eg, those
  that concern talking to JTAG-DPs. The only interface this currently works
  with is the Freedom Board's OpenSDA CMSIS-DAP, which only supports the
  SW-DP (since the target chip, a Kinetis KL25Z, only _has_ an SW-DP).

  Numbers are in hex.

  DAP.LED
    > 01 xx yy        xx=00 for Connect, 01 for Running;
                      NOTE: only Connect implemented on Freedom board
                      yy=00 for off, 01 for on
    < 01 00

  DAP.Connect
    > 02 pp         pp=00 for default, 01 for SWD, 02 for JTAG
    < 02 pp         pp=00 failed, 01 SWD, 02 JTAG

  DAP.Disconnect
    > 03
    < 03 ss         ss=standard status: 00=ok, ff=failed

  DAP.Write_ABORT
    > 08 xx yy yy yy yy   xx=which device - ignored for SWD
                          yy=abort register word
    < 08 ss

  DAP.SWJ_Pins
    > 10 pp mm dd dd dd dd   pp=pin values to set
                             mm=mask - which pins to change
                             dd=delay in us
    Mapping for pp and mm:
       Bit 0: SWCLK/TCK
       Bit 1: SWDIO/TMS
       Bit 2: TDI
       Bit 3: TDO
       Bit 5: nTRST
       Bit 7: nRESET

    < 10 pp                  pp = pin values read from device

  DAP.SWJ_Sequence
    > 12 nn dd ..       nn = bit count 1 .. 256 (0 encodes 256)
                        dd = bit data, lsb first
    < 12 ss

  DAP.SWD_Configure
    > 13 cc     cc<1:0> = 00 1 cycle turnaround
                          01 2 cycles
                          10 3 cycles
                          11 4 cycles
                cc<2>   = DataPhase: 0 = do not generate on WAIT/FAULT
                                     1 = always generate on WAIT/FAULT
                                         for sticky overrun
    > 13 ss

  DAP.Transfer_Configure
    > 04 ii ww ww mm mm    ii = idle cycles after each transfer
                           ww = # retries after each WAIT response
                           mm = # retries for value match
    < 04 ss


  DAP.Transfer
    > 05 ii nn  rr dd dd dd dd  rr dd dd dd dd ..
                          ii = DAP index - ignored for SWD
                          nn = transfer count: 1 .. 255
                          rr = transfer request
                          dd = optional data (word)
                               transfer data or match value

    Requests have the following format:

       Bit 0: APnDP: 0 = Debug Port (DP), 1 = Access Port (AP).
       Bit 1: RnW: 0 = Write Register, 1 = Read Register.
       Bit 2: A2 Register Address bit 2.
       Bit 3: A3 Register Address bit 3.
       Bit 4: Value Match (only valid for Read Register):
              0 = Normal Read Register, 1 = Read Register with Value Match.
       Bit 5: Match Mask (only valid for Write Register):
              0 = Normal Write Register, 1 = Write Match Mask (instead of Register).

    < 05 nn rr  dd dd dd dd ..
                          nn = transfers executed: 1 .. 255
                          rr = last response from target
                          dd = data words received from target 

    Responses have the following format:

       Bit 2..0: ACK (Acknowledge): 1 = OK (OK/FAULT for JTAG), 2 = WAIT, 4 = FAULT.
       Bit 3: 1 = Protocol Error (SWD)
       Bit 4: 1 = Value Mismatch (Read Register with Value Match)

  DAP.Transfer_Block
    > 06 ii nn nn rr  dd dd dd dd .. 
                          ii = DAP index - ignored for SWD
                          nn = transfer count: 1 .. 65535
                          rr = transfer request

    Request has the following format:

       Bit 0: APnDP: 0 = DP (Debug Port), 1 = AP (Access Port)
       Bit 1: RnW: 0 = Write Register, 1 = Read Register
       Bit 2: A2 := Register Address bit 2
       Bit 3: A3 := Register Address bit 3

    < 06 nn nn rr  dd dd dd dd ..
                          nn = transfers executed: 1 .. 65535
                          rr = last response from target
                          dd = data words received from target 

    Response has the following format:

       Bit 2..0: ACK (Acknowledge): 1 = OK, OK/FAULT (JTAG), 2 = WAIT, 4 = FAULT
       Bit 3: Protocol Error (SWD)

  DAP.Transfer_Abort
    > 07
    No response, but aborted Transfer or Transfer_Block will respond with
    information about actually transferred data.

end CMSIS-DAP-commands


0d28 0204 hid-find-device  ( MBED CMSIS-DAP)  .if  constant cmsis  .else
c251 f002 hid-find-device  ( Keil CMSIS-DAP)  .if  constant cmsis  .else

   ." No supported USB devices found."

.then .then


.ifdef cmsis  ( ie, we matched one of the two devices above)

( Device found - load support)

: uread   ( buf len - #read)  cmsis  hid-read ;
: uwrite  ( buf len)          cmsis  hid-write ;

( A simple buffer for chatty communication protocols. Words for putting
  values into a buffer and taking them out again.)

.ifdef bigxfer  ( 8 buffers each way)

40 8 * buffer 'sendbuf
40 8 * buffer 'recvbuf

variable whichbuf  ( offset)

: sendbuf   whichbuf @  'sendbuf + ;
: recvbuf   whichbuf @  'recvbuf + ;

.else  ( single buffer)

40 buffer sendbuf
40 buffer recvbuf

.then

variable bp  ( buf pointer)
: !send  sendbuf  bp !  sendbuf 40 55 fill ;
: !recv  recvbuf  bp ! ;
: #send  bp @  sendbuf - ;
: +bp    1 bp +! ;

( XXX Note: this is different from how I named these in
  target/HC08/bdm-usb-host.m4. Change those as well?)

: >b  ( byte)    bp @  c!  +bp ;
: b>  ( - byte)  bp @  c@  +bp ;

( Little-endian 16-bit values. In the ARM world these are "halfwords".)
: >h  ( hword)    >hilo  >b >b ;
: h>  ( - hword)          b> b>  lohi> ;

( Little-endian 32-bit values. In the ARM world these are "words".)
: >w  ( word)    >3210  >b >b >b >b ;
: w>  ( - word)          b> b> b> b>  0123> ;

( 16-bit halfword and 32-bit word fetch and store. Little endian.)
: h@  ( addr - h)  leh@ ;
: h!  ( h addr)    leh! ;
: w@  ( addr - w)  lew@ ;
: w!  ( w addr)    lew! ;

( Whether to spy on traffic to DAP.)
variable spy

: ?type  spy @ if  type  ^  then  2drop ;
: .send
   radix preserve  hex
   cr  #send u.  ." # "
   sendbuf  #send for  c@+ swap u.  next  drop ;

: usend-recv  ( - r0 r1)  ( return first two bytes of response)
   spy @ if  .send  then
          sendbuf  40  uwrite
   !recv  recvbuf  40  uread  b> b>
   rot  spy @ if  ." # " u.  ^  then  drop ;

: <cmd  ( cmd)  !send  >b ;
:  cmd>   ( - r1)  sendbuf c@ ( cmd)  push  usend-recv
   swap pop  2dup xor if
   error" response didn't match command"  then 2drop ;

: check  ( r1)  if  error" DAP_ERROR response"  then ;

: DAP.LED  ( on/off)
   01 <cmd  00 >b  0= 1+ ( nonzero -> 0, zero -> 1)  >b  cmd> drop ;

: DAP.Connect
   02 <cmd  01 >b  cmd>  01 xor check ;

: DAP.SWD_Configure  ( config)
   13 <cmd  >b  cmd> check ;

( Send 56 1's then 8 0's.)
: DAP.Connect_Sequence
   12 <cmd  #64 >b  -1 >w  00ff_ffff >w  cmd> check ;

: DAP.Transfer_Configure
   04 <cmd  ( idle cycles) 04 >b  ( WAIT retries) 80 >h  ( match retries) 80 >h
   cmd> check ;


( Support for reading and writing basic DP and AP registers.)

( Unlike all other commands that access DP registers, DP.ABORT is
  self-contained. The other DP access words are intended for use inside of
  a "DAP.Transfer" operation - ie, bracketed by <xfer and xfer>.)

: DP.ABORT   ( abort)  08 <cmd   00 >b  >w     cmd> check ;
: -fault  -2 DP.ABORT ;  ( clear any faults)


( Whether to flash the "connect" LED for each transfer.)
variable led
: ?led  ( flag)
   led @ if  spy @ ( save)  spy off  swap DAP.LED  spy !  ^  then  drop ;

variable #xfers
: <xfer
   -1 ?led
   05 <cmd  00 ( DAP#) >b  00 ( count placeholder) >b  #xfers off ;

: >x  ( xfer)  ( add transfer to sequence)  >b  1 #xfers +! ;

:  xfer>
   #xfers @  =if  ( do nothing if no xfers queued up)
      sendbuf 2 + c!  cmd>
      0 ?led
      #xfers @  xor if  ." transactions not completed "  then
      b> dup 1 = if  drop  " OK "              ?type          ^  then
         dup 2 = if  drop  " WAIT "            ?type          ^  then
         dup 4 = if  drop  " FAULT "           ?type  -fault  ^  then
         dup 8 = if  drop  " Protocol error "  ?type          ^  then
            10 = if        " Value mismatch "  ?type          ^  then
                           " BOGUS return"     ?type          ^
   then  ( 0) ?led ;


: _DP.IDCODE            02 >x      ;
: _DP.CTRL    ( ctrl)   04 >x  >w  ;  ( NOTE: SELECT[0] must be 0)
: _DP.STAT              06 >x      ;  ( NOTE: SELECT[0] must be 0)
: _DP.SELECT  ( sel)    08 >x  >w  ;
: _DP.RESEND            0a >x      ;
: _DP.RDBUFF            0e >x      ;  ( NOTE: CMSIS firmware reads this for us!)


( Create a generic way to keep a "shadow" copy of a register value, and
  only update the real register if the new value is different from the old
  shadow value. The shadow value can be read using @, but it should only be
  changed via punch. Or should the word be called "box" - as in shadow
  boxing?)

: shadow   create  ( 'set-code initial)  ,  , ;
: punch  ( new-value 'body)
   push  r@ @  ( shadow)  over xor if  ( different)
      dup r@ !  pop cell+ @execute  ^
   then  pop  2drop ;


' _DP.SELECT -1  shadow select

: select!   ( sel - reg)  dup -10 and  select punch  0c and ;

( Adds a read or write of an AP register to a transfer.)
: AP.Rd  ( sel)               select!  3 +  >x     ;  ( set AP and RnW bit)
: _wr    ( w sel bits)  swap  select!    +  >x  >w ;
: AP.Wr  ( w sel)                      1    _wr    ;  ( set AP only)

: AP.Match  ( w sel)                  13    _wr    ;  ( Set AP, match, and RnW bits)
: AP.Mask   ( w sel)                  21    _wr    ;  ( Set AP and mask bits)

( Generates a transfer made up of a single read AP or write AP - possibly
  preceded by a SELECT.)

: AP.Read   ( sel - w)  <xfer  AP.Rd  xfer>  w> ;
: AP.Write  ( w sel)    <xfer  AP.Wr  xfer> ;


-- -----------------------------------------------------------------------
-- These are addresses that go into SELECT.
-- -----------------------------------------------------------------------
( AHB-AP registers)
0000_0000 constant AHB.CSW
0000_0004 constant AHB.TAR
(    0008 reserved)
0000_000c constant AHB.DRW  ( Access size depends on CSW.size bits)

( Bank registers. These always generates word-sized accesses, 
  but require CSW.size bits to be set to word size.)

0000_0010 constant AHB.BD0  ( TAR and -10)
0000_0014 constant AHB.BD1  ( TAR and -10 + 4)
0000_0018 constant AHB.BD2  ( TAR and -10 + 8)
0000_001c constant AHB.BD3  ( TAR and -10 + 0c)

0000_00f8 constant AHB.ROM
0000_00fc constant AHB.IDR

( For KL25Z:)
( MDM-AP registers)
0100_0000 constant MDM.Status
0100_0004 constant MDM.Control
0100_00fc constant MDM.IDR

-- -----------------------------------------------------------------------
-- These are addresses in the chip's memory map.
-- -----------------------------------------------------------------------
( SCB - system control block - registers)
e000_ed00 constant CPUID
e000_ed08 constant VTOR    ( vector table offset register)

( SCS debug registers)
( These are documented starting on p285 of the ARMv6-M architecture manual.)
e000_edf0 constant DHCSR  ( debug halting control/status reg)
e000_edf4 constant DCRSR  ( debug core register selector reg)
e000_edf8 constant DCRDR  ( debug core register data reg)
e000_edfc constant DEMCR  ( debug exception and monitor ctrl reg)

( Defines for DHCSR)
1 #19 << constant S_LOCKUP
1 #18 << constant S_SLEEP
1 #17 << constant S_HALT
1 #16 << constant S_REGRDY

1  #3 << constant C_MASKINTS
1  #2 << constant C_STEP
1  #1 << constant C_HALT
1  #0 << constant C_DEBUGEN

( Defines for AHB.CSW)
comment %%hardwired%%
0 constant CSW.byte    ( memory bus transaction sizes)
1 constant CSW.hword
2 constant CSW.word

 0 constant CSW.no-incr
10 constant CSW.single-incr
20 constant CSW.packed-incr  ( *not* supported on KL25Z!)

37 constant CSW.size-incr-mask
%%hardwired%%


( Support for Kinetis - initially KL25 - Flash programming.)
4002_0000 constant FSTAT
4002_0004 constant FCMD     ( cmd:addr<23:0>)
4002_0008 constant FDATA0   ( varies)
4002_000c constant FDATA1   ( varies)

: _flashregs
   300_0002 AHB.CSW AP.Wr  FSTAT AHB.TAR AP.Wr ;

( Even though we only need to write a byte, it's easier and causes way
  fewer transfers to write the whole word.)

: _fstat!  ( bits)    AHB.BD0 ( FSTAT) AP.Wr ;
: _fstat@  ( - bits)  AHB.BD0 ( FSTAT) AP.Rd ;

( NOTE: must have done _fstat! before to set CSW properly.)
( Also: this does its own xfer.)
: fstat@  ( - bits)   AHB.BD0 ( FSTAT) AP.Read ;

: _fcmd!  ( addr cmd)
   #24 <<  +  AHB.BD1 ( FCMD) AP.Wr ;

: _fdata0!  ( w)  AHB.BD2 ( FDATA0)  AP.Wr ;
: _fdata1!  ( w)  AHB.BD3 ( FDATA1)  AP.Wr ;


( XXX To test flash programming.)
( NOTE!! In order to see the effects of programming it is best to _turn
  off_ the flash caching, by writing the DFCC bit - disable flash
  controller cache - bit 13 - in MCM_PLACR, at f000_300c. This code doesn't
  currently do this, which leads to mystifying results. The actions are
  successful, but the contents of the flash don't immediately reflect this.)

( Reading FSTAT right after erasing shows 00 - it takes longer than a
  single transfer to erase a block. But reading it in a second transfer
  yields 80 - in the few tests I've done. Of course it's best just to loop on
  the value and not assume that it had enough time to finish!)

: erase  ( addr - stat)
   <xfer  _flashregs  09 _fcmd!  80 _fstat!  xfer>
   fstat@ ;

( Reading FSTAT right after programming shows 80.)
: prog  ( w addr - stat)
   <xfer  _flashregs  06 _fcmd!  _fdata0!  70 _fstat!  80 _fstat!  _fstat@
   xfer>  w> ;


: _debugregs
   300_0002 AHB.CSW AP.Wr  DHCSR AHB.TAR AP.Wr ;

: _dhcsr@  AHB.DRW AP.Rd ;

( Add debug key to command bits and store into DHCSR.)
: _dhcsr!  ( value)  a05f_0000 +  AHB.DRW AP.Wr ;

: _run    [ C_DEBUGEN C_MASKINTS +          ]  _dhcsr! ;
: _halt   [ C_DEBUGEN C_MASKINTS + C_HALT + ]  _dhcsr! ;
: _step   [ C_DEBUGEN C_MASKINTS + C_STEP + ]  _dhcsr! ;

: dhcsr!   ( value)  <xfer  _debugregs  _dhcsr!  xfer> ;

: run    [ C_DEBUGEN C_MASKINTS +          ]  dhcsr! ;
: halt   [ C_DEBUGEN C_MASKINTS + C_HALT + ]  dhcsr! ;
: step   [ C_DEBUGEN C_MASKINTS + C_STEP + ]  dhcsr! ;


( Have to have set _debugregs already.)
: _halted?  ( - f)   <xfer  _dhcsr@  xfer> w>  S_HALT and ;

: dap.hello  ( connect to device)
   -- spy on  ( uncomment for more verbosity)
   led off
   DAP.Connect  00 DAP.SWD_Configure  DAP.Transfer_Configure
   DAP.Connect_Sequence
   <xfer  _DP.IDCODE  xfer>  w>  ( SW-DP IDCODE)
   -fault
   <xfer  0 _DP.SELECT  5000_0000 _DP.CTRL ( pwr up sys & dbg)  xfer>
   cr ."  SW-DP ID    AHB.IDR    AHB.CSW    MDM.IDR      CPUID"
   (     0000_0000  0000_0000  0000_0000  0000_0000  0000_0000 )
   cr  .h16_16__
   <xfer  AHB.IDR AP.Rd  xfer>  w>  .h16_16__
   <xfer  AHB.CSW AP.Rd  xfer>  w>  .h16_16__
   <xfer  MDM.IDR AP.Rd  xfer>  w>  .h16_16__
   <xfer  CPUID AHB.TAR AP.Wr  AHB.DRW AP.Rd  xfer>  w>  .h16_16__
   cr
   halt
   begin  _halted?  until
   spy off
;

( Instead of reading and writing all regs when we stop and start - a lot of
  slowish USB traffic - just read and write the regs we care about. We
  don't keep a local copy of regs.)

: _readreg  ( regindex)
   AHB.BD1 ( DCRSR) AP.Wr  AHB.BD2 ( DCRDR) AP.Rd ;

: _writereg  ( value regindex)
   swap  AHB.BD2 ( DCRDR) AP.Wr  1_0000 + AHB.BD1 ( DCRSR) AP.Wr ;


: ?xfer-read-words  ( u - u')  ( after 38 bytes, start a new xfer)
   1+  38 #send u< if  xfer>  for  w>  next  0 ( count)  <xfer  then ;

( Keeping this till I decide...)
: bogus.getregs_lohi  ( regmask - v0 v1 ...)   ( low to high)
   <xfer  _debugregs  0 0 rot ( regcount regindex regmask)
      begin  dup 1 and if  over _readreg  2push  ?xfer-read-words  2pop  then
      1 u+  u2/  dup 0= until
   xfer>
   2drop  for  w>  next ;  ( read remaining regs from recvbuf)

( This version "interoperates" better with t.setregs.)
: bogus.getregs  ( regmask - ... v1 v0)   ( high to low)
   <xfer  _debugregs  0 14 rot ( regcount regindex regmask)
      [ 3f 14 - ] <<  ( "left justify" regmask)
      begin  dup 0< if  over _readreg  2push  ?xfer-read-words  2pop  then
      -1 u+  2*  dup 0= until
   xfer>
   2drop  for  w>  next ;  ( read remaining regs from recvbuf)


: ?xfer-write  ( after 30 bytes, start a new xfer)
   30 #send u< if  xfer>  <xfer  then ;

: bogus.setregs  ( ... v1 v0 regmask)  ( high to low)
   <xfer  _debugregs  0 swap ( regindex regmask)
      begin  dup 1 and if  push  tuck _writereg  ?xfer-write  pop  then
      1 u+  u2/  dup 0= until
   xfer>
   2drop ;


: xfer-read-buf  ( buf u - buf+4u 0)
   2 <<  2dup +  ( buf+4u)  -rot  ( buf+4u buf 4u)
   bp @  -rot  cmove  0 ;

( Unlike with register transfers, we have to worry about the recv buffer
  filling up long before the xmit buffer does. It takes one byte to request
  a read from AHB.DRW; but this requires 4 bytes in the recv buffer. By
  sending lots of reads all at once we exceed the capacity of our recv
  buffer. So be much more careful: only read 14 words at a time.)

( Another problem! The AHB.TAR register incrementer only affects the bottom
  bits - on the KL25, it wraps every 1 Ki - so only the low 10 bits are
  getting incremented! Thus we need to reset TAR every once in a while...)

: ?xfer-read-buf  ( buf u - buf' u')  ( after 14 words, start a new xfer)
   1+  #14 over = if  xfer>  xfer-read-buf  <xfer  then ;

( Let's be conservative and reset AHB.TAR every 256 bytes.)
: ?tar  ( a - a+4)
   4 +  dup 0ff and  0= if  ( rolled over)  dup  AHB.TAR  AP.Wr  then ;

: xfer-setup  ( buf a u - a buf u)
   <xfer  over  AHB.TAR  AP.Wr  300_0012  AHB.CSW  AP.Wr
      rot swap ( a buf u) ;

: dap.read   ( buf a u)
   xfer-setup
      0 ( count)  swap  2 >> for  AHB.DRW  AP.Rd
         ?xfer-read-buf  rot ?tar -rot  next  xfer>
   xfer-read-buf  2drop  drop ;

: dap.write  ( buf a u)
   xfer-setup
      2 >> for  dup 4 +  swap lew@  AHB.DRW  AP.Wr
         ?xfer-write    swap ?tar swap  next  xfer>
   2drop ;


.ifdef bigxfer

( NOTE!!

  This code _almost_ works! It fails to read the target memory properly,
  because it is using the count of xfers as a _read count_, but the xfer
  count includes such things as setting AHB.CSW and AHB.TAR. So it ends up
  being wrong.

  Also, reading 128 KiB and then doing anything else seg faults, so the
  code is trampling on the muforth heap somewhere.

  And, worst of all, all this complexity brings the time to read 128 KiB
  down from 12s to 6.6s. It's just not worth it in any case. Too bad. It was
  fun to try!)

( Support for "big xfers" - ie, using a chain of 64-byte HID buffers
  instead of one at a time. For moving lots of memory, the overhead of
  calling into the OS for each 64 byte buffer, and the USB turnaround
  overhead is just too high. It took 12 secs to move 128 KiB using a single
  buffer.

  So we're trying an experiment. It's a bit more complicated, but it's also
  a fun challenge. ;-)

: ?usbread  ( count)
   40 xor if  ." USB read too short "  then ;

: bigsend-recv  ( - #bufs)
   whichbuf @  6 >>  push  whichbuf off
   'sendbuf r@  for  dup 40 uwrite            40 +  next  drop
   'recvbuf r@  for  dup 40 uread   ?usbread  40 +  next  drop
   pop ;

: check-subxfer
   !recv
   sendbuf     c@ ( cmd)     b>  xor if  ." ?cmd "  then
   sendbuf 2 + c@ ( #xfers)  b>  xor if  ." transactions not completed "  then
   b> dup 1 = if  drop  ( " OK "              ?type  )        ^  then
      dup 2 = if  drop  " WAIT "            ?type          ^  then
      dup 4 = if  drop  " FAULT "           ?type  -fault  ^  then
      dup 8 = if  drop  " Protocol error "  ?type          ^  then
         10 = if        " Value mismatch "  ?type          ^  then
                        " BOGUS return"     ?type          ;

: check-bigxfer  ( #bufs)
   for  check-subxfer  40 whichbuf +!  next
   whichbuf off ;

: do-bigxfer  ( - #bufs)
   bigsend-recv  ( #bufs)  dup check-bigxfer ;

: subxfer>  ( - #bufs)  ( end prev sub-xfer, start new sub-xfer)
   #xfers @  =if  ( do nothing if no xfers queued up)
      sendbuf 2 + c!  40 whichbuf +!
      whichbuf @  [ 40 10 * ] = if ( big buffer full)  do-bigxfer  ^  then
   0  ^
   then  ( 0) ;

( Just like <xfer but doesn't toggle led.)
: <subxfer
   05 <cmd  00 ( DAP#) >b  00 ( count placeholder) >b  #xfers off ;

: <bigxfer   whichbuf off  <subxfer ;
:  bigxfer>  ( - #bufs)
   subxfer>  0= if  whichbuf @  if  do-bigxfer  ^  then  then  0 ;

: ?bigxfer-write  ( after 30 bytes, start a new xfer)
   30 #send u< if  subxfer>  drop  <subxfer  then ;

: read-subxfer  ( destbuf - destbuf')
   recvbuf 1+ c@ ( #xfers)
   2 <<  2dup +  ( buf+4u)  -rot  ( buf+4u buf 4u)
   recvbuf 3 +  -rot  cmove ;

: bigxfer-read   ( buf u #bufs - buf' 0)
   nip  =if
      for  read-subxfer  40 whichbuf +!  next
      whichbuf off  0  ^
   then  ( 0) ;

: ?bigxfer-read   ( buf u - buf' u')  ( after 14 words, start a new subxfer)
   1+  #14 over = if  subxfer>  bigxfer-read  <subxfer  then ;

: bigxfer-setup  ( buf a u - a buf u)
   <bigxfer
      over  AHB.TAR  AP.Wr  300_0012  AHB.CSW  AP.Wr
      rot swap ( a buf u) ;

: dap.bigread   ( buf a u)
   bigxfer-setup  ( a buf u)
      0 ( count)  swap  2 >> for  AHB.DRW  AP.Rd
         ?bigxfer-read  rot ?tar -rot  next  bigxfer>
   bigxfer-read
   2drop  drop ;

: dap.bigwrite  ( buf a u)
   bigxfer-setup  ( a buf u)
      2 >> for  dup 4 +  swap lew@  AHB.DRW  AP.Wr
         ?bigxfer-write  swap ?tar swap  next  bigxfer>
   drop ( #bufs)  2drop ;

.then  ( bigxfer)


( XXX The following is mostly intended for debugging the debugger. ;-)

( To and from byte lane(s)
: a>shift  ( a - #shifts)  3 and 8 * ;
: >lanes   ( data a - word)       a>shift << ;
:  lanes>  ( a word - data)  swap a>shift >> ;

: addr!  ( a - a)  -fault  <xfer  dup  AHB.TAR AP.Wr ;
: size!  ( size)         300_0000  or  AHB.CSW AP.Wr ;

: drw@   ( a - result)        AHB.DRW  AP.Rd  xfer>  w> lanes> ;
: drw!   ( data a)    >lanes  AHB.DRW  AP.Wr  xfer> ;

: rb  ( a - b)  ( read byte from target)   addr!  0 size!  drw@    0ff and ;
: rh  ( a - h)  ( read hword from target)  addr!  1 size!  drw@  0ffff and ;
: rw  ( a - w)  ( read word from target)   addr!  2 size!  drw@ ;

: wb  ( b a)  ( write byte to target)   addr!  0 size!  drw! ;
: wh  ( h a)  ( write hword to target)  addr!  1 size!  drw! ;
: ww  ( w a)  ( write word to target)   addr!  2 size!  drw! ;


.ifdef debugdebug
( Hacks and such to test out the debug connection.)

: readreg  ( reg-index - value)
   <xfer  300_0002 AHB.CSW AP.Wr
          DHCSR AHB.TAR AP.Wr  AHB.BD1 ( DCRSR) AP.Wr
          1_0000 AHB.BD0 AP.Mask  1_0000 AHB.BD0 AP.Match
          AHB.BD2 ( DCRDR) AP.Rd  xfer>  w> ;

( XXX Hacks to see how long it takes the S_REGRDY bit to be set. In all my
  tests it gets set _immediately_.)

: reghack  ( reg-index - DHCSR reg-value)
   <xfer  300_0002 AHB.CSW AP.Wr
          DHCSR AHB.TAR AP.Wr  AHB.BD1 ( DCRSR) AP.Wr
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD2 ( DCRDR) AP.Rd  xfer>  w> w> w> w>  w> w> w> w>  w> ;

: wreghack  ( value reg-index - DHCSR * 8)
   <xfer  300_0002 AHB.CSW AP.Wr  DHCSR AHB.TAR AP.Wr
          swap  AHB.BD2 ( DCRDR) AP.Wr  ( write new register value)
          1_0000 + AHB.BD1 ( DCRSR) AP.Wr  ( write "command" to write reg)
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd
          AHB.BD0 ( DHCSR) AP.Rd  xfer>  w> w> w> w>  w> w> w> w> ;

: __readreg  ( reg# - reg#+1)
   dup  AHB.BD1 ( DCRSR) AP.Wr  1+  AHB.BD2 ( DCRDR) AP.Rd ;

: __writereg  ( buf reg# - buf+4 reg#+1)
   push  dup 4 +  swap lew@
   AHB.BD2 ( DCRDR) AP.Wr  r@ 1_0000 + AHB.BD1 ( DCRSR) AP.Wr
   pop 1+ ;

: getregs  ( buf)
   <xfer  _debugregs  xfer>

   0 ( reg#)  <xfer  8 for  __readreg  next  xfer>  push
   bp @  over  [ 8  2 << ]  cmove

         pop  <xfer  8 for  __readreg  next  xfer>  push
   bp @  over  [ 8  2 << ] +  [ 8  2 << ]  cmove

         pop  <xfer  5 for  __readreg  next  xfer>  drop
   bp @  swap  [ 10  2 << ] +  [ 5  2 << ]  cmove ;

: setregs  ( buf)
   <xfer  _debugregs  xfer>
   0 ( reg#)  5 for  <xfer   4 for  __writereg  next  xfer>  next
                     <xfer          __writereg  drop  xfer> ;

.then  ( debugdebug)

( Register indices for _readreg and _writereg:
   0  R0
  ..  ..
  12  R12
  13  Current SP
  14  Link register [LR]
  15  DebugReturnAddress
  16  xPSR
  17  Main stack pointer, MSP
  18  Process stack pointer, PSP
  20  CONTROL.PRIMASK)

( XXX Time out after a while?)
: dap.get-sp  ( - sp)
   <xfer  _debugregs  xfer>
   begin  _halted?  until
   <xfer  #13 _readreg  xfer> w> ;

: dap.set-sp  ( sp)
   <xfer  _debugregs  #13 _writereg  xfer> ;

: get-pc  ( - pc)
   <xfer  _debugregs  #15 _readreg  xfer> w> ;

: dap.run  ( pc)
   <xfer  _debugregs  #15 _writereg  _run  xfer> ;

( The interface for the interact code. Implemented by all debug transports.)

: jtag
   chat-via  dap.hello  dap.get-sp  dap.set-sp  dap.read  dap.write  dap.run ;

.then  ( ifdef cmsis)
