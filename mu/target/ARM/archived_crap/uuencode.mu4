( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( uuencode.mu4 - uuencode the image for download to ARM AEB-1, or NXP LPC via
  serial bootloader.)

( 2002-mar-29. Converted to muForth.)

( 17-may-2000. Created, after studying GNU sharutils source for uuencode
  and uudecode.)

( Encodes 3 chars of 8 bits - 24 bits - into 4 chars of 6 bits.)

loading UUencode

( 1 line of chars: 45 input bytes -> 60 output bytes, plus count)
64 buffer uubuf
variable uu
: uuclean   uubuf  uu ! ;
: uuflush   uubuf  uu @  over - type ;
: uu,       255 and  dup uucheck +!  uu @  c!  1 uu +! ;

.ifdef aeb1
: uu1encode   63 and  bl + ;  ( XXX: encodes 0 as 32, not as 96 `)
: uucr   #LF emit ;
.else  ( NXP LPC?)
: uu1encode   63 and  dup 0= if  64 +  then  bl +  ;  ( encodes 0 as ` )
: uucr   #CR emit  #LF emit ;
.then

: uu1encode,   uu1encode  uu, ;


( Each letter represents 2 bits; so aaaa is a byte; colons separate chars
  as they will be sent out, in groups of 6 bits.)

: uupeel6   ( aaa:bbb:ccc:ddd - aaa:bbb:ccc:ddd aaa:bbb:ccc)  dup  6 u>> ;

( Encode 3 bytes into 4 characters.)
: uu3encode,
   uupeel6  uupeel6  uupeel6
   uu1encode,  uu1encode,  uu1encode,  uu1encode, ;

: 8b@   ( a n - a+1 n')  8 <<  push  c@+ swap  pop  + ;

( high to low:  c0:c1:c2)
: uu3   ( a - a+3)  0  8b@  8b@  8b@   ( aaa:abb:bbc:ccc)  uu3encode, ;
: uu2   ( a - a+2)  0  8b@  8b@  8 <<  ( aaa:abb:bb0:000)  uu3encode, ;
: uu1   ( a - a+1)  0  8b@      16 <<  ( aaa:a00:000:000)  uu3encode, ;


: uuleft  ( a 0|1|2 - a+)  jump  nope  uu1  uu2 ;
: uueline  ( a n - a+n)
   uuclean
   dup uu1encode, ( count)
   3 /mod  ( r q)  swap push  ?for  uu3  next  then  pop uuleft
   uuflush ;

: uueimage  ( a len)
   45 /mod  ( r q)  swap push  ?for  45 uueline uucr  next   then
                              pop  =if  uueline uucr  0      then  2drop ;

.ifdef aeb1
: uu(  uucr  ." begin 600 image"  uucr ;
: )uu  0 uu1encode emit  uucr  ." end"  uucr ;
: uue  uu(  uueimage  )uu ;
.then


( Tests)

0 .if

: tt  z" /tmp/aeb.uue" create-file  dup writes
   z" ../../ARM/AEB-1/Revc1.bin" r/o open-file dup mmap-file  ( a #)  uu
    close-file ( aeb.uue)  close-file     >stdout ;

( 'image #image)  "40000000 "b4000  uu  close drop

>stdout  (  jiffies  swap-  .  ." jiffies "  0  bye)

.then
