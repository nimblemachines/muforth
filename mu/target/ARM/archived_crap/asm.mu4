( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( ARM assembler!  daf  23 jul 1998)

loading Assembler

( This is an assembler for the ARM7 series of processors. Right now it has
  pretty complete coverage for ARM7 and ARM7DI - the core in the Sharp
  LH77790 on ARM's AEB-1 board. A few things are missing from this file and
  from the disassembler for full coverage of the TDMI extensions.)

( 2002-mar-29. Converting to my new Forth, muForth.)

( 2001-feb-02. Another change of heart. Things should be like Forth.
  Instructions read left to right, and two instructions - MRC/MCR and
  MRS/MSR - have been renamed, to MVC and MVS resp.)

( 13-apr-1999. Change of heart. Decided that, with some instructions re-
  quiring millions of operands, the order should be EXACTLY THE SAME,
  left-to-right, as in the ARM assembler. Otherwise everyone will go
  insane. This means that MRC, MCR and MRS, MSR make [some] sense again.)

( 6-apr-1999. Merged a bunch of stuff from the v25/8086 assembler.)

( 15-sep-1998.  -from a86-
  Target words, when executed [we only ever want to do this in the assember]
  push the first word of their body.  This is generally the ram address of
  their contents -- useful for USER and regular variables, and tasks.)

( Global comments.  Each instruction has a slightly different order for the
  registers. This follows the in ARM's definitions. I'm keeping mine the
  same way just in case -I- ever have to program using ARM's assembler, but
  I'm not happy about it.)

forth hex

( Error.)
: oops    error" : bogus operand"  -;

( Some types that automatically XOR in a bitfield.)
: ^bits  create  ( mask)  does>  ( n op mask)  rot and  xor  ;

( Some words to set and clear bits.)
: 1bits  create  does>  or   ;
: 0bits  create  does>  bic  ;

( Access to last compiled instruction.)
: |code  ( a)  |here cell-  |+  ;


( Conditions, S-bit.)
variable cond   ( current conditional)
: icond   create #28 <<   does> cond ! ;

assembler
 00 icond eq
 01 icond ne

 02 icond cs   02 icond hs  02 icond u>=
 03 icond cc   03 icond lo  03 icond u<

 04 icond mi   04 icond 0<
 05 icond pl   05 icond 0>=

 06 icond vs
 07 icond vc

 08 icond hi   08 icond u>
 09 icond ls   09 icond u<=

 0a icond ge   0a icond >=
 0b icond lt   0b icond <

 0c icond gt   0c icond >
 0d icond le   0d icond <=
 0e icond always   ( 0f = never, but is RESERVED TO ARM.)

forth
: op,   cond @  xor  |,  \a always ;

00100000 1bits S

assembler
: s  |code @  S  |code !  ;
forth

( set Immediate bit)
02000000 constant I
02000fff ^bits ^imm   ( # op - op')

( Operand types.)

( We need several different types to differentiate among the operands of
  data processing instructions. Since we're using address offsets in the
  range -4096..4095 directly, types 0 and f are implicitly taken. So, we
  start with 1.)

: >type  ( n - type)  #28 lshift  ;
: >cond  >type ;  ( change this if types change)
: type!   ( n)  create  does>  ( n body - n')  xor  ;
: type?   ( n)  create
   does>  ( type body - f)  swap [ 0f >type ]  and   =  ;

0 >type      type? typeless?   ( ?? doesn't work if 0< - problem?)
1 >type dup  type? reg?       type! reg_t
2 >type dup  type? #?   I or  type! imm_t
3 >type dup  type? -#?  I or  type! -imm_t
4 >type dup  type? shift?     type! shift_t
5 >type dup  type? index?     type! index_t
6 >type dup  type? range?     type! range_t


comment %deprecated%
( 2001-feb-03. Better way to do conditionals.)
( S-bit:  set condition codes)
: icond   >cond  0a000000 xor  constant ;  ( make a conditional branch)

( condition codes - these are actually conditional branch instructions)
( and are the -inverse- of what it seems they should be - we want to branch
  on false)
01 icond 0=   03 icond cs   02 icond u<   05 icond 0<   ( 07 icond vs)
09 icond u>   0a icond <   0d icond >  0e icond false ( always)
: not  [ 1 >cond ] xor ;

  ( mask the branch instruction bits)
: |if   [ 0f >cond ]  and  cond ! ;
: |else   cond @  \a not  cond ! ;
: |then   \a false  \a |if ;
forth
 %deprecated%

0 .if
: xreg   create  does> ( reg op shift)  rot  0f and  swap  lshift  xor  ;
  0 xreg Rm
  8 xreg Rs
#12 xreg Rd
#16 xreg Rn
.then

0000f ^bits Rm   ( 2nd operand register; multiplicand)
00f00 ^bits Rs   ( shift amount reg; multiplier)
0f000 ^bits Rd   ( destination)
f0000 ^bits Rn   ( 1st operand)

( Registers. Type reg_t.)
: reg  ( n)  11101 *  reg_t  constant ;

assembler

 00 reg r0   01 reg r1   02 reg r2   03 reg r3
 04 reg r4   05 reg r5   06 reg r6   07 reg r7
 08 reg r8   09 reg r9   0a reg r10  0b reg r11
 0c reg r12  0d reg r13  0e reg r14  0f reg r15

( ARM procedure call standard regs:)
 00 reg a1   01 reg a2   02 reg a3   03 reg a4
 04 reg v1   05 reg v2   06 reg v3   07 reg v4  08 reg v5
 09 reg v6   0a reg v7
 09 reg sb   0a reg sl   0b reg fp   0c reg ip   0d reg sp
 0e reg lr   0f reg pc

( Coprocessor registers.)
 00 reg c0   01 reg c1   02 reg c2   03 reg c3
 04 reg c4   05 reg c5   06 reg c6   07 reg c7
 08 reg c8   09 reg c9   0a reg c10  0b reg c11
 0c reg c12  0d reg c13  0e reg c14  0f reg c15

forth


( Immediate. Types imm_t and -imm_t.  The word `#' converts its
  operand, as much as possible, into bits that can be OR'ed into an
  instruction. The complication is that sometimes we can use the inverted
  value, and sometimes not. If the value was inverted, it takes type
  -imm_t; otherwise imm_t.)

: RORable?  ( n - #ror<<8+imm t | n f)
   #16 for  dup 100 u<  if  10 pop -  8 lshift +  -1 ^  then
   #30 rotate  next  0 ;  ( rotate goes RIGHT; #30 rotate goes 2 LEFT)

assembler
( ?? is this factored usefully for meta compiler?)
: #  ( n - #)
   RORable? if   imm_t ^  then  invert
   RORable? if  -imm_t ^  then  oops ;

forth

( Shift type. Type shift_t. As with the immediate types above, we try to
  convert the operand into bits of an instruction.  Bit 4 is set on a
  register-specified shift.

  Actual opcodes available for shifting are  LSL, LSR, ASR, ROR, with
  a few special cases:
                  LSR #0 encodes LSR #32.
                  ASR #0 encodes ASR #32.
                  ROR #0 encodes RRX.
  So only LSL #0 means what it says.

  Thus: LSR #0, ASR #0, and ROR #0, if specified in the application code,
  -should- be converted to LSL #0. This is what ARM's assembler does. We're
  not going to bother, as it creates unnecessary hassle and disallows our
  clever representation of RRX as 0 ror. So be careful!

  Since registers and shift counts can't be confused - unless someone wants
  an incredibly huge shift like 10000004 - we're dropping the `#' after the
  number. Less typing this way. Actually putting in the `#' is harmless and
  still works.)

: shift  ( n)  create  5 lshift  shift_t
   does>  ( n shift | Rs shift - shift)
   over reg? if  Rs 10  xor  ^ then
   swap  1f and ( 5 bits)  7 lshift  xor  ;

ff0 ^bits ^shift  ( shift op - op')

assembler
00 shift lsl   01 shift lsr   02 shift asr   03 shift ror
00 shift asl
( assemble  00 ror  c;  constant rrx)
: rrx   0 \a ror  ;

forth


( NOTE: For the hell of it, I'm defining the instructions in the order that
  they show up in my ARM710 datasheet. It gives me a challenge - I can't do
  the easy ones first, except for ...)

( B, BL -- easy)
: |pc-  ( to from - offset)   8 + ( compensate for prefetch)  - ;
: >branch-offset  ( dest - bits)   |pc-  cell/  00ffffff and ;

assembler
: b   ( dest)  |here >branch-offset  0a000000 xor  op,  ;
: bl  ( dest)  |here >branch-offset  0b000000 xor  op,  ;
forth


( NOTES. Data processing instructions are next, and they're kinda gnarly.
  There are several complications. We have to deal with shifts. We have to
  deal with setting the flags or not. We have to deal with complicated
  encoding: the PSR xfer insns MRS, MSR are encoded as TEQ, TST, CMP, CMN
  with the S flag CLEAR. And note that TEQ TST CMP CMN ignore Rd, and that
  MOV MVN ignore Rn.)

( Basics:  data processing insn formats.
  <op2>      Rd      MOV, MVN
  <op2>  Rn          CMP, CMN, TEQ, TST
  <op2>  Rn  Rd      AND, EOR, SUB, RSB, ADD, ADC, SBC, RSC, ORR, BIC

  <op2> is:     n #
                Rm
                Rm  n <shift>
                Rm  Rs <shift>
                Rm  RRX

  <shift> is ASR, ASL, LSL, LSR, ROR.
  ARM doesn't define ROL!!  While <n> # ROL could be synthesized from
  <32-n> # ROR, when shifting by a register it doesn't work that way.
  Do we also just leave it out?  The writer can always say

  Rn Rm 32 17 - # ROR Rd add.

There are three kinds of data processing instructions:
  -1- true 2ops like ADD SUB ADC SBC etc.
  -2- tests like TEQ TST - they ignore Rd and always set the S bit
  -3- MOV MVN - ignore Rn, the first operand.)

( Opcode pairs. Ugh.)

( strip pair opcode and pairable flag, keeping opcode, S, Rn, Rd)
: -pair   01fff000 and ;

( strip normal opcode and pairable flag, keeping pair opcode, S, Rn, Rd)
: +pair   dup 4 rshift 01e00000 and ( pair op)  swap 001ff000 and  xor ;

: ?pair  ( op - op')
   dup 20000000 and if ( pairable)  +pair  ^  then  oops  -;

: Operand2
   ( Rm op | # op | Rm shift op - op')
   over    -#? if  ?pair ^imm  ^  then  -pair
   over     #? if        ^imm  ^  then
   over shift? if  ^shift ( Rm op)   then  Rm  ;

( Out of luck or good design - on the part of ARM - setting the Operand2
  shift to 0 encodes Rm LSL #0, which is what we want when nothing is
  specified.)

( a b pair => 1-bbbb-aaaa)
: aop   create  #21 lshift ;  ( to alu op)
: pair  ( a b - pairop)   10 xor  4 lshift  xor  ;
: 1mi1  aop  does> Rd  Rn     Operand2  op,  ;
: 1mi2  aop  does>     Rn  S  Operand2  op,  ;
: 1mi3  aop  does> Rd         Operand2  op,  ;

assembler
  0 0e pair 1mi1 and  ( pairs with bic)
  0e 0 pair 1mi1 bic  ( pairs with and)
   5 6 pair 1mi1 adc  ( pairs with sbc)
   6 5 pair 1mi1 sbc  ( pairs with adc)
 0d 0f pair 1mi3 mov  ( pairs with mvn)
 0f 0d pair 1mi3 mvn  ( pairs with mov)

 ( 0      and)
   1 1mi1 eor
   2 1mi1 sub
   3 1mi1 rsb
   4 1mi1 add
 ( 5      adc)
 ( 6      sbc)
   7 1mi1 rsc
   8 1mi2 tst
   9 1mi2 teq
  0a 1mi2 cmp
  0b 1mi2 cmn
  0c 1mi1 or
( 0d      mov)
( 0e      bic)
( 0f      mvn)

forth

( MSR, MRS. Processor status transfer.)
( ?? change the names again!)

( Impossible encodings!
000- Op -S- Rn - Rd -HHHH-H-TT-0- Rm    ALU, shifted by immed
000- Op -S- Rn - Rd - Rs -0-TT-1- Rm    ALU, shifted by reg
001- Op -S- Rn - Rd - Rot-   Imm        ALU, immediate

000-10P0-0-1111- Rd -0000-00000000000   MRS  move status to reg
000-10P1-0-1001-1111-0000-0-00-0- Rm    MSR  move reg to status
000-10P1-0-1000-1111-0000-0-00-0- Rm    MSR  flag
001-10P1-0-1000-1111- Rot-   Imm        MSR  flag, immediate

  Opcodes 1000 thru 1011 are TST, TEQ, CMP, and CMN which always set S.)

( Status registers.)
assembler
00090000 constant cpsr
00080000 constant cpsr_flg
00490000 constant spsr
00480000 constant spsr_flg

forth

( MSR, MRS)
( 2001-feb-03. We're going with MVS - `move status'.)
( Bad names. MSR means `to status from register'. But in Forth we're writing
  the operands the other way. Can't be helped; we're powering thru.)

assembler
: mvs  ( psr Rd | Rm psr | # psr)
   dup  reg? if  010f0000  Rd  or  op,  ^  then
   0120f000  or
   over reg? if    Rm  op,  ^  then
   over   #? if  ^imm  op,  ^  then  oops  -;


forth

( MUL, MLA. Multiply and Multiply-accumulate. Careful with this: the
  multiplies swap Rn and Rd in their encodings.)

: ,mul  ( Rm Rs Rn Rd op)
   over push  Rn ( Rd!)  Rd ( Rn!)  Rs  ( Rm op)
   over pop = if  oops  then  ( barf if Rm == Rd)  Rm  op,  ;

assembler
: mul  ( Rm Rs Rd)      ( Rd := Rm * Rs; ignore Rn - we set to 0)
   0 ( Rn)  swap  00000090  ,mul  ;
: mla  ( Rm Rs Rn Rd)   ( Rd := Rm * Rs + Rn)
                  00200090  ,mul  ;

forth

( ?? add ldrb strb as separate insns?)

comment %%
  Load, Store. LDR, STR. More than a little bit icky. The instruction formats
  are somewhat, though not terribly, different from ARM's. Be careful: the
  `I' bit has the reverse encoding here than for the data processing and move
  status instructions. Here it is 1 if offset is a register, 0 if immediate.

  Instruction formats:
  <indexed> Rd ldr/str {<cond>} {byte} {user}
                                  `user' sets user mode in post-indexed mode
  Indexed operators:
  <addr>   pc)    calculates pc-relative address, pre-indexed
  <op2> Rn  ,)    pre-indexed
  <op2> Rn  ,)!   pre-indexed with write-back to base register
  <op2> Rn   ),   post-indexed

  <op2>:
  n                     12-bit signed offset
  Rm {(-)} {shift}      shift must be immediate, not register-specified

  NOTE: These indexing operators will also be used with the LDC/STC ops.
  Their behavior is slightly different then. Post-indexed addressing modes
  require explicit setting of the W bit. The offset is 8 bits, but is a
  -word- offset - shifted left 2 bits before being used. To accomodate both
  ways, `),' will -set- the W bit. The instructions can OR it in
  differently. Likewise, the offset will be `compiled' by the indexing
  operators as 12 bits; LDC and STC will check that it fits in eight. %%

03af0fff ^bits ^index   ( --IP U-W- bits, Rn, shift/Rm | offset)
01000000 constant Pre   ( P bit)
00800000 constant U     ( U bit; set to 1 - Up - in the in]dex types)
00400000 constant B     ( B bit; 0=word, 1=byte)
00200000 constant W     ( W bit; sets USER access mode in post-index)

0fff ^bits ^offset
: off]set  ( n op - op')
   over  0fff +  1fff u<  if  ( will fit into sign/magnitude 12 bit offset)
   over 0< if  U bic  swap  negate  swap  then  ( n op)  ^offset  ^
   then  oops  -;

: Rm[-]  ( Rm[-] bits - bits')   over U and bic  Rm  I or  ;

: in]dex   create does>
   ( Rm Rn op | Rm shift Rn op | n Rn op - index)  index_t  Rn
   over   reg? if  Rm[-]  ^  then
   over shift? if  ( sanity)  over 10 and if  ( reg. spec'd)  oops  then
           ^shift  Rm[-]  ^  then
   ( n op)  off]set  ;

comment %%
( ?? what is this??)
: -Wpost  ( clear W bit if post-indexed)  dup Pre and  0= if  W bic  then  ; %%

: 2mi  ( ldr/str)  create does>  ( index Rd op)  Rd
   over index? if  ( -Wpost)  ^index  op,  ^  then  oops  -;

assembler
: byte  ( after instruction)  |code @  B or  |code !  ;
: user  ( after instruction)  |code @
   dup Pre and if oops then  W or |code !  ;

: (-)  ( Rm - Rm')  dup reg? if  U or  ^  then  oops  -;

Pre U or        in]dex ,)
Pre U or W or   in]dex ,)!
( Post) U       in]dex ),
: pc)  ( addr - index)  |here |pc-  \a r15  ( n R15)   \a ,)  ;

( Now the instructions.)
04100000 2mi ldr
04000000 2mi str
forth


( Block data transfer. LDM, STM.)

( ?? comment on register list syntax)

( Types of transfers. P bit means Pre: add offset before xfer.
                      U bit means Up:  add offset to base.
  STM defaults to P,-U.  LDM defaults to -P,U.  This is a `full descending'
  stack.  The other types are created by twiddling bits.

  The actions of the IA/IB/DA/DB types do not depend on the operation -
  they map directly to UP bits: D=-U, I=U, A=-P, B=P.)

: >PU  create  #23 lshift ;
: PUstack   >PU  does> |code @                             xor  |code !  ;
: PU        >PU  does> |code @  01800000 bic  ( clear PU)  xor  |code !  ;

assembler
%00 PUstack fd   ( full descending stack - default)
%01 PUstack fa   ( full ascending stack)
%11 PUstack ea   ( empty ascending stack)
%10 PUstack ed   ( empty descending stack)

%00 PU      da   ( decrement after)
%01 PU      ia   ( increment after)
%11 PU      ib   ( increment before)
%10 PU      db   ( decrement before)

forth
: >mask  ( n - 2^n)  1 swap lshift  ;
: R>n    ( Rn - n)   0f and  ;

assembler
: to   ( Rlo Rhi - range)
   R>n 1+ >mask 1-  swap R>n >mask 1-  xor  range_t  ;

: {    ( - mark)  -1  ;

: }    ( mark Rx .. Ry - mask)
   0 ( mask)  begin  begin  over -1 xor  if  ( back back fwd)  [ -rot -]
   over   reg? if  swap R>n >mask  or  [ swap -]  again  then
   over range? if  swap 0ffff and  or  [ swap -]  again  then
   oops  then  nip ( mark)  ;

: }^   ( mark Rx .. Ry - mask+!PSR)  \a }  B or  ;
                                         ( B bit in LDR is !PSR bit in LDM)
: !    ( Rn - Rn+Wbit)  dup reg? if  W or  ^  then  oops  -;

forth
-1 W Rn ^bits ^Rn!
0ffff B or ^bits ^Rmask
: 3mi  create  does> ( reg-mask+!PSR Rn+W op)  ^Rn!  ^Rmask  op,  ;

assembler
                  ( 0000 100P USWL ...)
08900000 3mi ldm  ( 0000 1000 1001 ...; -P,  U)
09000000 3mi stm  ( 0000 1001 0000 ...;  P, -U)

forth


( Single data swap. SWP. Easy. Format:

  Rm Rn Rd swp {byte}

  Rn holds the address. Rm is the source. Rd is the dest. Rm may equal Rd.)

assembler
: swp  ( Rm Rn Rd)  01000090  Rd  Rn  Rm  op, ;  ( `byte' will change to byte)

( SWI.)
: swi  ( n)  00ffffff and  0f000000 or  op,  ;

forth


( Coprocessor data operations. CDP.

  NOTE: The ARM 710 only supports coprocessor #15, which only supports the
  MRC and MCR instructions.  CDP is -undefined- on the ARM710 and will
  cause an exception.

  proc# CPopc CRd CRn CRm cdp |
  proc# CPopc CRd CRn CRm CPinfo cdp)

: CP#  ( n op)  swap  8 lshift  swap  Rs  ;
: CPinfo  ( proc# CPopc CRd CRn CRm {CPinfo} op -
                                        proc# CPopc CRd CRn CRm op')
   over typeless? if  ( CPinfo) swap  7 and 5 lshift or  then  ;

assembler
: cdp  ( proc# CPopc CRd CRn CRm | proc# CPopc CRd CRn CRm CPinfo )
   0e000000 ( op)  CPinfo
   Rm  Rn  Rd  ( CPopc) swap 0f and #20 lshift  or  ( proc#)  CP#  op,  ;

forth


comment %%
  Coprocessor data transfers. LDC, STC.

  NOTE: The ARM 710 only supports coprocessor #15, which only supports the
  MRC and MCR instructions.  LDC and STC are -undefined- on the ARM710 and
  will cause an exception.

  Operands:
  proc# CRd <Address>

  <Address>:
  <addr> pc)
  offset <Rn> ,)    pre-indexed
  offset <Rn> ,)!   pre-indexed, write-back
  offset <Rn> ),    post-indexed  %%

01af00ff ^bits ^index-coproc  ( ---P U-W-, Rn, offset)
: 4mi  ( ldc,stc )  create  does> swap  ( proc# CRd op index)
   dup index? if  dup I and if  oops  then  ( register-offset not allowed)
   dup 0fff and ( offset)  dup 400 u< not if  oops  then
   ( offset fits into 8b WORD offset)
   ( index offset)  2/ 2/ ( -> word offset)  swap  0fff bic  xor  swap
   ^index-coproc  Rd  CP#  op,  ^  then  oops  -;

assembler
: long  ( set long transfer)  \a byte  ;
  ( !! sets the N bit, which is in the same place as the B bit for LDR/STR)

0c100000 4mi ldc
0c000000 4mi stc

forth


( Coprocessor register transfers. MRC, MCR.

  Operands:
  proc# CPopc Rd CRn CRm {CPinfo} )

: 5mi  ( MRC, MCR )  create does>  ( proc# CPopc Rd CRn CRm {CPinfo} op)
   CPinfo   Rm  Rn  Rd  ( CPopc) swap 7 and #21 lshift  or
   ( proc#)  CP#  op,  ;

assembler
0e100010 5mi mrc    ( move coproc to ARM reg)   ( ?? names!)
0e000010 5mi mcr    ( move ARM reg to coproc)

forth


( Undefined instruction. There is no direct way to generate this. Just like
  in the ARM assembler! The encoding looks like this:

  |cond-011-xxxx-x-xxxx-xxxx-xxxx-x-xx-1-xxxx|

  The encoding is very similar to the LDR/STR - in fact, the 1 in bit 4 is
  the only thing that distinguishes them, and also what disallows using
  register-specified shift amounts in those instructions.)




( ?? Still have to figure out literal pools. NOT! We just say HERE lit , or
  LIT, <n> or something; then use the address in a CODE word.)

comment %%later%%
( Control structures)
assembler
: if       ( cond - fwd)  |,  |here cell- ;
: ahead    ( - fwd)  \a always  \a if ;
: then     ( fwd)  |here over >branch-offset  over |+ @  xor  swap |+ ! ;
: else     ( fwd - fwd')  \a ahead  swap  \a then ;
: begin    ( - back)  |here ;
: until    ( back cond)  \a |if  \a b  \a |then ;
: again    ( back)  \a always  \a until ;
: while    ( back cond - fwd back)  \a if  swap ;
: repeat   ( fwd back)  \a again  \a then ;
( ... and you too can use `begin .. while .. again then' or, even more
  interesting: `begin .. while .. until .. then ..)
forth
 %%later%%

.then

