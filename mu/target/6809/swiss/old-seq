: 10*  2* dup 2* 2* + ;

: group-arpeg
  10 0 do 100 40 do 100 wait i j + add-note 10 +loop loop ;

create times[]
  50 , 50 , 50 , 50 ,
  50 , 100 , 100 , 100 ,
  200 , 200 , 200 , 250 ,
  400 , 500 , 750 , 1000 ,

: rand-wait  timer c@ 15 and 2* times[] + @ wait ;

: 17arpeg
  0 40 0 do
     rand-wait dup add-note
    17 + 63 and ( modulo 64 ) 40 +
  loop drop ;

: group-l-to-r
  10 0 do
    100 40 do
      rand-wait i j + add-note
    10 +loop
  loop ;

( 10-rand uses timer low byte as an 8-bit fraction )
: 10-rand  timer c@ 10* 256/ ;

: group><
  6 0 do  ( 6x back and forth )
  100 40 do rand-wait i 10-rand + add-note 10 +loop
  40 100 do rand-wait i 10-rand + add-note -10 +loop
  loop ;

var which -1 allot  ( which seq )
create seq[]    ( array of functions )

] group-arpeg  group-l-to-r  17arpeg  group>< [  ( compile cfa's )

: sequence
  which c@ 3 and ( 0..4 ) 2* seq[] + @ execute
  which 1+c! ;


code 256/
  u ) ldb  ( b gets high byte ) clra  u ) std next end-code


