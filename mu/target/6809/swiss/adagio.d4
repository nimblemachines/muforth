( adagio )
( daf 23-feb-93  changed for new swiss deal; rhythms are 16 beats; )
(       melodies are mapped; instrument combos also mapped )
( daf 01-mar-93  the joke is, the routine that runs all this stuff )
(       is now called 'sonata' )

forth target

( the *real* sequence stuff )

decimal

code 2/
  u )    asr
  1 u #) ror next end-code

: 10*  2* dup 2* 2* + ;

var vcA ( voice A )  6 allot
var vcB ( voice B )  6 allot

( offsets within voices )
( : >rhythm^ 0 + ;   ( 2 bytes )
: >instr^  2 + ;
: >note#   4 + ;   ( try this instead of melody^ )
: >incr    6 + ;   ( and instead of beat# )

var cur-transp
var solo#
var combo#
var tempo#

create rhythms  ( these are rhythm *pairs* )
( for this version, all rhythms should have 16 beats )
hex
  0bbaa , 0012 ,  ( reggae )
  92b8 ,  4802 ,
  0adaf , 2222 ,  ( march )
  2294 ,  8540 ,  ( funk )
  0cebb , 2144 ,  ( Yam. #9 )
  44ac ,  9201 ,  ( Yam. #16, sd/bd )
  0a160 , 0808 ,  ( Yam. #23, bd/sd )
  9999 ,  0a140 , ( Yam. #36, bong hi/agogo hi )
  80a2 ,  1008 ,  ( Afro/cub 1, bd/rs )
  0b5ad , 2222 ,  ( Afro/cub 6, rs/ch )
  9595 ,  0202 ,

decimal
( have to use 00 otherwise target compiler will try to execute )
( the word '0' on the target while loading!! )
create quiet 00 ,  ( rhythm with no beats )

create tempos  ( five of them )
  50 , 120 , 80 , 200 , 100 ,

( groups of instruments: )
( 0     == splash )
( 1 2   == stem hi )
( 3 4   == cylinder -- lowest )
( 5 7 9 == resonator horns )
( 6 8   == aluminum -- snare-sound )

( instrs -- instrument groups )
create instrs
  00 c, 20 c,  ( instr0: splash! )
  01 c, 2 c,   ( instr1: stem hi )
  3 c, 4 c,   ( instr2: low cylinder )
  6 c, 8 c,   ( instr3: aluminum snare )
  5 c, 7 c,   ( instr4: resonator1 )
  7 c, 9 c,   ( instr5: resonator2 )
  5 c, 9 c,   ( instr6: resonator3 )

: set-instr  ( instr# voice -- )
  >instr^ swap 2* instrs + swap ! ;

( combos -- instrs that work well together )
hex
create combos
  12 c, 13 c, 14 c, 15 c, 16 c,
  23 c,
  34 c, 35 c, 36 c,

code rshift ( x count -- x' )
  u )++ ldx  ( x=count )
  w[
    u )    lsr   ( shift high byte )
    1 u #) ror   ( shift low byte )
   -1 x #) leax  ( decr count )
  ]w
  0!= while
  next end-code

( beat? now assumes 16 beats/rhythm pattern )
: beat? ( beat# voice -- f )
  swap ( voice beat# ) 0f and dup 3 rshift ( which byte? )
  rot ( beat# byte# >rhythm^ ) @ + c@ 80 rot 7 and rshift and ;

decimal
: transpose ( note -- note' )
  cur-transp @ 10* + dup 99 - 0> if 60 - endif ;

( map-note maps 'canonical' note numbers 0-11 onto the midi )
( notes of a particular instrument group, as defined by the )
( pair of bytes pointed to by instr^.  This pair defines the )
( offsets from the first note of the 'octave' -- 40,50..90 -- )
( to the two notes of this instrument group.  Note that the )
( resonators -- 5,7,9 -- have been split into three instr groups: )
( 5,7; 7,9; 5,9.  Also the *splash* group is treated slightly )
( funny: the offsets are 0,20 so it will always play the right )
( instrument type but will skip two 'octaves' for adjacent notes )
( in the scale. )
: map-note  ( note instr^ -- midi-note )
  over 2/ 10* 40 + >r ( get the right octave -- 2 notes/oct )
  ( note: 2/ 10* is *not* the same as 5 *; integer div truncates )
  swap 1 and + ( first or second byte of instr group ) c@
  r> + ;

( +mod increments a variable modulo some #, returns new value )
: +mod  ( inc mod# var^ -- new-value )
    dup >r @ rot + swap umod dup r> ! ;

: +1mod ( mod# var^ -- new-value )  1 rot rot +mod ;

: note  ( note# instr^ -- )
  map-note transpose add-note ;

( note? plays a note if there is a beat in its rhythm )
: note? ( beat# voice -- )
  swap over beat? if
    dup >r  ( voice )
    r@ >incr @ 1+ 12 r@ >note# +mod ( incr note# mod 12 )
    r> >instr^ @ note ( play the note )
  endif drop ;

( the following several routines cycle through the possible )
( tempos, melodies, instrument combos, etc.  We don't ever )
( set these pointers to any known value -- eg at power-up -- )
( so we must be careful to always change and check the value )
( *before* using it. The exceptions to this rule: rhythms and )
( melodies. Because we want the rhythms to be nicely paired, )
( we always set voice A's rhythm to the first one on power-up.  )
( Voice B tracks voice A.  Melodies need to start at their )
( beginning. )

: init-seq  ( stuff done at power-up )
    rhythms vcA ( >rhythm^ ) ! ;

( in order for transpose to work the way we want, we understand )
( cur-transp to be an 'octave' count, not a note count.  This )
( way we can use the power-up value for a little extra random- )
( ness. )
: next-rhythm ( incr voice -- rhythm^ )
  ( >rhythm^ ) @ +  rhythms - 44 umod rhythms + ;

: combo
    9 combo# +1mod
    combos + c@  ( get combo )
    dup 15 and vcB set-instr
    4 rshift vcA set-instr
    2 vcA next-rhythm vcB ( >rhythm^ ) !
    ( set b to rhy following a ) ;

: solo
    7 solo# +1mod
   ( use as instr# ) vcA set-instr
    quiet vcB ( >rhythm^ ) !  ( vcB is quiet ) ;

: new-melody  ( set tempo, transpose, melodies )
    5 tempo# +1mod  2* tempos + @ tempo !
    6 cur-transp +1mod drop
    17 vcA >incr +1mod drop
    13 vcB >incr +1mod drop ;

: gliss
  instrs 14 + instrs do ( go thru all instrs )
    i 12 0 do  ( all notes of 'scale' )
      i over map-note add-note  ( no transpose ) 20 wait
    loop drop
  2 +loop ;

: movement
  1000 wait

  new-melody
  16 0 do  ( 16 'measures' )
    16 0 do     ( 256 notes ~ 25 seconds @ tempo=100 )
      i vcA note?
      i vcB note?
      tempo @ wait
    loop
  loop ;

var gliss?

: sonata
  4 vcA next-rhythm vcA ( >rhythm^ ) !  ( next pair )

  solo movement
  7 gliss? +1mod 0= if
    1000 wait gliss gliss gliss
  else
    combo movement
  endif
  combo movement  ;


