( 6809 postfix assembler )
( daf  25-sep-92 	created )
( daf   2-oct-92	separated into ASM-INTERNALS and ASSEMBLER )


only forth definitions

vocab asm-internals ( assembler internals that mere mortals )
                    ( shouldn't see )
vocab assembler   ( 6809 assembler )

also asm-internals definitions


( address mode identifiers )
decimal
0 constant mdImmed
1 constant mdDirect
2 constant mdIndexed
3 constant mdExtended

hex ( for the rest of the file )


( lit-array is used to fool interpret.  we want to compile )
( the address of an unnamed array into a colon definition, but )
( : and ; check that the parameter stack depth hasn't changed, )
( so we do this instead: )
( here   0 , 1 , 2 , 3 ,   : foo biz bar bletch lit-array + @ ; drop )
( The DROP at the end drop's the zero that was swapped for the )
( address.  All in all, a nuisance. But the price you pay for )
( error-detection. )
( NOTE WELL:  you CANNOT use lit-array inside any kind of looping )
( or decision construct -- eg if/endif -- because they leave stuff )
( on the stack at compile time that interferes with the array address )
( that we want to compile; use carray instead. )

: lit-array	( -- array^ )
			( compile: array^ -- 0 )
	0 swap [compile] literal ; immediate


( reg-size checks that the two registers are the same size )
( 0..5 are 16bits;  8..11 are 8bits.  that's why it works )

: reg-size  ( r1 r2 -- r1 r2 )
	2dup xor 8 and abort" register sizes don't match " ;

( in-range?  takes a number and limit and returns true if: )
( number <= limit-1 AND number >= -limit.  E.g., if number is )
( a signed offset -- what this is used for -- and limit is 128 )
( we can determine if number is within the range of a signed byte: )
( -128 to +127. )

: in-range?  ( n lim -- f )
	swap dup 0< if -1 xor endif > ;

( carray : compiles #bytes from stack )
( remember that bytes in source code are in reverse order )

: carray  ( # -- byte )
		( compile: bn bn-1 .. b0 #bytes -- )
	create 0 do c, loop
	does> + c@ ;


hex   ( probably the rest of this file should be in hex )

( s  u  y  x d )
  60 40 20 0 0   5   carray breg-mask

( base-reg OR's the bits into an indexed-mode postbyte that )
( represent the register whose index is on the stack. )
: base-reg  ( reg post -- post' )
	swap breg-mask or ;

: sign-ext-5  ( 5bit# -- 8bit# )
	dup 10 and if 0e0 or endif ;

( YIKES !!  Now for the hairiest part: do-indexed.  This routine outputs )
( the finishing touches of an instruction that uses the indexed address )
( mode.  There are, of course, several special cases.  If the programmer )
( specifies pc-relative -- pcr -- we must wait until do-indexed to actually )
( calculate the offset as we only know THEN, after the opcode[s] have been )
( output, how long the insn is.  That's prob the trickiest. )
( If it's not a pcr insn, we output the postbyte and then if it's NOT an )
( embedded 5-bit offset postbyte we output any displacement that might be )
( necessary.  Phew. )

( this array is indexed using the low 4 bits of the postbyte; )
( an entry tells how many bytes follow the postbyte. )
( mode f e d c b a 9 8 7 6 5 4 3 2 1 0 )
       2 0 2 1 0 0 2 1 0 0 0 0 0 0 0 0   decimal 16 hex carray mode-size

: do-indexed  ( [val] postbyte -- )
	dup 8f and 8c =   ( pc-rel )
	if
		swap ( -- post disp )  >here ( pts to postbyte; next insn is +2 or +3 )
		2+ - dup 80 in-range?
		if  ( fits in 8 bits )
			( disp is correct ) swap  ( -- disp post )
		else ( needs 16 )
			( disp is 1 too FAR ) 1- swap ( -- disp post ) 1+ ( 16bit mode )
		endif
	endif
	dup >c,  ( post )
	dup 80 and
	if  ( not 5-bit offset mode )
		0f and ( mode ) mode-size ?dup if 1- if >, else >c, endif endif
	else drop ( post )
	endif ;


: do-immed  ( n f16 -- )
	if ( 16bits ) >, else >c, endif ;


( instruction types:	op    are simply 1 or 2 byte insn's with no operands )
(				1op   are 1 byte 1 operand insn's )
(				2op8  are 1 byte 2 operand insn's )
(				2op16 are 2 byte 2 operand insn's )

hex

: bconst create c, does> c@ ;
: wconst create w, ;

here  ]  do-immed  >c,  do-indexed   >,   [  ( indexed by md )

: compile-rest  ( xx md f16 -- )  ( f16 is true if 16-bit insn )
	over if ( not immed ) drop ( f16 ) else swap endif
	( -- xx md OR -- xx f16 md )  4* lit-array + @ execute ; drop

: op  wconst does> w@ dup 0ff00 and if >, else >c, endif ;

here 0 c, 0 c, 60 c, 70 c,		( mdImmed, mdDirect, mdIndexed, mdExtended )
: 1op  bconst does> c@ over 0= abort" invalid address mode "
	over ( -- xx md op md )  lit-array + c@ or >c, 0 compile-rest ; drop

here 0 c, 10 c, 20 c, 30 c,		( mdImmed, mdDirect, mdIndexed, mdExtended )
: 2opmode  ( md op -- md op' )  ( changes opcode based on address mode )
	over lit-array + c@ or ; drop

: 2op8  ( md pfa -- )
	bconst does> c@ 2opmode >c, 0 compile-rest ;

: 2op16 ( md pfa -- )
	wconst does> w@ 2opmode dup 0ff00 and
	if  ( 16bit opcode )  >, else >c, endif
	1 compile-rest ;

: lea
  bconst does> c@ >c,
  ( op )  mdIndexed - abort" must be indexed mode "
	do-indexed ;

: op#8  ( op with 8 bits of immediate data )
  bconst does> c@ >c,
  mdImmed - abort" must be immed mode"  >c, ;

: _$  10 ( 16 ) 1 do i 20 + bconst loop ;  ( for defining conditionals )

             ( dp  cc  b  a )
               8   1   4  2
( --  --  pc  s  u  y  x  d )
  0   0   80  40 40 20 10 6       decimal 12 hex  carray stk-mask

             ( dp  cc  b  a )
                0   0 85 86
( --  --  pc  s  u  y  x  d )
  0   0    0  0  0  0  0 8b       decimal 12 hex  carray reg-postbyte




( -------- AFTER THIS POINT COME ALL THE USER-VISIBLE WORDS --------- )

also assembler definitions

( register constants -- same as indexes in tfr, exg insn's )
( 16 bits: )
decimal
0 constant d
1 constant x
2 constant y
3 constant u
4 constant s
5 constant pc

( 8 bits: )
8 constant a
9 constant b
10 constant cc
11 constant dp

hex



( address mode words )
( all address mode words leave a mode -- md -- on the stack )
mdImmed	constant #  ( immediate mode )

( << and >> are used to convert a register list to a mask for use by )
( pshx and pulx insn's )
( << starts a list and >> terminates it. )

-1 constant <<

: >>  ( -1 r0 r1 r2 .. rn -- rmask )  ( 8 regs max )
	0 8 0  ( starting value, do indexes )
	do
		over 0< if leave else swap stk-mask or endif
	loop  ( -- -1 rmask OR -- xx rmask )
	swap 0< not abort" too many registers in list " # ;


: ^  ( -- md )  ( direct/extended mode )
  dup 0ff00 and if mdExtended else mdDirect endif ;

: ^^  ( extended indirect -- special case )  09f mdIndexed ;

( the following expect a register on stack, eg: )
( reg -- postbyte mdIndexed )
: )    ( zero disp )     84 base-reg mdIndexed ;
: )+   ( post-inc by 1 ) 80 base-reg mdIndexed ;
: )++  ( post-inc by 2 ) 81 base-reg mdIndexed ;
: -)   ( pre-dec by 1 )  82 base-reg mdIndexed ;
: --)  ( pre-dec by 2 )  83 base-reg mdIndexed ;

( indexed, displacement )
: #)  ( disp reg -- [disp] postbyte mdIndexed )
	>r  ( -- disp ) ?dup 0=
	if 84 ( special case: disp = 0 )
	else  dup 10 ( 16 )  in-range? if 01f and else  ( postbyte contains offset )
	      dup 80 ( 128 ) in-range? if 88 else  ( byte offset )
						 89 endif endif endif
	r> swap base-reg mdIndexed ;


( indexed, accumulator offset )
: r)  ( r1 r2 -- postbyte mdIndexed ; r1 is accum, r2 is base )
	swap reg-postbyte ?dup 0= abort" invalid offset accumulator "
	base-reg mdIndexed ;

( pc-relative  -- probably useless )
: pcr  ( disp16 -- disp postbyte mdIndexed )
	8c mdIndexed ;
( 8c is postbyte for 8 bit offset -- do-indexed fixes it up if necessary. )
( the problem is, we don't know how long the instruction is, so we can't )
( calculate the offset yet! )


( indirect -- assumes an index mode already defined )
( this is tricky, as there are several possibilities: )
(   1. postbyte is indirectable, just set indirect bit; )
(   2. mode is post-inc by 1 or pre-dec by 1 -- neither allowed as indirect )
(   3. mode is 5-bit offset; has to be converted to 8-bit offset with )
(      new postbyte. )
(   4. extended indirect -- we handle this as a special case with its own )
(      address mode word:  ^^ )
: []  ( xx postbyte mdIndexed -- xx postbyte' mdIndexed )
	mdIndexed -  abort" need to define an indexed address mode "
	dup 80 and
	if  ( not 5-bit offset mode )
		( check for modes 80 and 82 -- illegal )
		dup 0f and dup 2 = swap 0= or abort" illegal indirect mode "
		10 or ( set indirect bit )
	else ( 5-bit offset )
		dup 1f and ( offset ) sign-ext-5 swap  ( -- disp postbyte )
		60 and ( extract breg ) 98 or ( 8bit offset, indirect )
	endif  mdIndexed ;



( here come all the insn's ---- )

3a op abx

89 2op8 adca   0c9 2op8 adcb

8b 2op8 adda   0cb 2op8 addb   0c3 2op16 addd

84 2op8 anda   0c4 2op8 andb   1c op#8 andcc

48 op asla   58 op aslb   08 1op asl

47 op asra   48 op asrb   07 1op asr

85 2op8 bita  0c5 2op8 bitb

: bsr  ( addr md -- ) ( force user to put md even tho we ignore )
  drop ( md )
  >here 2+ - ( offset ) dup 80 in-range? if ( short )
    8d ( bsr ) >c, >c, ( offset )
  else ( long -- offset is one too far )
    1- ( correct offset ) 17 >c, ( lbsr ) >, ( long offset )
  endif ;

4f op clra   5f op clrb   0f 1op clr

81 2op8 cmpa  0c1 2op8 cmpb  1083 2op16 cmpd
118c 2op16 cmps  1183 2op16 cmpu  8c 2op16 cmpx  108c 2op16 cmpy

43 op coma   53 op comb  03 1op com

3c op cwai

19 op daa

4a op deca   5a op decb   0a 1op dec

88 2op8 eora  0c8 2op8 eorb

: exg  ( r1 r2 -- )  reg-size  10 ( 16 ) * or 1e >c, >c, ;

4c op inca   5c op incb   0c 1op inc

0e 1op jmp

8d 2op8 jsr  ( this is in a funny place on the opcode map )
             ( jsr immed, thought allowable, is really a bsr )

86 2op8 lda   0c6 2op8 ldb   0cc 2op16 ldd
8e 2op16 ldx  108e 2op16 ldy   0ce 2op16 ldu   10ce 2op16 lds

30 lea leax  31 lea leay   32 lea leas   33 lea leau

48 op lsla   58 op lslb   08 1op lsl

44 op lsra   54 op lsrb   04 1op lsr

3d op mul

40 op nega   50 op negb   00 1op neg

12 op nop

8a 2op8 ora   0ca 2op8 orb   1a op#8 orcc

34 op#8 pshs  ( must use << and >> to create register mask )
36 op#8 pshu
35 op#8 puls
37 op#8 pulu

49 op rola   59 op rolb   09 1op rol

46 op rora   56 op rorb   06 1op ror

3b op rti

39 op rts

82 2op8 sbca   0c2 2op8 sbcb

1d op sex

87 2op8 sta   0c7 2op8 stb   0cd 2op16 std
8f 2op16 stx   108f 2op16 sty  0cf 2op16 stu   10cf 2op16 sts

80 2op8 suba   0c0 2op8 subb   83 2op16 subd

3f op swi   103f op swi2   113f op swi3

13 op sync

: tfr  ( rSrc rDest -- ) ( postbyte: ssssdddd )
	reg-size swap 10 ( 16 ) * or 1f >c, >c, ;

4d op tsta   5d op tstb   0d 1op tst


( next come the structured-programming tools )
( these use SHORT brances only )


hex 20 constant bra  ( branch always )

decimal

( we need some 'helping' words for the control structures; )
( these words implement 8-bit signed offsets for jumps )

: >mark  ( -- jmp-offset^ )  ( "forward mark" )   >here 0 >c, ;
: <mark  ( -- top^ )         ( "backward mark" )  >here ;

: >resolve  ( jmp-offset^ -- ) ( "forward resolve" )
  >here over 1+ - dup 127 > abort" forward jump too long"
  swap >c! ;

: <resolve ( top^ -- )         ( "backward resolve" )
  >here 1+ - dup -128 < abort" backward jump too long" >c, ;

: if  ( bxx -- from^ )  >c,  >mark ;

: endif  ( from^ -- )   >resolve ;
: then    endif ;

: else  ( from-if^ -- from-else^ )
	bra if swap >resolve ;
  ( setup branch over else; fixup if's branch )


: begin  ( -- to^ )  <mark ;

: until  ( to^ bxx -- )  ( dp pts to disp byte ) >c, <resolve ;

: again  ( to^ -- )   bra until ;

: .while  ( bxx -- from^ )   if ;

: repeat ( top^ while-branch^ -- )
   swap again ( resolve the branch to top )
   >resolve ( resolve the while branch ) ;

( new, efficient, 'while' structure. )
( we use 'begin/while/repeat' when we want a loop that we will )
( execute 0 or more times; ie, we want the check at the *top*. )
( the 'naive' way to implement this is, however, rather ineffi- )
( cient.  It looks something like: )
( top: <cond> bne exit  <body> bra top  exit: )
( and each time thru we execute a conditional and an unconditional )
( branch.  Ideally we want: )
( bra test top: <body>  test: <cond> bne top )
( I had a hard time coming up with a reasonable syntax for this, )
( so I settled for an *un*reasonable one, to wit: )
( w[ <body> ]w <cond> while )

( so, w[ compiles a bra to the test, and leaves addr of top )
: w[  ( -- top^ test-bra^ )
  bra >c, >mark <mark swap ;

: ]w  ( top^ test-bra^  -- top^ )  >resolve  ( the bra to <cond> ) ;

( converts bne to beq etc )
: ~cond  ( bxx -- byy )  1 xor ;

: while ( top^ bxx -- )   ~cond >c,  <resolve ;


hex

( _$ has to appear on the same line as words that it defines )


(    21  22  23  24  25  26  27  28  29    2a  2b  2c  2d  2e  2f )
_$  brn u<=  u>  u< u>=  0= 0!= ovfl novfl 0<  0>= <   >=  <=   >
(       bhi bls bhs blo bne beq bvc  bvs   bpl bmi bge blt bgt ble )
(       <- unsigned  ->                            <-  signed   -> )


( a few more utility words useful for programming in asm: )

only forth defs

: asm  also assembler ;


