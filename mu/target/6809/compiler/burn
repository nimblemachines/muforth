( burn -- eprom programmer )
( daf  11-jan-93 created )

only forth defs

var checksum

decimal
( we redefine emit so it is smart about <crlf> )
( we want to use it to print the responses from the ep-1 )
: (emit+cr)
  dup 13 = if
    drop cr else ( <cr> )
  dup 10 <> if
   (emit) else drop
  endif endif  ( ignore <lf> ) ;

'c (emit+cr) -> emitvec

hex
: #hex  0f and 9 over < if 7 + endif 30 + hold ;

: 2hex
  2 chat^ +! chat^ @ hld !   dup checksum +!  dup #hex 4 >> #hex ;

: 4hex  dup 8 >> 2hex 2hex ;

: build-srec ( image-addr len type -- )
  chat! ascii S b>  30 + ( type->digit ) b>
  0 checksum !
  dup 3 + 2hex  ( len field )  over 4hex  ( addr field )
  over + swap  ( addr+len addr )
  2dup - if ( only do do if len != 0 )
    do i image>c@ 2hex loop
  else 2drop
  endif
  checksum @ -1 xor
  ( checksum is 1's comp of sum of len, addr, data ) 2hex ;


decimal

: <cr>  13 b> ;
: <sp>  bl b> ;
: ep-cmd  <cr> ascii > chat-ep1 ;

: hello-ep1
  chat! <sp>   ep-cmd ;

: chip"
  chat! ascii c b> <sp> chat" ep-cmd ;

: blank?
  chat! ascii b b> ep-cmd
  pad 3 + c@ 07 = if ." chip not erased" r> drop endif ;

: set-base  ( base-addr -- )
  chat! ascii b b> ascii a b> <sp> 4hex ep-cmd ;

: set-echo
  chat! " proto on" ( addr len ) dup chat^ +! pad swap cmove
  ep-cmd ;

: s1  ( addr len -- )
  1 build-srec <cr> 10 chat-ep1 ( wait for <lf> ) ;

: s9  ( -- )
  0 0 9 build-srec <cr> 10 chat-ep1
  chat! 26 b> ascii > chat-ep1 ( end with ^z ) ;

decimal
: program-range  ( addr len -- )
  >r  ( len on return stack )
  begin
    r@ 0>
  while
    r@ ( # bytes left ) 32 min  ( addr min[32,len] )
    2dup s1
    r> over - >r ( subt from bytes to go )
    +  ( add to addr the count we just sent )
  repeat
  r> drop drop  ;

: program  chat! ascii p b> <cr> 10 chat-ep1 ;
: end-program  s9  pad chat^ @ pad - cr type ;

hex
: burn"  ( chip type " )
  reset-ep1  hello-ep1  chip"
  blank?  >origin set-base set-echo

  program
  >origin ( start ) >here over - ( start len )  program-range
  0fff0 10 program-range  ( get the vectors, too ! )
  end-program ;


