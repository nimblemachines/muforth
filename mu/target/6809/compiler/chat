( chat -- Mac-6809 communication stuff )
( daf 4 dec 92	created )
( daf  18-feb-93  changed chat stuff so that host expressly )
(          requests sp from target. )
( daf  20-aug-93  brutal changes; unrecognizable.  The target )
(   now only has three commands: 0=read, 2=write, 4=go )
( daf  17-sep-93  no more {serial} or {chat} )

only forth definitions

var chat^		( pointer into chat buffer -- pad )

: chat!  ( -- )  ( init chat^ )  pad chat^ ! ;
: b>     ( b -- )  chat^ @ c! 1 chat^ +! ;
: w>     ( w -- )  chat^ @ w! 2 chat^ +! ;
: b<     ( -- b )  chat^ @ c@ 1 chat^ +! ;
: w<     ( -- w )  chat^ @ w@ 2 chat^ +! ;

hex

: ?ErrReply ( f -- )
  if ." bad reply code"  flushMidi quit endif ;

: send  ( op -- )
  wrMidi
  chat^ @ pad - if chat^ @ pad do i c@ wrMidi loop endif ;

: rcv  ( #recv -- )
  ?dup if pad + pad do rdMidi i c! loop endif ;

: chat ( #recv op -- )
  dup send  ( send cmd, buffer )
  1+ rdMidi 2dup - ?ErrReply 2drop
  rcv chat! ;

( format of cmds for target: )
( read:  0 <adr:hi> <adr:lo> <cnt> )
(   returns: 1 <data> )
( write: 2 <adr:hi> <adr:lo> <cnt> <data> )
(   returns: 3 )
( go: 4 )
(   returns: 5 <sp:hi> <sp:lo> )
(   target replies immediately; returns sp when done )
( sp!: 6 <sphi> <splo> )
(   returns  7 )

: chat>c@  ( addr -- b )  chat! w> 1 b>     1 0 chat b< ;
: chat>@   ( addr -- w )  chat! w> 2 b>     2 0 chat w< ;
: chat>c!  ( b addr -- )  chat! w> 1 b> b>  0 2 chat    ;
: chat>!   ( w addr -- )  chat! w> 2 b> w>  0 2 chat    ;
: chat>goSync  ( -- sp )  chat!             2 4 chat w< ;
: chat>goAsync ( -- )     chat!             0 4 chat    ;
: chat>sp! ( sp -- )      chat! w>          0 6 chat    ;

( we can send up to 256 bytes at once; count in buffer=0 )
: chat>chunk! ( adrHost adrTarget count -- )
  chat! swap w> dup b> ( adr, count )
  chat^ @ swap  ( adrHost chatbuf count )  dup chat^ +! cmove
  0 2 chat ( send opcode, buffer ) ;

( called right after target reset )
: chat>sp  ( -- sp )
  flushMidi
  rdMidi 8 << rdMidi + ;

( chat with the ep-1 eprom programmer )
: chat-ep1  ( chTerminate -- )
  chat^ @ pad do
    i 1 write-ep1
    i 1 read-ep1  ( get echoed char )
  loop
  begin
    chat^ @ 1 read-ep1 b< over =
  until ( read until chTerminate read ) drop ;


: chat"
  word" ( here ) count ( addr len ) swap over ( len addr len )
  chat^ @ swap ( len addr chat^ len ) cmove chat^ +! ;

