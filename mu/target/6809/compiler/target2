( target )
( target compiler stuff )
( daf  26-sep-92	created )
( daf   1-oct-92	added vocab, defs, var, const )
(		added branching and looping )
(		in target-compiler )
( daf  10-dec-92  moved basic stuff to target-utils; kept only )
(                 >compiler words in this file. )
( daf  15-dec-92  recombined target-utils and target )
( daf  15-dec-92  also added leave prim, removed enddo and changed )
(          compiler to do the right thing. )
( daf  18-jan-93  changed branching insns -- branch, zbranch, )
(          loop, +loop, leave -- to use 8-bit offsets. )
(          Also moved the control structures and the 'kernel' )
(          words back into this file from 'kernel'. )
( daf  20-jan    changed >do, >loop, >+loop, ?leave and corres- )
(          sponding compiler words so >do compiles a byte-long )
(          branch offset following it, used by ?leave, and )
(          pushes adr of top of loop for >loop and >+loop. )
( daf 16-jun-93  changed the compiler so it's more normally )
(   Forth-like with ;code and all that. Added a few nice new )
(   "data types". )
( daf 20-aug-93  changed to comply with new chat stuff )
( daf 17-sep-93  no more {}'s; added NMI debug )
( daf 27-sep-93  tforth is "target" forth; tdefiner is definers; )
(                tcolon only searched inside : defs )


only forth defs

vocab tforth      ( words on host that make target "forth" )
vocab tdefiner    ( target defining words )
vocab tcolon      ( words searched only inside colon def'ns )
vocab target_     ( the actual target words )

( defining FORTH )

( search:  TARGET_ TDEFINER TFORTH )
( compile: TARGET_ )
: target
  only
  forth tforth
  also forth tdefiner
  also forth target_ defs ;

decimal

hex
: >sp!  ( sp -- )    dup chat>sp!  spReg ! ;

: freshStack  ( reset stack frame to known )
    cc chat>c@ 80 or ( Ebit )
 ( reset stack to where it was at target reset )
    rBase @ 0c -  >sp!
    cc chat>c! ;

decimal
: go-forth ( >cfa -- )
  freshStack  ( set sp, cc )
  start^ @  chat>!  ( store cfa in startup word )
  start^ @  y chat>!  ( set ip to startup word )
  next^ @   pc chat>! ( pc points to NEXT )
  stack>  ( copy stack to target, set u )
  go ;

: >execute  ( >cfa -- )
   state @ if ( compiling ) >, ( compile it )
   else ( executing )
     go-forth
   endif ;


also assembler defs

( this is tricky: we're trying to compile into the assembler )
( a word that mixes forth and assembler; in particular, both )
( forth and assembler have their own copies of if-else-endif )
( and x and y.  We want forth's if-else-endif, but assembler's )
( x and y. )

: next
  ( compile NEXT code in CODE words -- used in kernel and all )
  ( user CODE words. )
  ram-only @ [ forth ] if [ assembler ]
    next^ @  ^ jmp   ( jump direct to common NEXT )
  [ forth ] else  [ assembler ] ( eprom version )
    y )++  ldx
    x ) [] jmp  ( compile it inline )
  [ forth ] endif ;


forth defs

hex

also assembler

: dummy,
  ( compile the beginning of ram-only kernel )
  >here start^ ! ( place to put cfa to execute ) 0 >,
  >here 2+ >,  ( ptr to code word )
  >here 2+ >,  ( cfa of code word )
  swi ;

: next,
  ( compile next -- with *breakpoint* ! )
  >here next^ !
  0 # cmpy  ( patch here with ip to match )
  0= if
    swi
  endif
  y )++ ldx   x ) [] jmp ;

: NMI,
  >here semaNMI^ !  1 >allot  ( semaphore for NMI handler )
  >here 0c >! ( set NMI 'soft' vector )
  semaNMI^ @ ^ dec  ( 'down' on semaphore )
  0= if ( we're the only one allowed in )
    0a ^^ jmp ( indirect thru swi 'soft' vector )
  endif
  semaNMI^ @ ^ inc  ( 'up' )
  rti ;

toss

: new   ( prepare for new target )
  ( clear out target image )
  image imageSize erase
  interactive off

  ram-only @ if
    10 dp^ !  ( dict starts after vectors )
    dummy,  next,  NMI,
  else
    ( eprom mode: )
    >origin  dp^ !     ( dict starts at bottom of target image )
    0 ram^ !  ( ram always starts at zero -- it's not in image )
  endif ;

( these go into *forth* )

var >blit  ( byte literal -- zero-extends )
var >lit   ( word literal )
var >exit
var >branch ( unconditional branch -- absolute addr )
var >zbranch ( branch on zero )
var >do
var >loop
var >+loop
var >?leave  ( we only need this to make single-step easier )


( we need some 'helping' words for the control structures: )
( these words implement 8-bit signed offsets for jumps )

: >mark  ( -- jmp-offset^ )  ( "forward mark" )   >here 0 >c, ;
: <mark  ( -- top^ )         ( "backward mark" )  >here ;

: >resolve  ( jmp-offset^ -- ) ( "forward resolve" )
  >here over - dup 127 > abort" forward jump too long" swap >c! ;

: <resolve ( top^ -- )         ( "backward resolve" )
  >here - dup -128 < abort" backward jump too long" >c, ;


hex

( target literal -- *now* state smart )
( compiles zero-extended byte literals )
: >literal  ( -- n )
  ( compile: n --   )
  state @ if
    dup 0ff00 and
    if ( 16 bits )
      >lit @ >, >,
    else
      >blit @ >, >c,
    endif
  endif ;


( We need a special interpret because we treat literals differ- )
( ently when target compiling: Forth's LITERAL compiles onto the )
( host; we want to compile onto the target. )
( The caller should prepare the search order to be: )
( only forth >compiler also target defs )

'c target_ 8+  const target-vocab

: tcompiling?  ( -- f )
  current @ target-vocab = ;

: t-interpret
  begin
    find  ( does bl word ) ( -- f OR -- pfa len t )
    if  ( defined )
      state @ < if  ( len byte > state -> immediate word )
        cfa ,
      else
        cfa execute
      endif
    else  ( try to convert as a number )
      here number ( leaves a double # or aborts )
      tcompiling? if  ( if we're doing target compilation )
        drop >literal  ( target -- short -- literal )
      else
        dpl @ 1+ if  ( if there was a decimal point )
          [compile] dliteral
        else
          drop [compile] literal
        endif
      endif
    endif
    ?dp ?stack
  again  ;

( now install this thing as the REAL interpreter... )
( we're in the 'root' vocab so this is copacetic )

'c t-interpret -> interpret



( when assembling: )
( search:  assembler tforth )
( compile: target_ )
: target-asm    ( sets up search path for assembling )
  only forth target_ defs  forth tforth also forth assembler ;

: set>cfa  r> w@ latest name> >body 4+ w@ ( >cfa) >! ;

: compile-cfa  compile set>cfa  >here w, ;

: wh  ( where? )  also target_ @pfa 4+ w@ toss ;

( *** TFORTH *** )

( tforth is *not* searched during target colon compilation )

only forth also tforth defs

: host
  only forth defs ;

( this is a little bit fancy: in rom mode it not only leaves space )
( in ram for the value but also compiles a pointer to the space )
( into the rom def'n. )
: allot ( #b -- )
  ram-only @ if >allot else ram^ @ >,  ram^ +! endif ;

: here   >here ;
: ,  >,  ;
: c, >c, ;

: signature"  ( put a signature into rom )
  word"  ( skip to following " )
  ram-only @ 0= if
    count over + swap do i c@ >c, loop  ( compile it, if rom mode )
  else drop
  endif ;

( some constants useful for interrupts: )
hex
: vector  create w, does> ram-only @ if 1+ endif c@ ;

( first value is for eprom mode; 2nd for ram-only )
( this is now outmoded; but I'll leave it here so we can go back )
( easily. )
0202 vector swi3
0404 vector swi2
0606 vector firq
0808 vector irq
0a0a vector swi
0c0c vector nmi
0e0e vector reset

: handler ( offset -- ) ( start assembling exception handler )
  target-asm  ( don't need to save context; always target )
  ram-only @ 0= if ( if eprom mode )
    dup reset = if ( are we setting the reset vector? )
      0e 0 do  ( yes, set all as-yet-unset vectors to reset also )
        i 0fff0 + dup image>@ 0= if >here swap >! else drop endif
      2 +loop
    endif
    0fff0 +  ( fix offset up to where the vectors are )
  else ( ram mode -- special case for NMI -- don't change vector )
    dup nmi = if drop reset endif ( clobber soft reset instead )
    ( it's ignored after all )
  endif >here swap >!  ( store in zero-page if chatty )
  ;

: end-handler  target ;  ( to end an interrupt handler )

: pfa-of ( -- a )  wh  2+ ;

( we need a word to compile the address of a target variable )
( into a *code* word. )
: addr  ( -- a )
  pfa-of ram-only @ 0= if image>@ endif
  ( rom-mode, addr is a const, so fetch the value; for )
  ( ram-mode, pfa is the addr we want ) ;

: hex hex ;
: decimal decimal ;
: . . ;
: .s .s ;
: +  + ;
: -  - ;
: (  [compile] (  ; immediate

: end-code     RestoreContext ;  ( to end a def'n )

: equ    ( make an equate, useful for assembler constants )
  ( we're always in target when we use this )
  only forth tforth defs ( search and compile tforth )
  constant
  target ( back to compiling target ) ;

: label  ( make an asm label -- ** is this right? ** )
  ram-only @ if >here else ram^ @ endif equ ;

( this is the tricky new -- 16-jun-93 -- compiler stuff )

( "compiler" is for defining new target defining words; )
( they go into the tcompiler vocab. )

( search:  tforth forth! )
( compile: tdefiner )
: compiler  only forth tdefiner defs  forth also tforth ;

( tcolon words are searched ONLY during colon defn )
( search:  tcolon target_ )
( compile: target_ )
: target-colon  ( sets up search path for colon-defn )
  only forth target_ defs also forth tcolon ;

( this create is the engine used in creating *all* target words. )
( It creats a host dictionary entry that points to the target )
( cfa and is immediate; it initially creates a code header, but )
( later refinements will change that ( see kernel )

: create  ( like fig's: creates a CODE word )
  create  >here w, ( >cfa )  >here 2+ >, ( CODE hdr )  immediate
  does> w@ ( get >cfa ) >execute ;

( ends a defining word compile-time part and defines the runtime )
: ;code
  compile-cfa  smudge [compile] [ ( exit compiler )
  SaveContext target-asm ;  immediate

( putting this into tforth is cool because we always search )
( it when we're in the assembler. )
also assembler
: pfa>x  2 x #)  ram-only @ [ also forth ] if leax else ldx endif ;
toss toss ( forth, assembler )

: does>  ( -- pfa )
         ( compile: -- vocab-cfa for ; )
  compile-cfa  ( leave compiler going )
  ram-only @ if 5 else 7 endif ( offset for leay n,pcr )
  [ also assembler ]
  2 x #) leax  << x >> pshu  << y >> pshs  ( stack pfa, ip )
  >here + pcr leay  ( new ip )  next [ toss ]
  SaveContext target-colon  ;  immediate

: ]  ] ;

( *** TCOLON *** )
( searched only inside target colon-def'ns )

( search tcolon, forth, tforth; compile tcolon )
only forth tforth  also forth  also tcolon defs

: literal  >literal ;  immediate

: (  [compile] (  ; immediate
: [  [compile] [  ; immediate

( branching and looping words -- from fig with changes )
( stack comments are all COMPILE-TIME behavior )

: if     ( -- if-branch^ 2 )
         ?comp  >zbranch @ >, >mark  2  ;  immediate

: endif  ( if-branch^ 2 -- )
         ?comp 2 ?pairs  >resolve  ;  immediate

: then   [compile] endif  ;  immediate

: else   ( if-branch^ 2 -- else-branch^ 2 )
         2 ?pairs
         >branch @ >,  >mark  swap
         ( -- else-branch^ if-branch^ )
         2 [compile] endif  2 ;  immediate

: begin  ( -- top^ 1 )
         ?comp  <mark  1 ; immediate

: again  ( top^ 1 -- )
         ?comp  1 ?pairs   >branch @ >,  <resolve ;  immediate

: while  ( top^ 1 -- top^ 1 while-branch^ 4 )
         ?comp  [compile] if  2+  ;  immediate

: repeat ( top^ 1 while-branch^ 4 -- )
         ?comp  >r >r [compile] again
         r> r> 2-     [compile] endif  ; immediate

: until  ( top^ 1 -- )
         ?comp  1 ?pairs  >zbranch @ >,  <resolve ;  immediate

( What follow are words for a Forth-83 implementation of )
( DO, LOOP, +LOOP and ?LEAVE. The difference is that in fig we just )
( let the regular compiler compile the "run-time" LEAVE which just )
( set the index = limit.  The next LOOP or +LOOP then exited the )
( loop.  In -83 this is not possible since loop exits occur when )
( the index make a transition from limit-1 to limit, so LEAVE must )
( exit immediately.  There can be multiple LEAVEs in a do-loop, )
( however, so there's a little trick: we compile after the cfa )
( of >do a byte-long offset past the end of the loop.  This is )
( only if ever used by ?leave.  When >do executes, it pushes the )
( addr of the top of the loop onto the return stack where >loop )
( and >+loop know where to find it.  I don't even define LEAVE )
( since it seems useless; we'll always want ?leave instead. )

: do     ( -- jmp-offset^ 3 )
         ?comp  >do @ >,  >mark  3 ; immediate

: loop   ( jmp-offset^ 3 -- )
         ?comp  3 ?pairs  >loop @ >,  >resolve ;  immediate

: +loop  ( jmp-offset^ 3 -- )
         ?comp  3 ?pairs  >+loop @ >,  >resolve ; immediate

toss ( only search forth; tforth )

: ;  ( -- )
  >exit @ >, ( compile end of high-level word )
  RestoreContext  ( the context saved by does> or : )
  smudge ( no error checking, yet )
  [compile] [  ( execute state again ) ;  immediate

only forth defs



