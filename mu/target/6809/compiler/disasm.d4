( disasm -- 6809 disassembler )
( daf   2-oct-92   created )
( daf   9-dec-92   finished with 2ops, cleaned up )
(                  changed GetB and GetW to call >c@ and >@ )


only forth definitions

vocab {disasm}


also {disasm}  defs

var ip  ( insn pointer )

( fPage is 1 if page2 opcode encountered; 2 if page3 )
var fPage

hex

: GetB  ( -- b )  ( get next byte in insn stream )
  ip @ >c@ 1 ip +! ;

( >@ is careful of odd addresses!! )
: GetW  ( -- w )  ( get a word from insn stream )
  ip @ >@  2 ip +! ;

: tab  ( imitate tab character behavior )
  8 out @ 7 and - spaces  ;

: cr   cr 0 out ! ;



hex

: ====   ." ????" ;  ( nop for vectoring )

( utility words )
( sign-extend byte and word )
: xb->l  ( b -- l )  dup 80 and if [ 0ff -1 xor ] literal or endif ;
: xw->l  ( w -- l )  dup 8000 and if 0ffff0000 or endif ;

: lbra-dest  ( -- ipDest ) GetW  xw->l  ip @ + ;
: bra-dest   ( -- ipDest ) GetB  xb->l  ip @ + ;

( print byte and word, NOT followed by a space )
( NOTE: Yerk uses fig-like picture-number conventions; )
( in particular, SIGN contains a ROT.  this is unlike f-83 )
: s->sign+dabs  ( s -- s ud )  s->d swap over dabs ;
: u.b  ( b -- ) s->sign+dabs <# # # rot sign #>  type ; ( unsigned )
: u.w  ( w -- ) s->sign+dabs <# # # # # rot sign #> type ;
:  .b  ( b -- )  xb->l u.b ;  ( signed )
:  .w  ( w -- )  xw->l u.w ;


( addressing modes )

( immediate )
: imm8   tab ascii # emit GetB u.b ;
: imm16  tab ascii # emit GetW u.w ;

( direct )
: dir  tab GetB  ascii > emit u.b ;

( extended )
: ext  tab GetW  ascii > emit u.w ;

( inherent )
: acca ascii a emit ;
: accb ascii b emit ;

( indexed )

: ireg ( pb -- )
  60 and 5 >> lit" xyus" 1+ + c@ emit ;

( the following are called with the postbyte on stack )
( pb -- )
: ,r      ascii , emit ireg ;
: ,r+     ,r ascii + emit ;
: ,r++    ,r+ ascii + emit ;
: ,-r     ." ,-" ireg ;
: ,--r    ." ,--" ireg ;
: b,r     accb ,r ;
: a,r     acca ,r ;
: #,r     dup 1 and if GetW .w else GetB .b endif ,r ;
: d,r     ascii d emit ,r ;
: #,pcr   1 and if GetW else GetB endif ip @ + .w  ." ,pcr" ;
: [#@]    drop ( pb ) ." >" GetW u.w ;  ( ind will do the [,] )

: ind  ( indexed )
  tab GetB  ( get postbyte )
  dup 80 and
  if ( not 5-bit offset )
    dup 10 and if ascii [ emit endif  ( indirect left brack )
    dup dup 0f and
    #switch
      ,r+   ,r++   ,-r   ,--r
      ,r    b,r    a,r   drop
      #,r   #,r   drop   d,r
      #,pcr #,pcr drop   [#@]
    endswitch
    10 and if ascii ] emit endif  ( indirect right brack )
  else ( 5-bit offset )
    dup 1f and dup 10 and if 0e0 + endif .b ,r
  endif   ;

( each of these words parses a group of opcodes )

hex
: 1op   ( op -- )
  dup 0f and   dup 2* +
  lit" neg??????comlsr???rorasraslroldec???inctstjmpclr" 1+ + 3 type
  0f0 and 4 >>
  #switch
    dir ==== ==== ==== acca accb ind ext
  endswitch
  ;


( 1-column words )
: nop    ." nop" ;
: sync   ." sync" ;
: daa    ." daa" ;

: lbra   ." lbra"  lbra-dest tab u.w ;
: lbsr   ." lbsr"  lbra-dest tab u.w ;
: orcc   ." orcc"  imm8 ;
: andcc  ." andcc" imm8 ;

: sex    ." sex" ;

: .reg   ( reg -- )  ( for tfr, exg )
  dup 0c <
  if
    2* lit" d x y u s pc????a b ccdp" 1+ + 2 -trailing type
  else
    drop ." ??"
  endif  ;

: exg-tfr  tab GetB  ( ssssdddd)
  dup 0f0 and 4 >> .reg ascii , emit 0f and .reg ;

: exg    ." exg"   exg-tfr ;
: tfr    ." tfr"   exg-tfr ;

: 1-column    ( op -- )
  0f and
  #switch
    ====   ====   nop   sync
    ====   ====   lbra  lbsr
    ====   daa    orcc  ====
    andcc  sex    exg   tfr
  endswitch ;



( branch is 2-column )
: branch ( op -- )
  fPage @ 1 = if ( long branch )
    ascii l emit  lbra-dest
  else
    bra-dest
  endif
  ascii b emit ( start of branch name )
  swap ( dest op ) 0f and 2*
  lit" rarnhilshsloneeqvcvsplmigeltgtle" 1+ + 2 type
  ( calculate destination of jump )  tab u.w ;



( 3-column words )

: lea$    ( op -- )
  ." lea"  30 - lit" xysu" 1+ + c@ emit ind ;

: psh-pul ( op -- )
  dup 1 and if ." pul" else ." psh" endif
  dup 2 and     if ascii u else ascii s endif emit
  tab
  ( do register list: )
  GetB 8 0 do ( check each bit )
    dup 1 and  ( -- op regs f )
    if
      i 6 =
      if ( special case: reg is u or s depending on opcode )
        over 2 and if ascii s else ascii u endif emit
      else ( lookup )
        lit" cca b dpx y   pc" 1+ i 2* + 2 -trailing type
      endif space
    endif
    2/ ( shift right )  loop 2drop ;


: 38-3f   ( op -- )
  dup 3f =
  if ( special case )
    ." swi"
    fPage @ ?dup if ( 0=no page, 1=page2, 2=page3 )
      ascii 1 + ( 2 for page2, 3 for page3 ) emit
    endif
    drop ( op )
  else
    7 and 4*
    lit" ????rts abx rti cwaimul ????" 1+ + 4 -trailing type
  endif ;

: 3-column    ( op -- )
  dup 0f and 2 >>
  #switch
    lea$  psh-pul  38-3f  38-3f
  endswitch  ;

: 2op16 ( op -- )
  >r r@ 0f and
  dup 03 = if
    ( x4: subd, cmpd, cmpu, addd )
    fPage @ r@ 40 and if 3 + endif 4*
    lit" subdcmpdcmpuaddd" 1+ + 4 type drop ( op )
  else dup 0c = if
    ( xc: cmpx, cmpy, cmps, ldd )
    r@ 40 and if
      ." ldd"
    else
      ." cmp" fPage @ lit" xys" 1+ + c@ emit
    endif drop ( op )
  else dup 0d = if
    ( xd: jsr, std )
    r@ 40 and if ." std" else ." jsr" endif drop
  else
    ( must be xe or xf: ld[xyus] or st[xyus] )
    0e = if ." ld" else ." st" endif
    fPage @ ( 0 1 2 ) r@ ( op ) 40 and if 2+ endif
    lit" xyus" 1+ + c@ emit
  endif endif endif
  r> ( op ) 30 and 4 >> #switch
    imm16 dir ind ext
  endswitch ;


: 2op   ( op -- )
  dup 8d = if ." bsr" bra-dest tab u.w drop else
  dup 0f and dup 3 = swap 0b > or if 2op16 else
  dup 0f and dup 2* +  ( *3 )
  lit" subcmpsbc???andbitld st eoradcor add " 1+ + 3 -trailing type
  dup 40 and if accb else acca endif
  30 and 4 >> #switch
    imm8 dir ind ext
  endswitch
  endif endif ;


: OpParse ( op -- )
  dup 80 and if 2op else  ( 8 .. f is all 2op )
  dup 0f0 and 4 >>
  #switch
    1op 1-column branch 3-column   ( 0 .. 3 )
    1op 1op 1op 1op                ( 4 .. 7 )
  endswitch  endif  ;

( if page2 or page3 opcode we set the right flags and then fetch )
( another opcode; if not, pass the opcode thru. )
: ?Page ( op -- op' )
  dup 10 = if drop 1 fPage !  GetB else
  dup 11 = if drop 2 fPage !  GetB endif endif ;

: 1dis    ( disassemble 1 insn at ip )
    0 fPage !  GetB ?Page OpParse ;


: test cr  10 0 do i over + opparse cr loop drop ;

forth defs  {disasm}

: dis     ( addr # -- )  ( disassemble )
  swap  ip !  0 do cr ( out = 0 ) ip @ u.w 2 spaces 1dis loop cr ;



