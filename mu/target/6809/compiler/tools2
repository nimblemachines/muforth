( tools -- little tools for debugging and running interactively )
( daf  15-dec-92  created )
( daf  18-feb-93  changed chat stuff so that host expressly )
(          requests sp from target. )


only forth  definitions

: .b  ( print byte, hex )
  base @ hex swap 0 <# # # #> type space  base ! ;

: .w  ( print word, hex )
  base @ hex swap 0 <# # # # # #> type space  base ! ;


: n.  ( >cfa -- )
  >r  target-vocab @
  begin
    dup if ( not at end of vocab )
      name> dup ( cfa ) >body 4+ w@  ( target cfa )
      r@ -  ( flag: 0=matched )
    else 0  ( as if we matched )
    endif
  while  ( not = )
    >link @  ( follow link )
  repeat
  ?dup if >name id. endif
  r> drop ;

hex
: .cc ( b -- )  ( print condition codes )
  80 8 0 do ( for each bit )
    2dup and
    if ( true ) ascii 1 else ascii 0 endif emit
    2/ ( move mask bit down one )
  loop 2drop ;

decimal
( prints for s the value *before* the swi in chat )
: .r  ( print regs )
  ." pc=   x=    y=    u=    s=    a= b= dp=  efhinzvc" cr

  pc chat>@ .w space
   x chat>@ .w space
   y chat>@ .w space
   u chat>@ .w space
   spReg @ 12 + .w space  ( s register before swi )
   a chat>c@ .b
   b chat>c@ .b
  dp chat>c@ .b
  2 spaces  cc chat>c@ .cc cr
  next^ @ if  ( if defined )
    y chat>@ ( ip ) chat>@ ( cfa ) n.
  endif ;


hex

( read memory : target's if interactive, image otherwise )
: rm  ( addr #b -- )
  over 0f and
  if ( addr not a mult of 16 )
    ( print address rounded down )
    over  [ 0f -1 xor ] literal and .w space
    ( followed by filler spaces for missing bytes )
    over  0f and dup  3 * spaces  2/ 2/ spaces
  endif
  over + swap do
    i 0f and 0= if ?quit cr i .w space endif
    ( address every 16 bytes )
    i >c@ .b  ( print byte followed by space )
    i 3 and 3 = if space endif  ( follow group of 4 with sp )
  loop  cr ;

( we need to read from target the values for interrupt vectors )
( that we haven't specifically set. )
( and we also fix up target's vectors that a reset may have )
( clobbered. )
hex
: sync-vectors
  0e 0 do
    i image>@ ( look in image ) ?dup 0= if i chat>@ endif
    i >! ( store into image and target )
  2 +loop ;

: reset-target
  freshStack  ( set target's sp, cc with Ebit )
  0fffe chat>@ ( get reset vector ) pc chat>! go ;

: hi  ( shorter 'hello' )
  printer =midi   chat>sp dup spReg !  0c + rBase !  sync-vectors ;

: hello
( execute when 6809 reset and when a target image is ready )
  hi
  image>  ( copy image to target )
  interactive on ( start chatting! ) ;



( ------ NOTE WELL !!! --------- )
( Every kernel needs to start with chat-mode or eprom-mode, )
( otherwise hell might break loose.  We could cheat slightly )
( and execute chat-mode after defining it, which means that )
( chat-mode is the default and eprom-mode must be explicity )
( indicated in the target file.  Let's do that. )
hex

: chatty
  image dA !  ( dA = -origin + image )
  ram-only on
  new ;

chatty

hex
0800 const 2k
1000 const 4k
2000 const 8k
4000 const 16k

: romit  ( size -- )
  depth 1 - abort" I need a rom size! (2k, 4k, 8k, 16k)"
  10000 - image + dA !  ( dA = -origin + image )
  ram-only off
  new ;

: bp^  (  -- >addr )  ( returns addr of breakpoint # )
  next^ @ 2+ ( past cmpy# insn ) ;

: bp-normal  ( breakpoint if =, ie, cmpy # result is zero )
  ( bp 2+ is addr of bne insn in *next* )
  26 ( bne insn ) bp^ 2+ chat>c! ;

: bp-always
  ( bp 2+ is addr of bne insn in *next* )
  21 ( brn insn ) bp^ 2+ chat>c! ;

: bp  ( ip -- )  ( sets breakpoint at ip )
  bp^ >! ;

: g  ( go )
  0 bp  go .r ;

hex
: ei ( enable interrupts )  cc chat>c@ 0af and cc chat>c! ;
: di ( disable interrupts ) cc chat>c@ 50  or  cc chat>c! ;

decimal
: diff  ( show differences between image and target )
  interactive @ if
    80 out !
    >here 0 do
      i image>c@ i >c@ - if
        out @ 64 > if cr 0 out ! endif
        i .
      endif
    loop
  endif ;

hex
: single-step ( ip -- )
 ( execute next cfa, or, if special, let *next* take us to next ip )
  dup image>@ ( ip cfa )
  dup  >blit    @ =       ( ip cfa =? )
  over >lit     @ = or
  over >zbranch @ = or
  over >branch  @ = or
  over >do      @ = or
  over >loop    @ = or
  over >+loop   @ = or
  over >?leave  @ = or
  over >exit    @ = or  if  ( *special* cfa )
    2drop ( ip & cfa )
    bp-always go ( exec one cfa ) bp-normal
  else ( not special )
    bp-normal ( just to make sure )
    drop ( cfa ) 2+ ( ip to next cfa ) bp^ chat>! go
    bp^ image>@ bp^ chat>! ( restore old bp )
  endif ;

: s  ( step )
  y chat>@ ( ip )  single-step  .r ;


: ld  interactive off  // ;

also tforth defs

: ld  ld ;

only forth defs

