( wwind -- woodwind driver )
( daf  3-feb-93  created )
( daf 10-feb-93  borrowed from drums, modified to leave out lights )
( daf 14-jun-93  borrowed from perc and modified )

forth target

hex

decimal

var ticks  -1 allot ( byte count of clock ticks that have occurred )
  ( we ignore ticks in this application )

var inst

compiler
: table  create  ;code  ( read-only )
    2 x #) leax  addr inst ^ ldd  aslb rola ( 2* )
    d x r) ldx  << x >> pshu next end-code

: array  create 2* allot ;code  ( read-write )
    pointx       addr inst ^ ldd  aslb rola
    d x r) leax  << x >> pshu next end-code

target

4 array padCur  ( array of current "pads" )
table padMin  16 , 40 , 64 , 88 ,
5 const #pads

( map note to inst 0-3, set inst )
code set-inst ( nt -- )
  1 u #) lda  ( note )
  2 u #) leau
  -2 # ldb
  begin
    incb
    24 # suba
  0< until
  clra addr inst ^ std next end-code

code max
  << d >> pulu   u ) cmpd  > if u ) std endif next end-code

compiler
: pad-driver  create c, ;code  ( padMin count -- )
  ( simple for-loop in place )
hex
w[
  u )    std
  2 u #) addd  ( cntCur + padMin )
  2 x #) orb   ( or in the mask bits )
  b400 ^ stb   ( write to port )
]w
  u )    ldd
  1 #    subd
0>= while
  4 u #) leau  ( pop loop parms )
  next end-code

decimal
target

00  pad-driver off
128 pad-driver on

: pads ( pad# -- padMin count )
  1+ dup #pads - padMin max  ( -- max+1 min )
  swap over -  ( -- min count ) ;

: note-off ( pad# -- )
  padCur @ over - if drop else pads off endif ;

: note-on ( pad# -- )
  padCur @ ?dup if pads off endif  ( if note playing, turn it off )
  dup pads on  padCur ! ;

( note makes sure to mask the high bit of the note number )
( it also subtracts 8 to make "midi" note numbers into internal )
( note numbers.  24 maps to 16, etc. )

: note ( midi-note# vel -- )
  >r 127 and dup 8 - swap set-inst r>
  if ( note-on, ie, vel != 0 ) note-on else note-off endif ;

: age-notes ;  ( dummy )

hex
: clear-notes
  0 80 off
  3 0 do i inst !  0 padCur ! loop ;


only forth defs
