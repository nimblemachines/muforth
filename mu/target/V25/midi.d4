( = V25 MIDI DRIVER =)

( Copyright 1995, 1996, 1999, 2000 David Frech & Remmy Demmy Productions.)

cr  s" MIDI (not Minnie) Driver " file[

signature" V25 MIDI Driver v2.1. "
signature" Copyright (c) 1995, 1996, 1999, 2000 "
signature" David Frech & Remmy Demmy Productions. "
signature" P0<7>=set/-reset; P0<6:0>=latch#. "
signature" P1<7>=velocity strobe; P1<6>=hold strobe. "
signature" P1<3>=channel increment/preset. "
signature" P2<7:0>=channel display. "
signature" PT<3:0>=channel preset #. "
created-on


( Tasks )
 0
( #s  #r  #u)
 128 128  32  BACKGROUND Operator
 128 128  32  BACKGROUND father-time
 128 128  32  BACKGROUND slave
debug [if]  128 128  32  BACKGROUND debugger  [then]
loopback [if]
            128 128  32  BACKGROUND maker     [then]
                                        CIRCLE Operator

( Ports)   hex
f10 CONSTANT display
f38 CONSTANT jumpers

: PORTS   0 latches IO!  c0 strobes IO!  ( data low, strobes hi)
          0 f01 IOW!   ( port0 is data, oooo/oooo)
       000f f09 IOW!   ( port1 is data, oooo/iiii)
          0 f11 IOW!   ( port2 is data, oooo/oooo)
          8 f3b IO!    ( portT: threshold @ Vcc/2)  ;  decimal


(           7     6     5     4     3     2     1     0
Port 0:   s/-r   d6    d5    d4    d3    d2    d1    d0
Port 1:   /vel  /hold   x     x   /chan   x     x     x
Port 2:   display bits
Port T:     x     x     x     x    ch3   ch2   ch1   ch0     preset chan#
)

0 [if]
( channels)
CREATE digits   ( 0 = omni; 1 .. 16)
 (  habcdefg              habcdefg              habcdefg  )
   %00010011 C, ( omni)  %00110000 C, ( 1)     %01101101 C, ( 2)
   %01111001 C, ( 3)     %00110011 C, ( 4)     %01011011 C, ( 5)
   %01011111 C, ( 6)     %01110010 C, ( 7)     %01111111 C, ( 8)
   %01111011 C, ( 9)     %11111110 C, ( 10)    %10110000 C, ( 11)
   %11101101 C, ( 12)    %11111001 C, ( 13)    %10110011 C, ( 14)
   %11011011 C, ( 15)    %11011111 C, ( 16)    ( Phew!!)

#####  on 0 2 4 sets  a g d  resp.
#....  on 0 2 4 does nothing
....#  ditto
#...#  ditto
.....  on 0 2 4  sets nothing but increments line#

##### on 1 3 is illegal
#.... on 1 3  sets  f e  resp
....# on 1 3  sets  b c  resp
#...# on 1 3  sets  f&b  e&c  resp
..... on 1 3  does nothing; incr line#

[then]


host
: segment   ( bits which - bits')  pop  3  |vector|  or  ;
: -pix    c" bad digit picture" throw  ;
: ?pix    if  -pix  then  ;
: +line   1 +under  ;
: line   over push  +line  pop  ;
: grafik  constant  ;
: odd    ( line# bits - line# bits which odd)  line  2 u/mod  swap  ;


0 [if]
: .binary8  binary  0 <#  # # # # # # # #  #> type  decimal  ;
: d;      nip  ( - bits)  dup .binary8  cr  ( C,)  ;  ( debug)
[then]

(   +  +-a-+
    h  f   b
    +  +-g-+
    h  e   c
    +  +-d-+   )

( habcdefg)
 %10000000 grafik h
 %01000000 grafik a
 %00100000 grafik b
 %00010000 grafik c
 %00001000 grafik d
 %00000100 grafik e
 %00000010 grafik f
 %00000001 grafik g
 b f or    grafik bf
 c e or    grafik ce

variable ten
meta

:O tens   h ten !  ;O

:O .....   +line  ;O
:O #####   odd ?pix   segment  a   g   d     -pix  ;O
:O #....   odd if     segment  f   e   -pix  -pix  then  drop  ;O
:O ....#   odd if     segment  b   c   -pix  -pix  then  drop  ;O
:O #...#   odd if     segment  bf  ce  -pix  -pix  then  drop  ;O

:O digit   create   0 0  ( line# bits)  ;O
:O d;      nip  ( - bits)  ,  does>  @  ten @  or  \o C,  ;O

digit omni  ( lightning)
    #....  ( nothing)
    #....  ( sets f)
    #####  ( g)
    ....#  ( c)
    ....#  ( nothing)  d;  ( omni!)

digit `0'
    #####
    #...#
    #...#
    #...#
    #####  d;

digit `1'
    ....#
    ....#
    ....#
    ....#
    ....#  d;

digit `2'
    #####
    ....#
    #####
    #....
    #####  d;

digit `3'
    #####
    ....#
    #####
    ....#
    #####  d;

digit `4'
    #...#
    #...#
    #####
    ....#
    ....#  d;

digit `5'
    #####
    #....
    #####
    ....#
    #####  d;

digit `6'
    #####
    #....
    #####
    #...#
    #####  d;

digit `7'
    #####  ( sets a)
    #...#  ( sets f b)
    ....#  ( nothing)
    ....#  ( sets c)
    ....#  ( nothing)  d;

digit `8'
    #####
    #...#
    #####
    #...#
    #####  d;

digit `9'
    #####
    #...#
    #####
    ....#
    #####  d;


( The digits!)
CREATE digits
   omni   `1'   `2'   `3'   `4'   `5'   `6'   `7'   `8'   `9'   tens
          `0'   `1'   `2'   `3'   `4'   `5'   `6'


( Channels.)
: SHOW  ( chan# -)
   1+  ( 0=omni; 1-16)  digits + ROM@  display IO!  ;

: CONFIGURE  ( - channel#)
   strobes IO@  8 AND  ( channel-irq switch NOT depressed)
   IF  OMNI -1  ELSE  jumpers IO@  15 AND  DUP CHANNEL  THEN  DUP SHOW  ;

: CHANNEL+  ( channel @)  1+  15 AND   DUP CHANNEL  DUP SHOW  ;


( Channel IRQ.)
VARIABLE channel-requests  ( irq increments)

LABEL channel-changer
   SS: 1 # channel-requests ) ADD,  ( increment requests)   carry IF,
   SS: RUN #  debug [if]  debugger  [else]  Operator  [then]  ) MOV,  THEN,
   FINT,  IRET,  C;

( 'code vector# priority IRQpri IRQreg)
channel-changer  26  7  "f4c  "f4e  HANDLER channel-change-ISR

: SWITCH   ( n io)   IO!   channel-requests OFF  channel-requests 1DOWN  ;
: SWITCH^   "40 "f40 SWITCH  ;  ( INT P2 rising)
: SWITCH_     0 "f40 SWITCH  ;  ( INT P2 falling)

( Main loop.)
: SURF    ( ie channels)
   CONFIGURE  channel-change-ISR  +IRQ
   strobes IO@  8 AND  0= IF  ( switch down)  SWITCH^  20 ms  THEN
   BEGIN
      SWITCH_
      CHANNEL+  CLEAR   -IRQ  slave MIDI  +IRQ  ( restart MIDI)  20 ms
      SWITCH^   20 ms
   AGAIN  -;

: OK   PORTS  600 us  ;
: TASKS   father-time AGES  slave MIDI  PAUSE  ;
   ( let them run once and do their 1DOWN)

loopback [if]
VARIABLE maker-channel
VARIABLE between
VARIABLE 'step
: STEP  'step @EXECUTE  ;
: 1x    lit STOP   'step !  ;
: run   lit PAUSE  'step !  ;

: +channel   ( status +chan - status')  maker-channel @ + "0f AND  OR  ;
hex
: SYS-EX   f7  10 20 30 40 50 60 70  f0   9 SEND  ;
decimal
: x   maker WAKE  ;   ( do the next step)
: @r   ( - 'top i r t)   slave top HERS @  DUP  @+ SWAP  @+ SWAP  @  ;
:O r   ." t=" u.  ." r=" u.  ." i=" u.  ." 'top=" u.  ;O
: MAKES   ACTIVATE   debug [if]  1  [else]  0  [then]  SERIAL
   ( maker-channel OFF)   jumpers IO@  maker-channel !
   ( 0 between !)    ( 5000 ms)   run
   16 FOR  STEP  16 FOR   "f8 EMIT   64 EMIT  NEXT  NEXT
   0  BEGIN  STEP
      DUP  127 AND
      ( note-on)                  127  OVER  "f8  "90 0 +channel  4 SEND
      ( running note-on off)        0  OVER 10 -  127 AND  2 SEND  ( off)
      ( polyphonic after-touch)   127  OVER  "fa  "a0 2 +channel  4 SEND
      ( control change)            64  OVER  "fb  "b0 3 +channel  4 SEND
      SYS-EX
      ( program change)                 DUP  "fc  "c0 4 +channel  3 SEND
      ( mono after-touch)               DUP  "fe  "d0 5 +channel  3 SEND
      ( pitch wheel)                 DUP  0  "ff  "e0 6 +channel  4 SEND
      ( note-off)      1- 127 AND  64  SWAP  "f9  "80 1 +channel  4 SEND
      ( PAUSE  ( between @ ms)
      1+  511 AND   DUP 0= IF  100 ms  THEN   AGAIN  -;

[then]
debug [if]
: go   -IRQ  OK  TASKS  loopback [if]  maker MAKES  [then]
       debugger ACTIVATE  SURF  -;  [then]

eprom [if]
: BOOT  OK  TASKS  loopback [if]  maker MAKES  [then]  SURF  -;  [then]

]file
