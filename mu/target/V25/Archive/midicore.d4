( V25 MidiCore. Solenoid (note) control and timing, basic midi engine.)

( Created 18jan96 - pygmy-DOS version.)
( Modified for dforth 05-aug-1999.)

cr  ." (( MidiCore "

decimal

( 5 aug 1999. If we make GRIND a deferred word and reorg this file can we
  make it clearer and avoid patching the jump table? Also we need to figure
  out how to factor out filtering. In some cases we'll want the thing to be
  omni, always; in others respond to fixed channels; and in yet others, to
  have a channel set button and a channel display. This also means that we
  need to send `status' to NOTE-ON and NOTE-OFF so they can decide how what
  to do, if they do different things based on the channel.)


( Ports:
P0 =  S/-R  d6  d5  d4  d3  d2  d1  d0         set/reset, data
P1 =   -S0 -S1   X   X   X   X   X   X         strobes)


( Note timing)

( 08-aug-1999. I tried to make this fancy, but it doesn't work. It's very
  hard to remove notes from the list, so we return to the old way. Sigh.
  Only we solve at least one problem: the old V25 version would try to re-
  strobe the note. We avoid that here. And we avoid the capture problem that
  both the 6809 and old V25 methods exhibited, by using a different decision
  for whether a note is playing already. Now it is free if it points to it-
  self - something it will never do while playing.)

VARIABLE zero         ( index of zero duration list)
128 CARRAY duration   ( array of heads of duration lists)
128 CARRAY follows    ( array of pointers to next note)

( Because duration has 128 entries, the max "velocity"
  we can use is 127.  Arithmetic on "zero" must be mod 128.)

( Latch strobes)
CODE STROBE  ( latch#+fON strobe -)
   AX POP, ( latch+fON)
   ES: AL "F00 ) MOV, ( out port0)   ( ES = i/o)
   ES: BL "F08 ) XOR, ( strobe low)
   ES: BL "F08 ) XOR, ( strobe hi)
    t POP,  NEXT,  C;
( Note: n 0 STROBE is a no-op.)

( LOG is tricky. If note is already playing - ie, it does not follow itself
  in the list - then we jump out of our caller and skip the strobe. This
  is a little bit ugly but saves some time. We could also pass a strobe of
  0 to STROBE - this will execute and act as a nop. If this seems too ugly,
  it can always be changed.)

CODE LOG  ( status note# dur - note#+fOn strobe)
   w POP, ( note)  AX POP, ( status)  w DX MOV, ( note)
   ( only put into list if not already; ie, link pts to itself)
            | follows # w ADD,
             SS: 0 [w] DL CMP,  |code DROP-EXIT 0= UNTIL,  DX AX MOV, ( note)
           SS: | zero ) t ADD,  127 # t AND, ( t=duration+zero)
    SS: | duration [t] DL XCHG, ( old head <-> new note)
             SS: DL 0 [w] MOV,  ( old head follows new note)
         "80 # AL OR,  AX PUSH, ( note+fOn)  "c0 # BL MOV, ( strobe)
   NEXT,  C;

( EXPIRING determines if there are any expired notes to shut off, and,
  if so, fetches the first one in the duration list and nils the list head.)

CODE EXPIRING  ( - 0 | note -1)
   t PUSH,  t t XOR, ( flag)  255 # AX MOV, ( AH=0, AL=nil)
    SS: | zero ) w MOV,  SS: | duration [w] AL XCHG, ( head <-> nil)
   w INC,  127 # w AND,  SS: w | zero ) MOV,
   AL AL OR,  0< not IF, ( not empty)
   AX PUSH, ( note)  t DEC, ( -1)  THEN,  NEXT,  C;

CODE UNLOG   ( note - following 0 note strobe | -1 note strobe)
   t w MOV, ( note copy)  t DX MOV, ( another copy)  -1 # AX MOV, ( flag)
   | follow # w ADD,  SS: DL 0 [w] XCHG, ( note <-> following)
   BL DL CMP, ( note = following?)   0= not IF,  DX PUSH, ( following)
   AX INC, ( flag=0)  THEN,  ( else flag is -1)  AX PUSH, ( flag)
   t PUSH, ( note),  "80 # BL MOV, ( strobe)  NEXT,  C;

: LATCH-ON   ( status note vel)   LOG      STROBE        ;
: LATCH-OFF  ( status note)            "40 STROBE  DROP  ;

: CLEAR
   0  128 FOR   DUP "c0 STROBE  1+  NEXT
   0  128 FOR   DUP DUP follows + C!  1+  NEXT  2DROP
     zero OFF   duration 128 -1 FILL  ;

VARIABLE age-ticks   ( semaphore counter)
: AGES   ( 'task)  age-ticks OFF  ACTIVATE  { uS/tick } LITERAL uS
   BEGIN
      BEGIN  age-ticks 1DOWN   EXPIRING UNTIL  ( something 2 do)
      BEGIN  UNLOG STROBE  UNTIL
   AGAIN  -;

| father-time  constant tick-task
| age-ticks    constant task-tick-counter
ld v25/timer.d4

( Load serial port support.)
debug constant serial1-config
ld v25/serial.d4


( We're sharing midi-out between scanning and the midi that's coming in.
  We need to serialize access to the output port.)
VARIABLE midi-out  ( task that owns the port)

( MIDI out)
: SEND-ON   ( status note vel -)
   ( get midi xmitter)  midi-out TAKE
   ROT DUP EMIT ( status)   ROT DUP EMIT ( note)  ROT DUP EMIT ( vel)
   midi-out RELEASE  ;

: SEND-OFF  ( status note -)
   ( get midi xmitter)  midi-out TAKE
   OVER EMIT ( status)  DUP EMIT ( note)        0 EMIT ( vel)
   midi-out RELEASE  ;


debug ?[
( Midi interrupt    DEBUG )
CODE serial-in-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-in # BX MOV,  ( 'queue)
   "f70 # DI MOV, ( serial1)   serial-in-irq jump,
CODE serial-out-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-out # BX MOV, ( Q)
   "f70 # DI MOV, ( serial1)   serial-out-irq jump,  C;
: +MIDI-IRQS   1 SERIAL  -IRQ
   31250 BPS  8N1  +Rx  ( no +Tx!!)
   lit serial-in-midi  17 INSTALL
   lit serial-out-midi 18 INSTALL  +IRQ  0 SERIAL  ;

: +MIDI-OUT  1 SERIAL    7 TxIRQ IO!  0 SERIAL  ;
: +MIDI      1 SERIAL    7 RxIRQ IO!  0 SERIAL  ;
: -MIDI      1 SERIAL  "47 RxIRQ IO!  0 SERIAL  250 MS  ;
                  ( disable IRQs, let notes die out)  ]?

eprom ?[
( Midi interrupt    EPROM )
CODE serial-in-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-in # BX MOV,  ( 'queue)
   "f60 # DI MOV, ( serial0)   serial-in-irq jump,
CODE serial-out-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-out # BX MOV, ( Q)
   "f60 # DI MOV, ( serial0)   serial-out-irq jump,  C;
: +MIDI-IRQS   0 SERIAL  -IRQ
   31250 BPS  8N1  +Rx  ( no +Tx!!)
   lit serial-in-midi  13 INSTALL
   lit serial-out-midi 14 INSTALL  +IRQ  ;

: +MIDI-OUT   7 TxIRQ IO!  ;
: +MIDI       7 RxIRQ IO!  ;  ( enable IRQ)
: -MIDI     "47 RxIRQ IO!  250 MS  ;
             ( disable IRQ, let notes die)  ]?

CODE ?JUMP  ( returns non-status bytes or jumps to status routine)
   BL BL OR,  0< IF, ( status)
   t w MOV,  "70 # w AND,  3 # w SHR, ( lo 3 bits of status, *2)
   0 # w ADD,  here 2 - ( jump table)
   0 [w] w MOV,  -2 [w] JMP,  THEN,
   ( data byte)  NEXT,  C;

: MIDI@  ( - b)  KEY  ?JUMP  ;

CODE FRESH  ( status)  ( for running status types)
   ( clears both stacks, then pushes top - a status byte - onto r)
   SS: | u )        r MOV,  ( RP!)
       | bottom [r] s MOV,  ( SP!, but keeping top)
   r DEC,  r DEC,  t 0 [r] MOV,  "cafe # t MOV,  NEXT,  C;

: GRIND  ( status -)
   FRESH  BEGIN  MIDI@ DROP  AGAIN  -;
   ( infinite, till `MIDI@' returns to someone else..)


( note-on   note-off)
: NOTE-ON-RUNNING  ( status -)
   FRESH
   BEGIN   DUP ( status)  MIDI@ ( note#)  MIDI@ ( vel)
           ?DUP  IF    NOTE-ON
                 ELSE  NOTE-OFF  THEN   AGAIN  -;

: NOTE-OFF-RUNNING  ( status -)
   FRESH
   BEGIN   DUP ( status)  MIDI@ ( note#)  MIDI@ ( vel)
                                          DROP  NOTE-OFF   AGAIN  -;

( status byte jump table)
: Fx  ( status -)
   DUP 8 AND IF ( realtime)  DROP  MIDI@  EXIT   THEN   GRIND  -;

HERE  ]
   NOTE-OFF-RUNNING   NOTE-ON-RUNNING      ( 8x  9x)
   GRIND   GRIND   GRIND   GRIND   GRIND   Fx   [
 (  Ax      Bx      Cx      Dx      Ex     Fx)

{  swap !  ( resolve)  }


( midi task support)
: LISTEN  ( 'midi-task -)  ACTIVATE
   256 midi-in QINIT  0 GRIND  -;
   ( set channel elsewhere)

: HIGH  ( mask port -)
   BEGIN  PAUSE  2DUP  IO@ AND     UNTIL  2DROP  ;

: LOW   ( mask port -)
   BEGIN  PAUSE  2DUP  IO@ AND  0= UNTIL  2DROP  ;

 ." )) "




