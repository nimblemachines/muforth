( Target compiler for v25.  headaches galore!!
  re-worked for dforth, 4-sep-1998)

cr ." (( Target compiler "

( 15-sep-1998.  Changed to use the capitalization convention already in effect
  in the code I wrote for the Pygmy cross-compiler.  Maybe this way I can do
  a lot less work converting the old stuff.  Of course it means changing the
  assembler and -also- switching the kernel back.  Ugh.)

( 24-sep-1998.  Changed to simpler dictionary.)

( 18-aug-1999. Changed to a more complicated dictionary. :-| I've been caught
  by the `which word to compile' bug, and needed to make searching work better
  in the presence of the meta-compiler.

  I want the host's forth to remain completely `pure' during
  meta-compilation. No words can show up there that don't have to do with
  normal host forth things, like finding words or making new words or even
  making new defining words. Actually it's not quite that strict. What we
  want is for the pieces to be defined in forth, but the top-level word -
  like the new `:' for target compilation - to be in meta, so we don't get
  it by accident.

  All the `meta' words go into a new vocab - called `meta-forth' - that
  concerns itself with issues of meta-ness. The `:' that defines new target
  words is here, as is the colon word - `::' - that defines new
  meta-defining words. The ' in meta-forth will search target and not
  [host's] forth.

  The meta -interpreter- will -never- look in forth. So we have to have an
  escape mechanism if we want to compute `a b +' while running the
  meta-interpreter. `{' solves this problem; `[' does the same thing inside
  the meta-compiler.

  In the meta compiler is the word `::', used to compile new meta-compiler
  words. It also compiles from the host's forth; actually, it first searches
  the host's -compiler- vocab, so that things like if..then will work, then
  searches meta and lastly searches forth. The main thing is that when, after
  having loaded the target compiler, we're typing at the `command line', we
  don't -ever- want to accidentally execute a host forth word.

  The assembler, on the other hand, searches the assembler and then the host
  vocab - but -not- the meta vocab! Unless I find that this doesn't make
  sense.

  Target words are defined so that when executed they call `remote'.

  ARGH! After scratching my head for a long time wondering why the meta-
  interpret loop seemed to hang I realized something: the sentinels were
  missing! The easiest way to make this work again is to put, in dforth.m4,
  sentinels for every thread. Which I did.

  19-aug-1999. Wrong again. Searching only meta in `target' interpretation
  mode makes finding information really tedious, and involves a lot of repli-
  cation, and creates more confusion than it eliminates. The good idea here
  was creating a `meta' vocabulary with words useful in a `target' or `meta'
  interpretation - NOT compilation - mode. The bad idea was not also searching
  the regular host `forth' as well. It might be nice to be able to drop back
  into a `pure' host forth - and this is still possible. But it's too arduous
  to search only meta. Back to work.

  In general, once we've started the meta-compiler we'll be compiling new
  tools into `meta' - this means that assembler constants and stuff like that
  should be defined in meta, and the assembler loop should search meta as
  well.

  I think I'm still wrong. I think the right idea is to factor the existing
  forth into -three- vocabularies: forth, definer, compiler. forth is every-
  thing simple, like `@ ! +'. definer is `variable create : constant' &c.
  compiler is `if then begin while for' &c. We want to be careful not to mix
  up our host definers and target definers, just as we've [already] separated
  the host and target compiler vocabs.

  There are now perhaps four modes we can be in:  host interpret, host
  compile, target - meta - interpret, target compile.

  Host interpret: definer execute; forth execute; number
  Host compile:   compiler execute; definer compile; forth compile; literal

  Meta interpret: target execute; meta-definer execute; forth execute; number
  Meta-definer compile:
                 compiler execute; meta-definer compile; forth compile; literal
  Target compile: meta-compiler execute; target compile; target-literal

  Yargh. Actually one of the main sources of confusion is being able to access
  in the assembler constants that are defined only on the host, but are used
  only for target compilation/assembly. These right now go into forth. But is
  that the right place? If we're using a `pure' meta method, then these all
  need to go only into `meta' and then accessing them from the assembler, which
  doesn't search meta, becomes clumsy.

  I think the thing to do is catalog the information that is needed for dif-
  ferent tasks. There are four tasks: loading code from disk, assembling
  code words, colon compiling, and interacting with the target. These have
  rather different requirements.

  Ok, ok. It turns out that my original way was the best: slowly replace the
  `definer' words in the forth vocab with meta-definers, add a special meta-
  compiler vocab - called `meta' - and compile the compiler-like words into
  that. If we get confused at run time it's still possible to run a forth-
  only interpreter - we -will- get meta-definer words but no target words.

  Now I think I understand all this stuff. Phew.)

forth  decimal

( primitives )
variable 'lit       variable '2lit
variable 'does      variable 'evokes
variable 'br        variable '0br         variable 'exit
variable 'for       variable '?for        variable 'next


( Metacompiler vocabs)
4 vocab meta-forth
5 vocab meta-compiler
6 vocab target

: \f  ( compile from forth)           forth \thread  ;

meta-compiler
: LITERAL   ( n -)  'lit @  >,  >,  ;
: 2LITERAL  ( d -)  '2lit @  >,  swap  >, >,  ;
compiler
: \mf  ( compile from meta-forth)      4 \thread  ;
: \mc  ( compile from meta-compiler)   5 \thread  ;
: \t   ( compile from target)	       6 \thread  ;
forth

: silent  drop  here count type  ." : not chatting"  cr  ;
  ' silent ' remote !

: ,tnumber  ( d | n)
   tnumber  dpl @  0< if  \mc LITERAL  else  \mc 2LITERAL  then  ;

: meta-interpret  ( a #)   source 2!
   begin   6 -' ( target) if   4 -find if  ( meta-forth)
      lit tnumber  then  then   execute  ?stack   again  -;

: new-loader  ( 'interpret)
       lit interpret @ push
       lit interpret !  lit ld catch
   pop lit interpret !         throw  ;

: mld  ( meta ld)   lit meta-interpret   new-loader  ;
:  ld               lit host-interpret   new-loader  ;

meta-forth
: {   source 2@  host-interpret  ;  ( run host interpreter)
: }   shunt  -;  ( jump out)
: mld   mld  ;
:  ld    ld  ;
forth

: }   shunt  -;  ( jump out)
( Let's also make an escape into meta-forth from from forth.)
: {   source 2@  meta-interpret  ;

( We'll be using this when compiling meta-compiler words, to include
  expressions from forth vocab)
compiler
: {   standard-]  ;
forth


: target-]
   begin  5 -'  ( meta-compiler) if   6 -find  ( target) if
               ,tnumber   else   @ ( target pfa)  >,  then
                   else    execute  then  ?stack  again  -;


: meta-]   ( structured like target colon compiler)
   begin  2 -'  ( compiler) if        4 -find  ( meta-forth) if
                ,number    else   ,a ( meta-forth)   then
                   else    execute  then  ?stack  again  -;

( This is the meta-compiler compiler!)
meta-forth
: ]   target-]  ;
: ::   lit meta-] lit ] !  meta-forth : forth  lit standard-] lit ] !  ;
forth

( Memory mismanagement)
variable r        ( ram allocation pointer)
meta-forth
: ALLOT  ( n -)  r +!   ;  ( advance ram allocation pointer)
: RAM    ( - a)  r @    ;  ( next available ram)
forth
: .RAM   cr  ." RAM usage is "  \mf RAM .  ." bytes. "  ;

( User variables)
variable #u   ( bytes allocated)
meta-forth
: UALLOT  ( n -)  #u +!  ;  ( analogous to ram, allot)
: #USER   ( - #)  #u @   ;
forth
: .USER   cr  ." User area is "  \mf #USER .  ." bytes. "  ;

( New image)
: new  ( new memory image)
   wipe  ( reset pointers, fill code with nops, word with zeroes)
   r off ( start ram allocation at 0)
   #u off  ( reset count of user area)  ;

forth
: .MEM   .USER  .RAM  ;

( Finish up after compiling.)
: finish  ( jiffies)
   image
   cr .MEM
   cr ." Boot address is "  hex  |boot @ . decimal
   cr ." Signature is "  "here .  ." bytes."
   cr ." Code is "  |here .  ." bytes."
   cr ." Words is "  >here .  ." bytes."
   cr ." Total size is "   "here |here >here + +  . ." bytes."
   cr  ." word-seg is "  hex  u.  decimal
   cr  ." Compilation took "  u.  ." jiffies."  ;


meta-forth
: '    6 -' abort" : not defined in target"  @  ( target-pfa)  ;
: |    \mf '  >+  >@  ;  ( find target word and fetch the 1st word of its pfa)
: |code   \mf '  >+  2 -  >@  ;  ( fetch code field)


( Meta structures   until again if then etc)
meta-forth
: mark>      ( - fwd)    >here  0 >,  ;
: <resolve   ( back -)   >,a  ;              ( more flexible this way)

meta-compiler
: BEGIN   ( - back)  >here  ;
: UNTIL   ( back -)       '0br @ >,  \mf <resolve  ;
: AGAIN   ( back -)       'br  @ >,  \mf <resolve  ;
: THEN    ( fwd -)   >here  swap  >+ >!  ;
: IF      ( - fwd)        '0br @ >,  \mf mark>  ;
: JUMP>   ( - fwd)         'br @ >,  \mf mark>  ;  ( unconditional)
: >JUMP   ( fwd back - back)   swap  \mc THEN  ;
: WHILE   ( back - fwd back)  \mc IF  swap  ;
: REPEAT  ( fwd back -)   \mc AGAIN   \mc THEN  ;
: ELSE    ( fwd0 - fwd1)  \mc JUMP>   \mc >JUMP  ;  ( strange but true)
: FOR     ( - back)       'for @ >,  \mc BEGIN ;  ( u times; 64k for 0)
: ?FOR    ( - fwd back)  '?for @ >,  \mf mark>   \mc BEGIN  ;
: NEXT    ( back -)      'next @ >,  \mf <resolve  ;

( .. FIRST .. BEGIN .. THEN <test> UNTIL .. ; FIRST jumps to THEN)
( n FOR .. NEXT        goes n times; 64k if n=0 )
( n ?FOR .. NEXT THEN  goes n times; 0 if n=0 )

( More compiling words.)
:  ;      show  'exit @ >,  shunt  -;
:  -;     show              shunt  -;

: char  \f char   \mc LITERAL  ;
: (     \f (  ;
: [   shunt  -;
: {     \mf {  ;     ( run host-interpret)
compiler
: }   shunt  -;         ( switch back to meta-] )
forth


( Dictionary entries.)

( >name creates a head that needs show to make it findable.)
: >name      target name forth  0 >,align  >here 2 + ,  ( pfa)
             does>  @  ( target pfa)  remote  ;

: >patch    pop @  last-code @  cell+  @ ( target word)
	    >+  ( image)  2 -  >!  ;
: <;code>   show   compile >patch   |here ,  ;


( These are renamed so they're more `friendly'.)
meta-forth
: (    \f (  ;
: SKIP   shunt  -;   ( for exiting early from reading files)
: ,      >,   ;
: C,     >c,  ;
: ,A     >,a  ;   ( so we don't have to remember to use the funny-looking ones)
: HERE   >here  ;
: char   \f char  ;

( For convenience.)
: hex  hex  ;
: decimal  decimal  ;
: octal  octal  ;
: .  .  ;
: u.  u.  ;
: .s  .s  ;
: constant   meta-forth constant forth  ;

( Debug or EPROM)
( The defining word `config' for creating conditional compilation words.)
: config   source 2@ 2push   dup  meta-forth    constant
              2pop source 2!      meta-compiler constant  forth  ;

debug  { config debug }
eprom  { config eprom }

meta-compiler
: ?[   \ ?[  ;
: ][   \ ][  ;
: ]?   \ ]?  ;
meta-forth
: ?[   \ ?[  ;
: ][   \ ][  ;
: ]?   \ ]?  ;
forth


( This <does> is tricky.  Since code and words are separate, we cannot
  simply insert a `call do_does' into the sequence of addresses.  Instead
  we assemble the `call do_does' into code space followed by the ip to
  start executing.)

( 15-apr-2000. This way of doing DOES> - a CALL dodoes followed by new ip -
  takes 41 + 2w cycles on the V25. A MOV #new_ip, AX; JMP dodoes takes only
  20 cycles, and only one byte more. Let's do it.)
00 ?[
: <does>   ( offset)
   <;code>  <asm  ) CALL,  asm>  >here  |, ( ip)  target-]  ;
][
: <does>   ( offset)
   <;code>  >here  |, ( ip)  <asm  # AX MOV,  ) JMP,  asm>  target-]  ;
]?

compiler
: ;CODE    <;code>  assemble  shunt  -;
: DOES>    'does @    <does>  shunt  -;  ( readonly)
: EVOKES>  'evokes @  <does>  shunt  -;  ( volatile)
forth


( Assembler)
meta-forth
: assemble   assemble  ;
: CODE             >name  show  |here  >,  assemble  ;
: CODES  ( code)   >name  show         >,  ;
io-seg   constant io-seg
ram-seg  constant ram-seg

assembler
: LABEL   |here  \mf constant  ;

: t   \a BX ;    : [t]    \a [BX] ;
: i   \a SI ;    : [i]    \a [SI] ;
: w   \a DI ;    : [w]    \a [DI] ;
: s   \a SP ;    ( can't do [SP] on 8086!)
: r   \a BP ;    : [r]    \a [BP] ;
                 : [t+w]  \a [BX+DI] ;
                 : [t+i]  \a [BX+SI] ;

: NEXT,   <asm  AX LODS,  w AX XCHG,  -2 [w] JMP,  asm>  ;

( Assembler needs some arithmetic and a few other useful things.)
: +  +  ;
: -  -  ;
: *  *  ;
: /  /  ;
forth


( Signatures)
: "sign   ( a #)  push  "here "+  r@ cmove  pop "h +!  ( sig allot)  ;
           ( for putting signature in kernel)
meta-forth
: signature"      char " word  count  "sign  ;

( Timestamping creation dates.)
: created-on   s" Created: " "sign   epoch time"  "sign  ;
forth
variable stamped  stamped off

( Phew!  That wasn't so bad...)

." )) "
