( V25 MidiScan. Basic midi engine, midi merge for scanning.)

( Created 18jan96 - pygmy-DOS version.)

( Modified for dforth 05-aug-1999.)

( 22-aug-1999. Split into a separate version for scanning, for now. It merges
  scanned data with MIDI in, so it's a little different from the standard
  version.)

( 20-sep-1999. Conditionalized the midi code so scanning can share code with
  other apps.)

cr  ." (( MIDI core "

>here  |here  2push

decimal

( 5 aug 1999. If we make GRIND a deferred word and reorg this file can we
  make it clearer and avoid patching the jump table? Also we need to figure
  out how to factor out filtering. In some cases we'll want the thing to be
  omni, always; in others respond to fixed channels; and in yet others, to
  have a channel set button and a channel display. This also means that we
  need to send `status' to NOTE-ON and NOTE-OFF so they can decide how what
  to do, if they do different things based on the channel.)


midiscan ?[

( We're sharing midi-out between scanning and the midi that's coming in.
  We need to serialize access to the output port.)
VARIABLE midi-out  ( task that owns the port)

( MIDI out)
: SEND   ( bn bn-1 .. b1 n -)
   midi-out TAKE   FOR  EMIT  NEXT   midi-out RELEASE  ;

]?



( Status byte dispatching.)
CODE ?JUMP  ( returns non-status bytes or jumps to status routine)
   BL BL OR,  0< IF, ( status)
   t w MOV,  "70 # w AND,  3 # w SHR, ( lo 3 bits of status, *2)
   "100 [w] w MOV, ( force word offset)  |here |+ 2 - ( jump table)  swap
   -2 [w] JMP,  THEN,  ( data byte)  NEXT,  C;

: MIDI@  ( - b)  KEY  ?JUMP  ;


midifilter ?[  ( channel filtering)

CODE FRESH  ( status)  ( for running status types)
   ( clears both stacks, then pushes top - a status byte - onto r)
   SS: | u )        r MOV,  ( RP!)
       | bottom [r] s MOV,  ( SP!, but keeping top)
   r DEC,  r DEC,  t 0 [r] MOV,  "cafe # t MOV,  NEXT,  C;

][ ( no filtering)

CODE FRESH  ( status)  ( for running status types)
   ( clears both stacks, then pushes top - a status byte - onto r)
   SS: | u )        r MOV,  ( RP!)
       | bottom [r] s MOV,  ( SP!, but keeping top)
   r DEC,  r DEC,  t 0 [r] MOV,  "cafe # t MOV,  NEXT,  C;

]?  ( channel filtering)

: GRIND  ( status -)
   FRESH  BEGIN  MIDI@ DROP  AGAIN  -;
   ( infinite, till `MIDI@' returns to someone else..)

midiscan ?[

( subtracted from midi-in -> latch; added to latch# for midi-out)
( Set at startup from jumpers/DIP switch.)
VARIABLE transpose

: NOTE-ON-RUNNING  ( - ; R: status - status)
   FRESH
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)
           DUP  IF    OVER transpose @ -  OVER  +LATCH  SWAP R@  3 SEND
                ELSE  OVER transpose @ -        -LATCH  SWAP R@  3 SEND  THEN
   AGAIN  -;

: NOTE-OFF-RUNNING  (  - ; R: status - status)
   FRESH
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)
           OVER  transpose @ -  -LATCH  SWAP R@  3 SEND   AGAIN  -;

][  ( non-scan)

: NOTE-ON-RUNNING  (  - ; R: status - status)
   FRESH
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)
           DUP  IF    OVER transpose @ -  OVER  +LATCH  SWAP R@  3 SEND
                ELSE  OVER transpose @ -        -LATCH  SWAP R@  3 SEND  THEN
   AGAIN  -;

: NOTE-OFF-RUNNING  (  - ; R: status - status)
   FRESH
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)
           OVER  transpose @ -  -LATCH  SWAP R@  3 SEND   AGAIN  -;

]? ( midiscan)


( status byte jump table)
: Fx  ( status -)
   DUP 8 AND IF ( realtime)  DROP  MIDI@  EXIT   THEN   GRIND  -;

HERE  ]
   NOTE-OFF-RUNNING   NOTE-ON-RUNNING      ( 8x  9x)
   GRIND   GRIND   GRIND   GRIND   GRIND   Fx   [
 (  Ax      Bx      Cx      Dx      Ex     Fx)

{  swap >!  ( resolve)  }


debug ?[
: EAT-MIDI  ( task)  ACTIVATE
   input1  ReceiveISR1  BEGIN  KEY DROP  AGAIN -;

: LISTEN  ( 'midi-task -)  ACTIVATE
   1 SERIAL  input1  ReceiveISR1  0 GRIND  -;
][

( This is a little bit subtle. We need to call SERIAL from -both- the midi
  task and the scanner task. The way in which we call LISTEN accomplishes
  this.)

: +SERIAL   0 SERIAL  { 31250 50 / } LITERAL 50xBPS  +Rx +Tx 8N1  ;

: LISTEN  ( 'midi-task -)  +SERIAL  ACTIVATE
   0 SERIAL  input0  ReceiveISR0  0 GRIND  -;
]?

: MIDI   ( task)  midi-out OFF  LISTEN  ;


2pop  |here swap-  ." code " .  >here swap-  ." ; words "  .

 ." )) "
