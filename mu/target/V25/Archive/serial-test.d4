cr ." (( Serial test "

decimal

(  Usage:  00 s r u BACKGROUND panel1
              s r u BACKGROUND watchdog ... CIRCLE panel1 )

00 64 64 32 BACKGROUND Operator
   64 64 32 BACKGROUND aa
   64 64 32 BACKGROUND bb
   64 64 32 BACKGROUND dd
				CIRCLE Operator

( Text out)
CODE C@+   ( a - a+1 ch)   AX AX XOR,  SS: 0 [t] AL MOV,  t INC,  t PUSH,
   AX t MOV,  NEXT,  C;
CODE >C@+   ( a - a+1 ch)   AX AX XOR,  0 [t] AL MOV,  t INC,  t PUSH,
   AX t MOV,  NEXT,  C;


: COUNT  ( c" - a c)  C@+  ;
: TYPE   ( a c)  FOR  C@+  EMIT  NEXT  DROP  ;
: >COUNT  ( c" - a c)  >C@+  ;
: >TYPE   ( a c)  FOR  >C@+  EMIT  NEXT  DROP  ;
32 CONSTANT BL
: SPACE  BL EMIT  ;
: CR     13 EMIT  10 EMIT  ;

( Pictured Numeric)
: >DIGIT   ( n - ch)  ( convert 1 binary digit to char; hex to uppercase)
   9 OVER U<  7 AND +  char 0 +  ;

02 USER radix
: /DIGIT   ( ud - ud' r)
   0  radix @  UM/MOD  PUSH ( qhi)  radix @ UM/MOD ( r q)  POP  ROT  ;

: DNEGATE  0 0  2SWAP  D-  ;
: DABS  ( d - abs(d)  S->D IF DNEGATE THEN  ;

:: RADIXER  CREATE ,  EVOKES>  radix !  ;
10 RADIXER DECIMAL
16 RADIXER HEX
 6 RADIXER 6ARY

14 USER hld  ( 2 + 12 for pad)
00 USER pad
: HOLD  ( ch)  -1 hld +!  hld @  C!  ;
: <#    pad hld !  ;
: #>    ( ud - a #)  2DROP  hld @  pad OVER -  ;
: #     ( ud - ud')   /DIGIT  >DIGIT  HOLD  ;
: #S    ( ud - 0 0)  BEGIN  #  2DUP OR 0=  UNTIL  ;
: SIGN  0< IF  char - HOLD  THEN  ;

: (UD.)   ( ud - a #)  <# #S #>  ;
: U.      ( u -)    0  (UD.)  TYPE  SPACE  ;

: (D.)    ( d - a #)
          DUP PUSH ( sign)  DABS  <# #S  POP SIGN  #>  ;
: D.      ( d -)       (D.)  TYPE  SPACE  ;

: (.)     ( n - a #)   S->D  (D.)  ;
: .       ( n -)       (.)  TYPE  SPACE  ;

: ?  @ .  ;


( Ticks)
VARIABLE tick-count

         -01 constant tick-wakes
| tick-count constant tick-counter
ld v25/timer.d4

: TICKING  ( task)  tick-count OFF  ACTIVATE  600 uS
   BEGIN  tick-count 1DOWN  AGAIN  -;

: +SERIAL  "f60 port !  ( 1 SERIAL
   { 57600 50 / } LITERAL  50xBPS  8N1 +Rx +Tx  )  ;

: SHOW  ( n)  BRK  DROP  ;


( String primitives.)
: ALIGNED   ( a - a')  DUP 1 AND +  ;
:: aligned   ( a - a')  dup 1 and +  ;  ( we need both!)
: skip"     ( - c")    2POP  DUP >COUNT + ALIGNED  PUSH SWAP PUSH  ;
: dot"      skip"  >COUNT >TYPE  ;

( Host word need to compile strings.)
:: string,  ( ch -)   word ( c")  dup c@ 1+  ( a c+1)  aligned  push
   >here >+  r@ cmove ( to image)  pop  >h +!  ;

meta
:: ."   { ' dot" }  literal  >,   char "  string,  ;
forth

: HI  BRK  ." David's embedded Forth, v3.0."  CR  ;

: CAT  char C EMIT  char a EMIT  char t EMIT  SPACE  ;
: DOG  char D EMIT  char o EMIT  char g EMIT  SPACE  ;
: NUMB  -1  U.  ;

: TYPING  ( task)  ACTIVATE   +SERIAL  DECIMAL
   BEGIN  PAUSE  CAT DOG  CAT DOG  CAT DOG  CAT DOG  tick-count ?  AGAIN  -;

( To test we're going to send chars from chan1 to chan1)
: LOOPBACK  1 SERIAL  { 57600 50 / } LITERAL  50xBPS  8N1 +Rx +Tx
   ACTIVATE  1 SERIAL  DECIMAL  BEGIN  CAT DOG  NUMB  PAUSE  AGAIN  -;

( This is funny. KEY reads from the queue, which is programmed to read
  from channel 1. EMIT writes to what's in `port' - channel 0.)

: LOOPREAD  ( 'task)
   ACTIVATE  input1  ReceiveISR1  0 SERIAL
   BEGIN    KEY EMIT   AGAIN  -;


: BOOT
   aa LOOPBACK  bb LOOPREAD  dd TICKING  600 uS  +IRQ
   BEGIN   4000 MS  "babe SHOW   AGAIN  -;

 ." )) "

