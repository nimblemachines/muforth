( V25 MidiXfour. Solenoid (note) control and timing, basic midi engine.
  For four banks of 64 notes.)

( Created 18jan96 - pygmy-DOS version.)
( Modified for dforth 05-aug-1999.)
( Continuing mods. 09-aug-1999.)

cr  ." (( MIDI times four "

decimal

( 5 aug 1999. If we make GRIND a deferred word and reorg this file can we
  make it clearer and avoid patching the jump table? Also we need to figure
  out how to factor out filtering. In some cases we'll want the thing to be
  omni, always; in others respond to fixed channels; and in yet others, to
  have a channel set button and a channel display. This also means that we
  need to send `status' to NOTE-ON and NOTE-OFF so they can decide how what
  to do, if they do different things based on the channel.)


( Ports:
P0 =  S/-R  d6  d5  d4  d3  d2  d1  d0         set/reset, data
P1 =   -S0 -S1 -S2 -S3   X   X   X   X         strobes)


( Note timing)

( 08-aug-1999. I tried to make this fancy, but it doesn't work. It's very
  hard to remove notes from the list, so we return to the old way. Sigh.
  Only we solve at least one problem: the old V25 version would try to re-
  strobe the note. We avoid that here. And we avoid the capture problem that
  both the 6809 and old V25 methods exhibited, by using a different decision
  for whether a note is playing already. Now it is free if it points to it-
  self - something it will never do while playing.

  This file is for fourtimesMIDI. Given the special situation, tho, we can
  make an optimization: allot 64 notes per section. At most 48 are used:
  16-63. Zero is free to stand for `nil'. And 64 * 4 = 256! So it fits in
  a byte. Phew. Now we can go back to one duration and one follows array.)

VARIABLE zero         ( index of zero duration list)
128 CARRAY duration   ( array of heads of duration lists)
256 CARRAY follows    ( array of pointers to next note)
( For this 4x midi, we're only using 48 notes, plus usual offset of 16.
  64 per section, times 4.)

( Because duration has 128 entries per instrument group, the max "velocity"
  we can use is 127.  Arithmetic on "zero" must be mod 128.)

( Latch strobes)
CODE STROBE  ( latch#+fON strobe -)
   AX POP, ( latch+fON)
   ES: AL "F00 ) MOV, ( out port0)   ( ES = i/o)
   ES: BL "F08 ) XOR, ( strobe low)
   ES: BL "F08 ) XOR, ( strobe hi)
   BX POP,  NEXT,  C;

assemble
LABEL DROP-EXIT
   t POP,  0 [r] i MOV,  r INC,  r INC, ( pop)  NEXT,  C;

CODE LOG  ( status note# dur - note#+fOn strobe)
   DX POP, ( note)  63 # DX AND,  DX AX MOV,  w POP, ( status)
   3 # w AND, ( chan 1-4)  w CX MOV,  6 # w SHL, ( *64)  DX w ADD,
 ( only put into list if not already; ie, link pts to itself)
      | follows  [w] DL CMP,  DROP-EXIT 0= UNTIL,  ( !! jump out !!)
      | zero ) t ADD,  127 # t AND, ( t=duration+zero)
      | duration [t] DL XCHG, ( old head <-> new note)
   DL | follows  [w] MOV,     ( new note follows = old head)

   "80 # AL OR,  AX PUSH, ( note+fOn)
   ( CL=chan)  "80 # t MOV,  CL t SHR, ( BX=strobe)  NEXT,  C;

CODE ZEROTH  ( - a)
   t PUSH,  t t XOR,  | zero ) w MOV,  | duration [w] BL XCHG, ( note <-> nil)
   | follows # t ADD,  w INC,  127 # w AND,  w | zero ) MOV,  NEXT,  C;

( Oh shit.)
CODE UNLOG  ( a - follow 0 note strobe | -1 note strobe)
   DI POP, ( bank)  255 #, AX MOV,  ( AL=nil; AH=0)
   0 [BX+DI] AL XCHG, ( AL=note)  AL AL OR,  0< IF, ( end of list)
   128 # DI ADD, ( bank+)  DI PUSH,  -1 # PUSH, AX PUSH, ??? STROBE  ELSE,
   DI PUSH, ( bank)  AX t MOV,  | follows # t ADD, t PUSH, ( a')
   0 # PUSH,  AX PUSH,  ??? STROBE  THEN,
   ( CL=chan)  "80 # t MOV,  CL t SHR, ( t=strobe)  NEXT,  C;

: NOTE-ON  ( status note vel -)  LOG  STROBE  ;

: CLEAR  ( times FOUR! ??? )
   0  128 FOR   DUP "f0 STROBE  1+  NEXT
   0  256 FOR   DUP DUP follows + C!  1+  NEXT  2DROP
   zero OFF  duration 128 0 FILL  ;

( Be sure to call AGES -before- enabling interrupts. Otherwise the clock
  task will write the constant `RUN' into some random memory location.)

VARIABLE age-ticks   ( semaphore counter)
: AGES   ( 'task)  age-ticks OFF  age-ticks OVER TICK-TASK   ACTIVATE
   BEGIN  age-ticks 1DOWN
      ZEROTH  BEGIN  UNLOG STROBE  UNTIL  AGAIN  -;

( Note: n 0 STROBE is a no-op.)
( Note 2: I just realized that this has to work with four separate channels of
  percussion! That means four sets of notes!)



( Serial out interrupt)                          HEX
KCODE LABEL serial-out-irq     SI PUSH,
   ( call with BX=queue, DI='ser-port; caller pushed BX DI)
   2 [BX] SI MOV, ( +rd)  4 [BX] SI CMP,  0= not  IF,  AX PUSH,
   8 [BX+SI] AL MOV, ( ch from Q)  ES: AL 2 [DI] MOV, ( xmit)
   AX POP,  SI INC,  0 [BX] SI AND, ( wrap)  SI 2 [BX] MOV,
   6 [BX] SI MOV, ( task)  0 [SI] W-PTR DEC, ( Up semaphore)
   ELSE,  ( Q empty)  ES: 7f # 8 [DI] AND, ( disable tx)  THEN,
   SI POP,  DI POP,  BX POP,  FINT,  IRET,  C;
                                              DECIMAL
( mask +rd +wr task data
  0    2   4   6    8
We use +rd = +wr as queue empty, so writer cannot fill the Q to
full capacity.)

( Midi queues)                          DECIMAL
32  QUEUE midi-out
256 QUEUE midi-in    ( 256 bytes of buffer)

EPROM  ( stack:  ch -
: MIDI!   1 AWAIT  midi-out Q!
   1 SERIAL  +Tx   0 SERIAL ;
     ( this first def will be skipped in EPROM mode)

DEBUG  (
: MIDI!   1 AWAIT  midi-out Q!  +Tx  ;
     ( skipped in DEBUG mode)


( In this case we are using AWAIT to wait for ROOM in the Q
and not a char available.)

( midi out)
: SEND-ON   ( note vel -)  PUSH  "90 DUP MIDI! ( status)  SWAP
   DUP MIDI! ( note)  R@ MIDI!  POP  ( vel)  NOTE-ON  ;

: SEND-OFF  ( note -)  "90 DUP MIDI! ( status)  SWAP
   DUP MIDI! ( note)  0 MIDI! ( vel)  NOTE-OFF  ;


debug ?[
( Midi interrupt    DEBUG )
CODE serial-in-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-in # BX MOV,  ( 'queue)
   "f70 # DI MOV, ( serial1)   serial-in-irq jump,
CODE serial-out-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-out # BX MOV, ( Q)
   "f70 # DI MOV, ( serial1)   serial-out-irq jump,  C;
: +MIDI-IRQS   1 SERIAL  -IRQ
   31250 BPS  8N1  +Rx  ( no +Tx!!)
   lit serial-in-midi  17 INSTALL
   lit serial-out-midi 18 INSTALL  +IRQ  0 SERIAL  ;

: +MIDI-OUT  1 SERIAL    7 TxIRQ IO!  0 SERIAL  ;
: +MIDI      1 SERIAL    7 RxIRQ IO!  0 SERIAL  ;
: -MIDI      1 SERIAL  "47 RxIRQ IO!  0 SERIAL  250 MS  ;
                  ( disable IRQs, let notes die out)  ]?

eprom ?[
( Midi interrupt    EPROM )
CODE serial-in-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-in # BX MOV,  ( 'queue)
   "f60 # DI MOV, ( serial0)   serial-in-irq jump,
CODE serial-out-midi  ( do NOT call directly!)  STI,
   BX PUSH,  DI PUSH,  | midi-out # BX MOV, ( Q)
   "f60 # DI MOV, ( serial0)   serial-out-irq jump,  C;
: +MIDI-IRQS   0 SERIAL  -IRQ
   31250 BPS  8N1  +Rx  ( no +Tx!!)
   lit serial-in-midi  13 INSTALL
   lit serial-out-midi 14 INSTALL  +IRQ  ;

: +MIDI-OUT   7 TxIRQ IO!  ;
: +MIDI       7 RxIRQ IO!  ;  ( enable IRQ)
: -MIDI     "47 RxIRQ IO!  250 MS  ;
             ( disable IRQ, let notes die)  ]?

( CALL  MIDI@)
: CALL  ( status status -)
   "70 AND  -4 SHIFT  [[ HERE ]] nope  ;  ( will be table jump)

: MIDI@  ( - b)  1 AWAIT  midi-in Q@
   DUP 0< IF  ( status)  DUP CALL  THEN  ;

unused ?[
CODE CALL  ( status - status)              HEX
   t DI MOV,  70 # DI AND,  3 # DI SHR,
   BP DEC,  BP DEC,  ip 0 [BP] MOV,  ( push ip)
   AAAA [DI] ip MOV,  ( set ip from table)   HERE 2 - ( mark)
   NEXT,  C;                               DECIMAL   ]?


( ?? This should be compile-time option ??)
( channel filtering)
VARIABLE channel         ( -1 omni; 0-15)
VARIABLE channel-match
VARIABLE channel-mask
: OMNI    -1 channel !  channel-match OFF  channel-mask OFF  ;
: CHANNEL+   channel @ 1+ 15 AND  DUP channel !
   channel-match !  "0f channel-mask !  ;

: GRIND  ( status -)
   SP!  RP!  BEGIN  MIDI@ DROP  AGAIN  -;
   ( infinite, till `MIDI@' returns to someone else..)

: FILTER  ( status - status)
   DUP channel-mask @ AND  channel-match @ =
   IF  PUSH SP! POP  EXIT  THEN  ( else)  GRIND  -;

( note-on   note-off)
: NOTE-ON-RUNNING  ( status -)   FILTER  RP!  BEGIN
   DUP ( status)  MIDI@ ( note#)  MIDI@ ( vel)
   ?DUP  IF    NOTE-ON
         ELSE  NOTE-OFF  THEN   AGAIN  -;

: NOTE-OFF-RUNNING  ( status -)  FILTER  RP!  BEGIN
   DUP ( status)  MIDI@ ( note#)  MIDI@ ( vel)
   DROP  NOTE-OFF   AGAIN  -;


( status byte jump table)
: Fx  ( status -)  DUP 8 AND IF ( realtime)  DROP  MIDI@  EXIT
   THEN   GRIND  -;

: WHICH  ( index -)  POP  INDEX ROM@  ;  ( ?? jump to ip - does this work ??)

: jump  ( status status-index -)  WHICH
   NOTE-OFF-RUNNING   NOTE-ON-RUNNING      ( 8x  9x)
   GRIND      GRIND                        ( Ax  Bx)
   GRIND      GRIND      GRIND   Fx   -;    ( Cx  Dx  Ex  Fx)

HOST  ' jump  SWAP !  ( resolve)


( midi task support)
: LISTEN  ( 'midi-task -)  ACTIVATE
   256 midi-in QINIT  0 GRIND  -;
   ( set channel elsewhere)

: HIGH  ( mask port -)
   BEGIN  PAUSE  2DUP  IO@ AND     UNTIL  2DROP  ;

: LOW   ( mask port -)
   BEGIN  PAUSE  2DUP  IO@ AND  0= UNTIL  2DROP  ;

 ." )) "




