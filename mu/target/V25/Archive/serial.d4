( V25 Serial)

( 17-aug-1999. Created, with much anguish and gnashing of teeth.)
( 18-aug-1999. Added code so everything is self-installing.)
( 19-aug-1999. For the life of me, I can't get V25 xmit interrupts to work.
  It just sits there like a stubborn mule. So I'm going back to the simple.
  With a slight hack to the multitasker - the addition of the entry point
  `STALL' which backs up ip so that the calling word will get re-executed
  after PAUSE - I have a simple, fast way of doing output that doesn't seem
  to interfere with tasking. Good enough.)

cr ." (( Serial "

( See the file SEMAPHORES for the thinking behind all this.)

00 constant variable-length-queues   ( this could change)
( Define `serial1-config' to also configure port 1.)

( Host-side definer.)
:: field  ( offset size - offset+size)  over constant  +  ;

( For simplicity, and since output queues don't seem to exist any more -
  for right now anyway - I'm making queues 256 bytes long. Masking is now
  an AND immediate.)

( Queue structure:)
   00
   02 field qavail   02 field qroom
   02 field qrd      02 field qwr
variable-length-queues ?[
   02 field qmask      ]?
   constant qdata


debug ?[
:: .q  ( q)    hex  4 for  dup \t @ .  2 +  next  cr
  16 for  2 for  8 for  dup \t C@ .b16 space  1+  next  space  next  cr  next
   drop  decimal  ;
]?

:: QUEUE  ( user-queue-var - qram: for RBINSTALL)
   CREATE  RAM dup ,   swap , ( qvar)
           256 qdata +  ALLOT
           ( ROM:  0:data  2:queue-var)

   ;CODE     t PUSH, ( extra hand)  0 [w] t MOV, ( ram)
variable-length-queues ?[
       4 [w] AX MOV,  SS: AX  qroom [t] MOV, ( size)
             AX DEC,  SS: AX  qmask [t] MOV,
                       ][
                    SS: 256 # qroom [t] MOV,
                       ]?
00 ?[
       6 [w] AX MOV,  SS: AX  qport [t] MOV,
   ]?
          AX AX XOR,  SS: AX    qrd [t] MOV,
                      SS: AX    qwr [t] MOV,
                      SS: AX qavail [t] MOV,
       2 [w] AX MOV,  SS:      | u )  w MOV, ( w = 'task from u, the caller)
00 ?[
                      SS: w   qtask [t] MOV,
   ]?
           AX w ADD, ( pt to q var)
                      SS: t       0 [w] MOV, ( user var = q)
   t POP,  NEXT,  C;


( Serial ports)
hex  ( These are host-side constants!)
 00 constant RxD       02 constant TxD      08 constant SerialMode
 0c constant ErrIRQ    0d constant RxIRQ    0e constant TxIRQ        decimal
:: serial  ( offset port# - port)  1 and  16 *  "f60  +  +  ;

( The New Transmit Code.)
02 USER port
CODE EMIT  ( b -)
   SS: | u ) w MOV, ( user)  SS: | port [w] w MOV,
   ES: "80 # TxIRQ [w] BYTE TEST,  STALL 0< UNTIL,  ( backs up i!)
   ES: "47 # TxIRQ [w] BYTE MOV,  ES: BL TxD [w] MOV,
   t POP,  NEXT,  C;


02 USER input      ( pointer to input queue)

CODE INPUT-AVAILABLE   ( - 'q 'sema)
   SS: | u ) w MOV, ( get user to w)  SS: |  input [w] w MOV,
   t PUSH,  w PUSH, ( q)  qavail [w] t LEA,  NEXT,  C;

CODE Q@   ( 'q - ch)   ( increment ROOM)
   AX AX XOR,
   SS:   qrd [t] w MOV,  SS: qdata [t+w] AL MOV,  w INC,
variable-length-queues   ?[  SS: qmask [t] w AND,  ][  255 # w AND,  ]?
   SS:  w  qrd [t] MOV,
   SS:   qroom [t] INC,  AX t MOV,  NEXT,  C;

: KEY?   ( - #)   INPUT-AVAILABLE    NIP   @  ;
: KEY   ( - ch)   INPUT-AVAILABLE  1DOWN  Q@  ;


( ReceiveISR has to do the equivalent of `OUTPUT-ROOM  1DOWN  Q!'.)

( WARNING! ReceiveISR keeps its write pointer in a register, so doing
  Q! to the same queue - from Forth - will not work!)

02 USER dropped

assemble
LABEL ReceiveISR
   ( A context-switched ISR - so much of the state is kept in registers.)
   ( DS = ram; ES = i/o; SS = ram)
   ( AX = scratch; t = queue; CX = unused; DX = write mask)
   ( i = port; w = write; r = task)

   STI,
          qroom [t] DEC,  0< not IF, ( there's room; go ahead)
   ES:   RxD [i] AL MOV,  AL qdata [t+w] MOV,   w INC,  DX w AND,
     1 # qavail [t] ADD,  carry IF,
        RUN # 0 [r] MOV, ( wake waiting task)  THEN,
   FINT, IRETRB,  THEN,
   ( no room; increment dropped counter and set room back to 0)
   0 # qroom [t] MOV,  | dropped [r] INC,  FINT,  IRETRB,  C;


( Set up for channel 0.)
( 'code AX CX DX BX SP BP SI DI ES CS SS DS bank# IRQbank IRQreg)
  ReceiveISR
        00
           00 255 ( mask)
                 | input   QUEUE input0 ( 'q)
                    32 ALLOT RAM ( stack)
                       00 00 00 serial
                             00 io-seg
                                   00 ram-seg
                                         ram-seg
                                            serial0-priority
                                                   ErrIRQ  00 serial
                                                          RxIRQ  00 serial
RBHANDLER ReceiveISR0  ( Bank Switched version; installs itself when called!)


serial1-config ?[

( Set up for channel 1.)
( 'code AX CX DX BX SP BP SI DI ES CS SS DS bank# IRQbank IRQreg)
  ReceiveISR
        00
           00 255 ( mask)
                 | input   QUEUE input1 ( 'q)
                    32 ALLOT RAM ( stack)
                       00 00 01 serial
                             00 io-seg
                                   00 ram-seg
                                         ram-seg
                                            serial1-priority
                                                   ErrIRQ  01 serial
                                                          RxIRQ  01 serial
RBHANDLER ReceiveISR1  ( Bank Switched version; installs itself when called!)
]?


( Serial ports)
:: SREG  CREATE ,  EVOKES>  ( DOES> ROM@)  port @  +  ;

decimal
 00 SREG RxData     02 SREG TxData    08 SREG SerialMode
 09 SREG RateSrc   "0a SREG RateDiv
"0d SREG RxIRQ     "0e SREG TxIRQ
: SERIAL  ( port# -)  1 AND  16 *  "f60 +  port !  ;


( Now host versions of the same thing, to make writing assembler stuff
  less painful.)

( This makes me wonder if we shouldn't keep the host and target compiler
  words completely separate, instead of keeping them somewhat apart by having
  separate interpret and compile loops - meta-interpret, host-interpret, ] ,
  and >] . Would that mean another vocabulary? And how would that work,
  exactly?

  Actually, in the even larger sense - or maybe the slightly smaller one -
  it's silly for me to be executing on the target all this fancy name stuff;
  it should be on the host - then usable in assembler and colon words - and
  just compiles literals on the target. Duh!)

( 16-sep-1998.  In order to specify bps rates > 65535 I've decided to rename
  BPS to 50xBPS.  Now the argument is 50s of bits per second.  This allows
  us to specify the maximum bps rate possible on an 8MHz V25, which is 2 Mbps.

  The calculation is a little tricky.  Since the input speed is divided by
  50 already, we divide into 4,000,000 50 /, that is, 80,000.  Well, sort of.
  We divide into twice that, 160,000, so we can round up by adding one and
  then dividing by 2.  This also makes the loop work well.)

: 50xBPS  ( 50bits/sec -)   1000 160 ROT */  ( 160,000 50xbps /)  1+ ( round)
   -1 ( RateSrc)  BEGIN  1+  SWAP U2/ SWAP  OVER  256 U< UNTIL
   RateSrc IO!  RateDiv IO!  ;
   ( RateSrc = n means use fClk/[2^[n+1]] for rate divisor clock.  0 means
     8 MHz / 2 = 4M.)

:: serMODE  CREATE ,  EVOKES>  >HILO  ( hi=set, lo=clear)
   SerialMode IO@  SWAP BIC ( clear)  OR  ( set)   SerialMode IO!  ;

"8000 serMODE +Tx    "4000 serMODE +Rx    "093f serMODE 8N1
"0080 serMODE -Tx

( 21-aug-1999. All these comments are wrong except where they aren't. This
  is here for historical interest - to see how my mind works, and doesn't.)

( 17-sep-1998.  Serial port, Queue, and Task interaction.

  Each port has a receive queue and a `transmit ring'.  The receive queue
  is actually a circular buffer, allocated exclusively for the use of that
  port.  Transmission is different.  The `transmit ring' consists of two
  pointers, `sending' and `pending', which are just what they sound like.
  Transmission occurs using -macro service-, since we know beforehand the
  count of bytes.  Transmit buffers are allocated by the -caller- of the
  transmit routine and are treated as read-only.

  Receive is easy.  A character comes in and is placed in the next free spot
  in the queue.  The `write' pointer is incremented and wrapped.  The
  `requested' count is incremented [the consumer decrements when it requests]
  and if it becomes non-negative the task that owns this port is awakened.)

( 07-aug-1999. That's all very well and good, but not how we're going to
  do things. This system is getting too complicated - esp for the tasks
  that it's being asked to perform, so I'm going to simplify things.

  Receive will be substantially as indicated. Queues will have three values
  assciated with them: qRead, qWrite, and qAvailable. qRead and qWrite are
  pointers used by the reader and writer, resp., and qAvailable means
  either characters or space available, depending on whether it's a receive
  or transmit queue. Currently we don't use queues for inter-task
  communication.

  Transmit will also use a queue. This is simple, proven, and works
  well. Tasks will probably wait for space in the queue by polling, rather
  than being woken by interrupt. This is to minimize the switching around
  of `depends-on' pointers and because most tasks will be mostly waiting
  for interrupt-driven input. Any [future] task that needs to be woken by
  space available in a xmit queue can be accomodated.

  For simplicity, queues are 256 bytes long. This way we can index with
  byte registers and forgo any masking. We're also going to go the
  `KEY/EMIT' naming route. `KEY?' tests for characters [in the queue
  associated with a task], and returns the count available. `KEY' returns a
  character - immediately - if there is one, and PAUSEs otherwise. `EMIT?'
  and `EMIT' are analogous.

  For this to work, tasks that talk to serial-port queues need to point to
  a data structure with info about all this. We call this a PORT.

  NOTE: xmit and recv are fairly separate operations. It might be nice to
  split them between two tasks. They would share the base i/o address of
  the port but would never use the same registers - tx irq and rcv irq are
  separate, xmit buffer and rcv buffer are separate. We should also be able
  to associate the IRQ service routine with this half of the port - all
  this stuff should stay together.

  Maybe the defining word should be HALF-DUPLEX. :-)

( Shared resources. The easy way. Maybe someday I'll need this.  ;-)
: GRAB   ( a)  me SWAP !  ;  ( when we know it's free)
: TAKE   ( a)  BEGIN  DUP @  WHILE  PAUSE  REPEAT  GRAB  ;
: RELEASE  ( a)  OFF  ;

00 ?[
( Output >1 byte atomically.)
VARIABLE xmitter
: ATOMIC-EMIT  ( bn .. b0 n)
   xmitter TAKE  ?FOR  EMIT  NEXT  THEN  xmitter RELEASE  ;

: W>  >HILO  2  ATOMIC-EMIT  ;  ( output a 16bit word)
: NOTE-ON  ( note vel)  SWAP  "90  3 ATOMIC-EMIT  ;  ( example)
]?

( Using non-interrupt-driven xmit. A lot easier. Using the `canonical'
  Forth names for words: `key' for input and `emit' for output.)

00 ?[
( Historical interest:
  Use of NOR is faster, but a little bit tricky. A `1' input forces the
  output to 0; a `0' input inverts that bit. So we're zeroing all but the
  interrupt bit, which we invert the sense of.)

: EMIT  ( b -)  BEGIN  TxIRQ IO@ "ff7f NOR  WHILE  PAUSE  REPEAT
   "47 TxIRQ IO! ( clr irq)  TxData IO!  ;  ( order critical)
]?

00 ?[
( 19-sep-1998.  Queues have changed lots.  I'll document them when they work.)
( Queues)
:: mantissa  ( n1 - n2)  ( Thanks to Niklaus Wirth)
   begin  dup  1 and 0=  while  u2/  repeat  ;
:: ?power2   ( n - n)  dup mantissa  1 -  abort" : size not a power of 2"  ;


:: QUEUE  ( #bytes -)  CREATE  dup  ?power2
   6 + ( room for +rd, +wr, avail)   RAM ,  ALLOT  1- ( mask) ,  ;

( Too bad we can't make these self-initializing.)
32 QUEUE Qchat

( TODO:  should define consts for the fields.)
CODE QINIT  ( #bytes 'queue -)
   AX AX XOR,  CLI,  AX 2 [t] MOV,  AX 4 [t] MOV,
   ( +rd = +wr = 0)  AX POP, ( #bytes)  AX DEC, ( mask)
   AX 0 [t] MOV,  SS: | u ) DI MOV,  ( cur task)
   DI 6 [t] MOV,  ( assoc Q with task)
   -1 # 0 [DI] MOV, ( reset task STATUS)  STI,
   t POP,  NEXT,  C;

( mask +rd +wr task data
   0    2   4   6    8
Every Queue has an associated TASK.  We use that task's
STATUS as a NEGATIVE count of bytes in the Q. )

( Queues)
CODE Q@  ( 'queue - b)  ( fetch BYTE sign-extended)
   2 [t] DI MOV,  8 [BX+DI] AL MOV,  ( get byte)
   DI INC,  0 [t] DI AND,  DI 2 [t] MOV,
   CBW,  AX t XCHG,  NEXT,  C;

CODE Q!  ( b 'queue -)   AX POP,  ( AL=b)
   4 [t] DI MOV,  AL 8 [BX+DI] MOV,  ( put byte)
   DI INC,  0 [t] DI AND,  DI 4 [t] MOV, ( +wr)
   t POP,  NEXT,  C;

( mask +rd +wr task data
   0    2   4   6    8 )


( Serial in interrupt)                           hex
( TODO:  serial and queue stuff needs updating for segment regs)
LABEL serial-in-irq  ( `caller' pushed BX DI)  assemble
   ( call with BX=queue, DI='serialport)   AX PUSH,
   ES: 0 [DI] AL MOV,  ( get ch)  4 [BX] DI MOV, ( +wr)
   AL 8 [BX+DI] MOV,  ( ch into queue)
   DI INC,  0 [BX] DI AND, ( wrap)  DI 4 [BX] MOV,
   6 [BX] DI MOV,  0 [DI] DEC,  ( Up semaphore)
   AX POP,  DI POP,  BX POP,  FINT,  IRET,  C;
                                              decimal
( mask +rd +wr task data
   0    2   4   6    8 )

]?


." )) "
