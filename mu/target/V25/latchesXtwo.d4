( latchesXtwo.d4 - timed control of latches - two channels - one velocity
  and one hold)

( 7-aug-2000. Created, from latches.d4.)

cr s" LatchesXtwo "  file[

( Ports:
P0 =  S/-R  d6  d5  d4  d3  d2  d1  d0         set/reset, data
P1 =   -vel -hold   X   X   X   X   X   X         strobes)

decimal
"f00 CONSTANT latches
"f08 CONSTANT strobes


( Note timing)

( 08-aug-1999. I tried to make this fancy, but it doesn't work. It's very
  hard to remove notes from the list, so we return to the old way. Sigh.
  Only we solve at least one problem: the old V25 version would try to re-
  strobe the note. We avoid that here. And we avoid the capture problem that
  both the 6809 and old V25 methods exhibited, by using a different decision
  for whether a note is playing already. Now it is free if it points to it-
  self - something it will never do while playing.)

VARIABLE zero         ( index of zero duration list)
128 CARRAY duration   ( array of heads of duration lists)
128 CARRAY follows    ( array of pointers to next note)

( Because duration has 128 entries, the max "velocity"
  we can use is 127.  Arithmetic on "zero" must be mod 128.)

( Latch strobes)
CODE STROBE  ( latch#+fON strobe -)
   AX POP, ( latch+fON)
   ES: AL latches ) MOV, ( out port0)   ( ES = i/o)
   ES: BL strobes ) XOR, ( strobe low)
   ES: BL strobes ) XOR, ( strobe hi)
    t POP,  NEXT,  C;
( Note: n 0 STROBE is a no-op.)

( LOG is tricky. If note is already playing - ie, it does not follow itself
  in the list - then we jump out of our caller and skip the strobe. This
  is a little bit ugly but saves some time. We could also pass a strobe of
  0 to STROBE - this will execute and act as a nop. If this seems too ugly,
  it can always be changed.

  Since we're implementing two independent channels - one percussive and
  one not - we LOG only notes on channel 1. We've separated the notes into
  two streams in MIDIcore. +PERC calls LOG but +HOLD does not. Thus this
  LOG returns a strobe of "80 instead of the generic "c0.)

CODE LOG  ( note# dur - note#+fOn strobe)
    w POP, ( note)  w DX MOV, ( note)
   ( only put into list if not already; ie, link pts to itself)
             follows # w ADD,
            SS: 0 [w] DL CMP,  ' DROP-EXIT >CODE  0= UNTIL,
                   DX AX MOV, ( note)
            SS: zero ) t ADD,  127 # t AND, ( t=duration+zero)
    SS: duration [t] DL XCHG, ( old head <-> new note)
            SS: DL 0 [w] MOV,  ( old head follows new note)
       "80 # AL OR,  AX PUSH, ( note+fOn)  "80 # BL MOV, ( strobe)
   NEXT,  C;

( EXPIRING determines if there are any expired notes to shut off, and,
  if so, fetches the first one in the duration list and nils the list head.)

CODE EXPIRING  ( - 0 | note -1)
   t PUSH,  t t XOR, ( flag)  255 # AX MOV, ( AH=0, AL=nil)
    SS: zero ) w MOV,  SS: duration [w] AL XCHG, ( head <-> nil)
   w INC,  127 # w AND,  SS: w zero ) MOV,
   AL AL OR,  0< not IF, ( not empty)
   AX PUSH, ( note)  t DEC, ( -1)  THEN,  NEXT,  C;

( Remember: nil = -1 = 255.)
CODE UNLOG   ( note - following 0 note strobe | -1 note strobe)
   t w MOV, ( note copy)  t DX MOV, ( another copy)  -1 # AX MOV, ( flag)
   follows # w ADD,  SS: DL 0 [w] XCHG, ( note <-> following)
   DL DL OR, ( following = nil?)   0< not IF,  DX PUSH, ( following)
   AX INC, ( flag=0)  THEN,  ( else flag is -1)  AX PUSH, ( flag)
   t PUSH, ( note)  "80 # BL MOV, ( strobe)  NEXT,  C;

( Better for this two-channel application than keeping `status' around.)
: +PERC   ( note vel)    LOG    STROBE  ;
: +HOLD   ( note)   "80 OR  "40 STROBE  ;
: -HOLD   ( note)           "40 STROBE  ;

: CLEAR
   "c0 strobes IO!  ( strobes hi)
   0  128 FOR   DUP "c0 STROBE  1+  NEXT
   0  128 FOR   DUP DUP follows + C!  1+  NEXT  2DROP
     zero OFF   duration 128 -1 FILL  ;


VARIABLE age-pulses   ( semaphore counter)

age-pulses   EQU pulse-counter
ld v25/timer.d4

( caller should call `us' before `AGES'.)
: AGES   ( 'task)  CLEAR  age-pulses OFF  ACTIVATE  +CLOCK
   BEGIN
      BEGIN  age-pulses 1DOWN  -1 dog +!  EXPIRING UNTIL  ( something 2 do)
      BEGIN  UNLOG STROBE  UNTIL
   AGAIN  -;

]file

