( seismUSic.d4 - Music for St. Paul museum atrium/SEISMIC project)

( Copyright c 1999 David Frech. All rights reserved.)

( 23-sep-1999. Created.)

s" seismUSic "  file[

new-music

decimal

\ variable octave
:O ptch   create ,  does>  @  \o octave @ +  ;O
:O 8v    2 +  12 *  \o octave !  ;O  ( c-2 is note #0)  0 8v

-1 ptch c-  1 ptch d-  3 ptch e-  4 ptch f-  6 ptch g-   8 ptch a-  10 ptch b-
 0 ptch c   2 ptch d   4 ptch e   5 ptch f   7 ptch g    9 ptch a   11 ptch b
 1 ptch c#  3 ptch d#  5 ptch e#  6 ptch f#  8 ptch g#  10 ptch a#  12 ptch b#

( The real dirt on the instruments.
  -marimba-     c2 to b5;  48 notes = 4 octaves
  -xylophone-   c4 to b6;  36 notes = 3 octaves
  -vibes-       f2 to e5;  36 notes = 3 octaves
  -blocks-                 30 notes)

:O .MIDI   ( lo hi)  ." MIDI "  swap 3 u.r ."  to "  3 u.r ." ; "  ;O
:O .latch  ( lo hi)  ." latch "  over 8 - 3 u.r ."  to " dup 8 - 3 u.r ." ; "
   swap-  1+ .  ." notes "  ;O

cr  ." -marimba-    "  2 8v c  5 8v b  .MIDI  0 8v c  3 8v b  .latch
cr  ." -xylophone-  "  4 8v c  6 8v b  .MIDI  0 8v c  2 8v b  .latch
cr  ." -vibes-      "  2 8v f  5 8v e  .MIDI  0 8v f  3 8v e  .latch  cr


( Pitches, compilation.)
:O p,  create ,  does>  @  \o C,  ;O  ( for compiling scales)

-1 p, c-  1 p, d-  3 p, e-  4 p, f-  6 p, g-   8 p, a-  10 p, b-
 0 p, c   2 p, d   4 p, e   5 p, f   7 p, g    9 p, a   11 p, b
 1 p, c#  3 p, d#  5 p, e#  6 p, f#  8 p, g#  10 p, a#  12 p, b#


( Short discourse on theory. First, the names of the scale degrees:

  1  tonic
  2  supertonic
  3  mediant
  4  subdominant
  5  dominant
  6  submediant
  7  subtonic; leading tone.

  Pentatonic scales tend to go 1 2 4 5 6 or 1 2 3 5 6 depending on where you
  start. Thus the 3 and 4 should be identified, and probably the 6 and 7.

  To produce a sense of tonality a melody should end by moving from a note
  in the dominant V to the tonic.  The notes of V are 5 7 9 [2]. So, there
  are several ways:
     up a fourth, or 5->1;
     up a minor 2nd or 7->1;
     down maj 2 or 9 [2]->1;
     down fifth or 5->1.

  Interior phrases should end on IV-I. The notes of IV are 4 6 8 [1].
  Remember that the phrases end on degrees 3, 5, and 7, so we have:
     1->3, 4->3, 6->3; 8->3
     1->5, 4->5, 6->5; 8->5
     [1->7, 4->7]  6->7; 8->7     bracketed are deprecated

  Dominant triad: 5 7 2 [9].
  Subdominant   : 4 6 8 [1].
  Overtone series - as a scale, possibly.
  Several kinds of pentatonics.
  Several kinds of seven-note scales: perhaps all the modes of the major
  and minor.
  A boogie-woogie: take a melody and, playing it `ostinato' in the bass, mod-
  ulate in a 12-bar blues.
  Triadic harmony; quartal harmony; septal and hexal too.
  Fibonacci series, for rhythm and melody.
  Building up a melodic/rhythmic unit from pieces: 3+3+2 would be a 3-note
     series repeated, followed by a two-note series.

  rubato = robbing - stealing time from one note and adding to another
  ostinato = obstinate; continuing unchanged
  hemiola = ??

  A couple of phantoms that show up in funny places and do stuff.

  Each voice could have a doubling, at varying intervals - mostly octave and
  fifth, but occasionally something else.

  Voices should alternate, rather than all playing together.

  Basic melodic idea: melody is a series of -scale indices-; the scale in
  question can vary, from, let's say, major to minor to various pentatonix,
  with all their modes as well - somehow we have to canonify the idea of
  of a `tonic' when playing modes of the scales.

  Three phrases, starting on the tonic, 3rd, and 5th; ending on tonic, 4, 6;
  last phrase ends in such a way as to make a V-I.)

( Creation of scales. As above, we want some elementary theoretic principles
  to inform our choice of notes. Let's say we want to limit the extent of a
  melody to 1 octave + 1 fifth - a twelfth or 19 semitones. We choose a key
  or tonic note, and this becomes the `center' of our scale, to be transposed
  up or down on the instruments. We want a weighted random choice to prefer
  movement by step to movement by larger intervals; we also need to approach
  the tonic note - or its octave above or below - by a 2nd ascending or
  descending, by a fourth ascending, or a fifth descending. It might be nice
  if the first phrase started on 1 and ended on 3; the second 3 and 5; the
  third 5 and 7; and the last 7 and 5->1. This way retrogradation would also
  work, and would introduce richer harmonies.

  Relative to melodic-rhythmic connexion - melorhythm or meloritmo - the
  following should work. First choose a random rhythm; random except that
  the last 4 pulses are in binary %1000 - the note plays on the down beat.
  This will make the tonal/harmonic relations stronger. Each phrase is 16
  bits of pulses, so the whole is 64 pulses - 4 measures. The melody can
  be, at most, 64 notes.

  Also we need to choose a function that describes which voices are playing
  when. We don't want them going all the time. The easiest would be 1 then
  1+2 etc, but that doesn't have any dynamic/magnitude info. We want temporal
  note density - ie speed - and harmonic density - ie number of voices, or
  the `duty cycle' of multiple voices - to increase with magnitude of the
  seismic event. Each voice needs to come and go in an interesting way.

  One idea: create a bitmap of whether to play or not in a given measure;
  each bit is 1 if `random mag u<' and 0 otherwise.  Create an octave-doubling
  bitmap from this that is 0 if duty-cycle-map bit is 0 OR ELSE if `random
  mag 2/ u< not'; otherwise 1. Assign these to tasks in the following way:
  rotate duty-map till 0<; pick n = voice 0-3; assign duty-map to voice n;
  duty-map 1 rotate to voice [n+1] mod 4; etc.

  About scales and melodies.
  ^^^^^^^^^^^^^^^^^^^^^^^^^
  Each scale has a length and, as per the `Formula' terms, a modulus, which
  is the number of semitones of its `transposition invariance'. 12 for most
  scales, 2 for whole tone, and 3 for diminished scale. A melody is a series
  of indices into the scale in question, with the further complication that
  there is an offset into the scale to set the tonic note. This is what will
  produce the differences in modality.

  The tricky part is weighting the choice of notes within the scale!)


( Fibonacci. We consider F_0 and F_1 to be 1.)
: Fib2  ( n - F_n F_n-1)
   DUP 2  U< IF  1 EXIT  THEN   1 1  ROT 1- FOR  TUCK +  NEXT   ;

: Fib  Fib2 NIP  ;


( coming and going)
VARIABLE to  ( our `local' `dictionary' pointer, for compiling into RAM)
: going   to @  ;
: go    going !   2 to +!  ;
: cgo   going C!  1 to +!  ;  ( look familiar?)

VARIABLE from  ( our `local' `reading' pointer, for reading out of RAM)
: coming   from @  ;
: come    coming @   2 from +!  ;
: ccome   coming C@  1 from +!  ;

: ,ram-quantile  ( wn-1 .. w0 n table)  PUSH  R@ to !  0 ( weight) go
   0 SWAP FOR ( wn-1 .. w0 weight)  OVER +  SWAP go  NEXT  POP !  ;

: ram-quantile  ( table - index)
   @+  ( a weight)  urandom PUSH  DUP 0  BEGIN  ( a a+ sum)
   SWAP @+ ( a sum a++ wt)  ROT +  ( a a+ wt+sum)  R@ OVER U<  UNTIL
   ( a a+ sum)  POP 2DROP  SWAP-  U2/  1-  ;

:D rom-quantile  CREATE  ( wn-1 .. w0 n)
   HERE  push 0 ,  ( space for weight)
   0 swap for  over +  swap ,  next  pop !
   DOES>  ROM@+  ( a weight)  urandom PUSH  DUP 0  BEGIN  ( a a+ sum)
   SWAP ROM@+ ( a sum a++ wt)  ROT +  ( a a+ wt+sum)  R@ OVER U<  UNTIL
   ( a a+ sum)  POP 2DROP  SWAP-  U2/  1-  ;

18 ARRAY fib-melody-table  ( randomly generated!)
: new-melody-table  17 FOR  11 urandom Fib  NEXT  ( wn .. w1)
   17 fib-melody-table  ,ram-quantile  ;

: melodic-interval   fib-melody-table ram-quantile  8 -  ;


( --------------------------------- SCALES ----------------------------------)
VARIABLE scale   ( current scale)
VARIABLE melody-transpose   ( to move the lowest pitch to 0.)
VARIABLE tonic   ( offset into scale; 0 to 6; defines the modes)
VARIABLE degree  ( current scale degree, or pitch index)

( Returns a pitch in semitones, in the range f- below c to e# an octave up,
  plus tonic = 0 to 6. Thus the -total- range is
  f- below [tonic = 0] to d# 2 octaves above; assuming c is pitch 0, this
  range is -8 to 27. On the instruments, 16 is a C, and is the lowest note.
  So we should, in general, be adding 16 + transpose. Sometimes the low notes
  will be too low to play. Each voice should have its own transpose.

  04-oct-1999. Changing this a little, so that the melody doesn't shift up
  when the tonic moves up.

  The range is tonic - 4 [down a fifth] to tonic + 9 [up a tenth]. We want
  to rationalize this so that we can calculate a melody in which the lowest
  pitch is always zero, and the range above is just less than two
  octaves. Then we can transpose easily. We convert the lowest note to a
  pitch and use that as a transpose while writing the melody.)

:D SCALE  ( 'melody 'harmony)  CREATE  swap  , ,  ;D

( Scales have two parts: one to convert degree into melody pitches;
  another to convert degrees into harmony pitches.)
HERE  HERE   7 C,  c  d  e  f  g  a  b   ( melody and harmony the same)
                                                     SCALE major
HERE         6 C,  c     e- f  g- g  b-  ( melody)
HERE         7 C,  c  e- e- f  g  g  b-  ( harmony)  SCALE blues

HERE         5 C,  c     e- f  g     b-
HERE         7 C,  c  e- f  f  g  g  b-              SCALE penta1

HERE         5 C,  c  d-    f  g  a-
HERE         7 C,  c  d- d- f  g  a- a-              SCALE penta2

HERE         6 C,  c  d  e  f#    a  b-
HERE         7 C,  c  d  e  f# a  a  b-              SCALE scriabin

HERE         5 C,  c  d- e-    g- a-
HERE         7 C,  c  d- d- e- g- a- a-              SCALE sitar

HERE         6 C,  c  d  e# f# g# a#
HERE         6 C,  c  d  e# f# g# a#                 SCALE whole-tone

HERE         4 C,  c  d#    f#    a
HERE         7 C,  c  d# d# f# f# a  a               SCALE diminished

HERE HERE    7 C,  c  d- e  f  g- a  b-              SCALE balkan


: degree->pitch  ( +pitch degree scale - pitch)
   PUSH  R@ ROMC@ MOD   POP 1+ +  ROMC@  +  ;

: melodic   ( +pitch degree - pitch)  scale @        ROM@  degree->pitch  ;
: harmonic  ( +pitch degree - pitch)  scale @  CELL+ ROM@  degree->pitch  ;

: musical  ( interval/degree - offset)
   S->D  ( DUP 0<)  IF  1+  ELSE  1-  THEN  ;

: scale!  ( scale tonic)  musical tonic !  scale !  ( calculate transpose)
   tonic @ 4 - ( fifth below)   DUP 0< -12 AND   SWAP  ( +pitch degree)
   harmonic    NEGATE
   ( this value will transpose to 0; we want a chromatic upward transpose)
   12 urandom +  melody-transpose !  ;


( Now we generate a rhythm and its associated melody.)
8 ARRAY rhythm      ( 128 bits)
128 CARRAY melody   ( 128 pitches)

debug [if]
:O .rhy  \t rhythm  hex  \t @+ u.  \t @+ u.  \t @+ u.  \t @ u.
                         \t @+ u.  \t @+ u.  \t @+ u.  \t @ u.  decimal  ;O
:O .mel  \t melody  decimal  128 for  \t C@+ tsigned .  next  drop  ;O
:O .pitch  ( 'melody 'rhythm rhythm - 'melody+ 'rhythm rhythm)
   2push  \t C@+  tsigned  3 .r space   2pop  ;O

:O .measure  ( 'melody 'rhythm - 'melody+ 'rhythm+2)
   \t @+  16 lshift  16 for  s->d if  \o .pitch  else  ."  -- "  then
   2* next  drop   cr  ;O

:O .song   decimal
   \t melody \t rhythm   \o .measure  \o .measure  \o .measure  \o .measure
                         \o .measure  \o .measure  \o .measure  \o .measure
    2drop  ;O
[then]

: rhythm-measure   random NIP  ( "f BIC  8 OR)  ;  ( last beat is downbeat)
: new-rhythm   rhythm to !  8 FOR  rhythm-measure go  NEXT  ;

: #bits   ( bits - n)
   0 SWAP  16 FOR  S->D ( DUP 0<) IF  SWAP 1+ SWAP  THEN  2*  NEXT  DROP  ;

: degree->interval  ( musical-degree - interval)
   musical  degree @ -  ( interval)
   BEGIN  DUP -4 <  WHILE  7 +  REPEAT
   BEGIN  DUP  4 >  WHILE  7 -  REPEAT  ( range of < fifth)  ;

: +interval  ( interval - +pitch degree')
   degree @  +
   BEGIN  DUP -4 <  WHILE  7 +  REPEAT  ( correct range)
   BEGIN  DUP  9 >  WHILE  7 -  REPEAT
   DUP degree !  tonic @ +
   DUP 0< -12 AND   OVER 6 > 12 AND +  OVER 13 > 12 AND + ( 2nd octave)
   ( degree +pitch)  SWAP  ;

: ,pitch   ( pitch)  melody-transpose @ +  cgo  ;
: ,harmony  ( musical-degree)
                     degree->interval  +interval  harmonic  ,pitch  ;
: ,melody   ( interval)                +interval  melodic   ,pitch  ;

: cadence  ( deg1 deg2)  SWAP ,harmony  ,harmony  ;

( Short phrase is fewer than 3 pitches.)
: short-phrase  ( start cad1,2 n)  PUSH NIP ( don't need cadence1)
   ( start cad2)
   R@ IF  SWAP ,harmony ( start)  R@ 1 = IF  DROP ( cad2)  ELSE
   ,harmony  THEN  ELSE  ( no pitches!)  2DROP  THEN  POP DROP  ;

( Long phrase is 3 or more pitches.)
: long-phrase  ( start cadence1,2 n)
   PUSH  ROT ,harmony   POP
   3 - ?FOR  melodic-interval  ,melody  NEXT THEN   cadence  ;

: phrase  ( start cadence1,2)
   come ( rhythm)  #bits  DUP 2 > IF  long-phrase  ELSE  short-phrase  THEN  ;

:D harmonizer  CREATE  DOES>  4 urandom  +  ROMC@  ;
harmonizer I.   ( choose a note from 1,3,5,8)   01 C,  3 C,  5 C,  8 C,
harmonizer II.                                   2 C,  4 C,  6 C,  9 C,
harmonizer IV.  ( choose a note from 4,6,8[1])   4 C,  6 C,  8 C, 11 C,
harmonizer V.   ( choose a note from 5,7,9[2])   5 C,  7 C,  9 C, 12 C,
harmonizer VI.                                   6 C,  8 C, 10 C, 13 C,

( Triad forms. For rhythm mode.)
: I/   ( - 5 3 1)  5  3  1  ;
: II/  ( - 5 3 1)  6  4  2  ;
: IV/  ( - 5 3 1)  1  6  4  ;
: V/   ( - 5 3 1)  2  7  5  ;
: VI/  ( - 5 3 1)  3  1  6  ;


: new-melody   ( scale mode-scale-degree)
   scale!   degree OFF
   melody 128 -128 FILL
   ( we need this to tell ostinato voices which notes to skip.)
   new-melody-table  melody to !  rhythm from !
   1 IV. I. phrase  II. V. I. phrase   I. IV. V. phrase   V. VI. IV. phrase
   1 IV. I. phrase   I. V. I. phrase  II.  V. I. phrase  VI.  V.  1  phrase  ;

: meloritmo  ( scale mode-scale-degree)
   new-rhythm  new-melody  ;  ( !!)


( -------------------------- Arc of the performance --------------------------)

VARIABLE mag          ( mag*10; 30 to 85 or so)
VARIABLE mag-scaled   ( clamped and referred to zero; 0 to 30)
VARIABLE canon    ( #measures between voices)
2VARIABLE common-tempo      ( tempo in pulses, with fractional part)


( `cycle' is 4 measures, or 64 beats. With cycles being 8 measures, there
  aren't enough of them in a `song' for interest. At slow speeds, there are
  maybe two cycles. At high speeds, there are four or five. By doubling these
  numbers, we can create more interest.)

( We want to play for about 200 ticks. 200 1000 tempo */ gives us beats, if
  tempo is in mt; or, 12500 tempo / gives us measures, if there are 16 beats
  to the measure. 200 ticks, when rounded up to nearest 8 measures, is too
  long, esp for slower tempi. 10 measures rounds up to 16, and the piece
  is suddenly 308 ticks long instead of 200. So we're shooting for 160 ticks.)

: total-measures  ( - n)
   10000 ( 160 000 mt / 16)
(   8000 ( 128 000 mt / 16)
   common-tempo @  pulses/mt SWAP  */  /  ;


( Since we're playing in multiples of `phrases' - currently 4 measures - we
  don't want to shorten certain voices - ie, have them come in late and leave
  early - because at low velocities they'll leave -really- early and not play
  for half the time.)

: #phrases   ( - n)
   total-measures  3 +  U2/ U2/ ( 4/)  ;


( `Canon' entrances - measures between voices entering.)
: canon!  ( mt/beat)
   24000 ( mt, or 24 t)  SWAP  /  ( beats in 24 t)  8 +  -4 SHIFT ( /16)
   DUP 3 AND 0= IF  ( multiple of 4)  1-  THEN  canon !  ;

00 [if]
: canon!  ( mag-scaled)
   DUP 10 U< IF  1  ELSE  DUP 20 U< IF  3  ELSE  5  THEN  THEN
   NIP  canon !  ;
[then]

: canons  ( n - x1 .. xn)  0 SWAP  1- FOR  DUP canon @ +  NEXT  ;

: mt-tempo  ( mt)
   DUP canon!  0 SWAP  pulses/mt  M*/  common-tempo 2!  ;

: tempo!  ( mag-scaled)
   1000  SWAP  800 30 */  -  ( 200 to 1000)  mt-tempo  ;
                              ( 5:1 ratio)

: mag!  ( dmag; in range 3.0 to 8.5 or more?)
   10 UT*  ( frac lo hi=0)  32768 SWAP  D+  ( round)  NIP
   DUP mag !  50 MAX  80 MIN  ( clamp value)  50 -
   DUP mag-scaled !  tempo!  ;


02 USER can-play   ( points to a 2constant array, for single and double voices)
                   ( each voice task has its own)
02 USER now-playing  ( points to one half or other of above 2constant)

01 USER vel          ( now a USER var so it won't get changed between MIDI
                       out and setting the latch.)
01 USER instrument    ( set using the following constants)
00 CONSTANT marimba
01 CONSTANT xylo
 2 CONSTANT vibes
 3 CONSTANT milk

01 USER transpose
01 USER highest   ( highest + 1)

ld v25/MIDIoutput.d4

: (1play)   ( note#)  vel C@  2DUP NOTE-ON
   "90 instrument C@ +  -ROT  +LATCH  ;

: 1play   ( pitch)
   DUP  highest C@  U< NOT IF  12 MOD  THEN  ( wrap to bottom of range)
   transpose C@ +  (1play)  ;

: 2play  ( pitch)    DUP 1play  12 + 1play  ;  ( double at the octave)

CREATE melody-2player  ]  1play  2play  [


( Velocities and dynamics.)

00 [if]
VARIABLE pf  ( the usual velocity)
VARIABLE sfz  ( accent velocity)
: -pf-   pf @   vel C!  ;
: -sfz-   sfz @   vel C!  ;
[then]

( Velocities. Arrived at by tweaking the above...)

:D dynamic  CONSTANT  EVOKES>  vel C!  ;
louder [if]
80 dynamic -pf-  ( the usual velocity)
86 dynamic -sfz-  ( accent velocity)
[else]
64 dynamic -pf-  ( the usual velocity)
68 dynamic -sfz-  ( accent velocity)
[then]


( ---------------------------------- Idle mode -------------------------------)

                    01  2   3   5   8  13  21   7 rom-quantile long-index
CREATE long-time     5  8  13  21  34  55  89   C, C, C, C, C, C, C,
                    01  2   3  5   8   13  21   7 rom-quantile short-index
CREATE short-time   01  2   3  5   8   13  21   C, C, C, C, C, C, C,

: idle-delay  ( #beats mt/delaybeat)  pulses/mt */  tempo !
   FOR  +BEAT ( with rubato)  NEXT  ;

: idle-long   long-index long-time + ROMC@   1000 ( mt!)  idle-delay  ;
: idle-short  short-index short-time + ROMC@  166 ( mt!)  idle-delay  ;
: idle-note   highest C@ urandom ( note)  1play  idle-short  ;

( 0 1 2)
 13 8 5  3  rom-quantile  cluster#
: idle-cluster  cluster#  1+ FOR  idle-note  NEXT  ;
: idles  ACTIVATE   -pf-  debug [if]  INSTR  [then]
   SYNC  BEGIN  idle-long  idle-cluster  AGAIN  -;

: idle  16384 rubato ! ( 0.25)
   v1 idles  v2 idles  v3 idles  v4 idles  ;


( ------------------------------ Meloritmo mode ------------------------------)

VARIABLE bass  ( ostinato rhythm)

: 50%   random NIP  0<  ;
: 33_1/3%   3 urandom  0=  ( 1 in 3)  ;

: /1_/2   ( play in 1 or in 2)  50% IF  -1  ELSE  "aaaa  THEN  bass !  ;
: /2_/4   ( play in 2 or in 4)  50% IF  "aaaa  ELSE  "8888  THEN  bass !  ;

: beats    ?FOR  +BEAT  NEXT  THEN  ;

: play-next  ( 'melody - 'melody+1)
   C@+  DUP -128 XOR IF  now-playing @EXECUTE  ELSE  DROP  THEN  ;

( Voice can be optionally 2/1 doubled.)
: double?    50%  ;
: ostinato?   33_1/3%  ;

( Resting.)
: whole-rests   ( n)  16 * beats  ;
: ?rest   mag-scaled @  30 urandom  U< IF  8 beats  THEN  ;

( For interest, voices can speed up by funny ratios for the course of
  8 measures. This makes having all these different ostinati timings a
  little, uh, redundant, no?)

: speed>>  ( - num den)
   tempo 2@   50% IF  ( do the re-speed; choose num, den)
   4 urandom 1+  ( 1,2,3,4)  DUP 1+  50% IF SWAP THEN
   ( 1/2, 2/1, 2/3, 3/2, 3/4, 4/3, 4/5, 5/4)   ELSE  1 1  THEN
   2DUP  2PUSH   M*/  tempo 2!  2POP  ;

: <<speed  ( num den)   SWAP  tempo 2@  2SWAP  M*/  tempo 2!  ;

: play
   ( 'melody 'rhythm accent rhythm - 'melody+ 'rhythm accent rhythm)
   PUSH  S->D IF  -sfz-  ELSE  -pf-  THEN   2PUSH  play-next  2POP POP  ;

: measure
   ( 'melody 'rhythm accent pattern - 'melody+ 'rhythm)
   can-play @  double? IF  CELL+  THEN  ROM@  now-playing !  ( nice!)
   16 FOR  S->D IF  play  THEN  +BEAT  2* SWAP  2* SWAP  NEXT
   2DROP ( accent pattern)  ;

: rhythmic  ( 'melody 'rhythm - 'melody+ 'rhythm+2)
   @+   bass @   SWAP  ( accent pattern)   measure  ;

: ostinato  ( 'melody 'rhythm - 'melody+ 'rhythm)
        bass @   DUP   ( accent pattern)   measure  ;

: rhythmic-voice
   speed>>   melody  rhythm  ( 'melody 'rhythm)
   rhythmic  rhythmic  rhythmic  rhythmic    2DROP
   <<speed  ;

: ostinato-voice
   speed>>   melody  0  ( 'melody 'rhythm)
   ostinato  ostinato  ostinato  ostinato    2DROP
   <<speed  ;

: rhythm-or-ostinato
   ostinato?  IF  ostinato-voice  ELSE  rhythmic-voice  THEN  ;


VARIABLE #playing  ( the count of voices still playing)

: song-cycle  ( initial-rest 'code)
   SWAP  SYNC  whole-rests  #phrases
   ?FOR  DUP EXECUTE  ?rest  NEXT  THEN  DROP   -1 #playing +!  STOP  ;

: RANGE   ( transpose highest instru task)  PUSH
   instrument R@ HERS C!  highest R@ HERS C!  transpose POP HERS C!  ;

: PLAY-MELODY  ( initial-rest task)
   1 #ACTIVATE   melody-2player  can-play !
   common-tempo 2@  tempo 2!
   debug [if]  INSTR  [then]
   lit rhythm-or-ostinato  song-cycle  -;

( ------------------------------ Rhythmic mode -------------------------------)

( The voices share a common rhythm, but play it in `canon' style.

  Use the same rubato code as for the meloritmo part.

  Each voice gets a triad. I II IV V VI. The voicing should be `interesting'.
  It is always the major scale. One way is to choose two roots, a third, and
  a fifth.)


( Try this two ways: each voice `randomly' plays one of the triads. OR, there
  is a global `triad' and on each pulse it gets played.)


( 3degree - ie, `triad' degree)
: 3octave   3 urandom  12 *  ;  ( 0, 12, 24)
: 3pitch    ( deg - pitch)   3octave SWAP  musical  harmonic  ;
: 3degree   ( deg)   3pitch  1play  ;
: 3degrees   FOR  3degree  NEXT  ;

( Random triad.)
VARIABLE 'triad
( passed a melody pitch)
: triad   ( pitch - n5 n3 n1)  DROP  'triad @EXECUTE  ;

HERE  ]  I/  II/  IV/  V/  VI/  [
: random-triad   5 urandom  LITERAL INDEX  ROM@  ;

: 1triad          triad                3 3degrees  ;
: 2triad          triad  3pitch 2play  2 3degrees  ;  ( double root at octave)
: 1triad-root     triad    3degree   2DROP  ;  ( just play root)
: 2triad-root-3   triad  2 3degrees  DROP  ;  ( play root, 3rd)

CREATE rhythm-2player       ]  1triad       2triad  [
CREATE milk-rhythm-2player  ]  1triad-root  2triad-root-3  [

( Need slightly special care here for milk bottles, which should
  never play triads.)

( Right now our `play' routine gets passed a melody pitch, which we ignore.
  Later we could use this as the basis for which triad!  But then it's just
  a meloritmo again.)

: PLAY-RHYTHM  ( inital-rest 2player task)
   2 #ACTIVATE    can-play !
   common-tempo 2@  tempo 2!
   debug [if]  INSTR  [then]
   lit rhythmic-voice  song-cycle  -;


( ---------------------- Announcing a new LIVE quake -------------------------)

: play-on  ( voice)  instrument C!
   debug [if]  INSTR  [then]  SYNC  ;

: 1brrrt  ( incr start len voice#)
   play-on   FOR  DUP 1play  OVER +  +BEAT  NEXT  2DROP  ;

: chime   ( beats #chimes voice#)
   play-on   ?FOR   5 1play  17 1play  29 1play  DUP beats  NEXT  THEN  DROP  ;

: brrrt
   -pf-  rubato-low rubato !  ( a little more interest)
   50. pulses/mt M*/  tempo 2!
   1  0 48 marimba 1brrrt   20 beats
  -1 47 48 marimba 1brrrt   80 beats
   ( chime out magnitude)  mag @  10 U/MOD  ( r q)
      100 SWAP  vibes chime  ( integer)
       10 SWAP  xylo  chime  ( fraction)
   100 beats
   1  0 30 milk 1brrrt
   100 beats  ;

: randomize  ( lat long)  +  31 AND
   ?FOR  random 2DROP  NEXT THEN  ;

: +MUSIC  ( initialization code here)
   "babe "cafe 0 seed  ( random)
   ( set voice ranges)
eprom  [if]
   16 48 marimba v1 RANGE
   16 36 xylo    v2 RANGE
   16 41 vibes   v3 RANGE
  ( vibes: low c c# d d# e missing, but high ones there)
   16 30 milk    v4 RANGE
   16 48 marimba me RANGE  ( so the Operator can play too - for brrrt esp.)
[else]
(   64 pf !   68 sfz !  ( starting out values)
 ( test: limited part of -instrument-)
   16 24 marimba v1 RANGE
   16 24 xylo    v2 RANGE
   16 24 vibes   v3 RANGE
   16 24 milk    v4 RANGE
   16 48 marimba me RANGE  ( so the Operator can play too - for brrrt esp.)
[then]  ;


debug [if]
( tempo tests)
: taps4  ( incr note mt/beat voice task)   4 #ACTIVATE
   instrument C!   0 SWAP  pulses/mt M*/  tempo 2!
   SYNC  BEGIN  DUP 1play  OVER +  3 AND  +BEAT  AGAIN  -;

: taps1  ( note mt/beat voice task)   3 #ACTIVATE
   instrument C!   0 SWAP  pulses/mt M*/  tempo 2!
   SYNC  BEGIN  DUP 1play  +BEAT  AGAIN  -;

: tt   ( mt/16th)   PUSH  -pf-  ( 200 rubato !)  rubato OFF
   0  R@  2* 2*  milk v1 taps1
   2  POP        milk v2 taps1  ;
[then]


( Conducting. Something for Operator task to do while other voices play.)

: conduct  ( 'code #voices)
   common-tempo 2@  tempo 2!  #playing !
   SYNC  BEGIN   DUP EXECUTE  #playing @  0= UNTIL  DROP  ;

: change-triad
   ( change every 1/2 measure)  8 beats  random-triad  'triad !  ;

( Don't play the milk bottles.)
: lactose-free
   rubato-low rubato !  -pf-
   3 canons  3 urandom  ?FOR  ROT  NEXT  THEN
   v1 PLAY-MELODY
   v2 PLAY-MELODY
   v3 PLAY-MELODY   v4 LULL ( sanity)
   lit +BEAT  3 conduct  ;


( Only play single notes on the milk bottles, not triads. Also choose randomly
  which is the first voice.)

: milk/vibes+xylo
   lit I/ 'triad !  rubato-low rubato !  -pf-
 ( outro~ rest effect~ rest intro~ rest 2player task)
   v1 LULL ( sanity; no marimba)
   2 canons   50% IF  SWAP  THEN
   ( rest1)       rhythm-2player v2 PLAY-RHYTHM  ( xylo)
   ( rest2)  DUP  rhythm-2player v3 PLAY-RHYTHM  ( vibes)
             milk-rhythm-2player v4 PLAY-RHYTHM  ( milk)
   ( vibes and milk bottles play together)
   lit change-triad  3 conduct  ;

: milk+marimba
   lit I/ 'triad !  rubato-low rubato !  -pf-
 ( outro~ rest effect~ rest intro~ rest 2player task)
   2 canons   50% IF  SWAP  THEN
   ( rest1)  rhythm-2player v1 PLAY-RHYTHM
   v2 LULL  ( xylo)
   v3 LULL  ( vibes)
   ( rest2)  milk-rhythm-2player v4 PLAY-RHYTHM  ( milk)
   lit change-triad  2 conduct  ;

: shh
   ( first wait for MIDI out free)  MIDIout TAKE
   v1 LULL  v2 LULL  v3 LULL  v4 LULL   MIDIout RELEASE  ;
   ( If we don't do this we risk the sculpture hanging forever when
     next we try to play a note...)



( ----------------------------------- END ------------------------------------)

00 [if]

( Junkyard)

." This should not be printed."

{ 0 } ?[
   5  R@ 5 * vibes v3 taps1   10  POP 10 * vibes v4 taps1
   8 urandom DUP  3 + -4 AND  ( note1 note2)  1 SWAP  R@ v1 taps4
]?

( intro~)  whole-rests
{ 0 } ?[
   ?FOR   rhythmic-voice  NEXT  THEN  ( during effect cycles)
      ]?
   rhythm-or-ostinato~
   whole-rests
   rhythm-or-ostinato~  ( outro~)  STOP  ;

: play  ( 'melody 'rhythm rhythm - 'melody+ 'rhythm rhythm)
   ROT  play-next  -ROT  ;

: measure
   ( 'melody 'rhythm pattern - 'melody+ 'rhythm)
   can-play @  double? IF  CELL+  THEN  ROM@  now-playing !  ( nice!)
   16 FOR  S->D IF  play  THEN  +BEAT  2* NEXT  DROP ( pattern)  ;

: dilate-time  ( num den task)
   PUSH  common-tempo 2@  2SWAP  M*/  POP tempo HERS 2!  ;

: syncto  ( task1 task2)  instant HERS 2@  ROT instant HERS 2!  ;

: CON-RUBATO  ACTIVATE
  BEGIN  common-tempo 2@  1 7 M*/  tempo 2!  rubato-low   SYNC
     BEGIN  DUP rubato !  +BEAT  100 +  DUP rubato-high  U< NOT  UNTIL
     BEGIN  DUP rubato !  +BEAT  100 -  DUP rubato-low   U<      UNTIL
  AGAIN  -;

"9228 CONSTANT son-clave
"9128 CONSTANT rhumba-clave

: dms  ( dms)  pulses/ms M*/  NOW D+  @PULSE  ;

00 ?[
: hush   ( task)  lit DROP   SWAP 'plays HERS !  ;
: voice  ( task)  lit 1play   SWAP 'plays HERS !  ;
   ]?

debug ?[
: melody-note
   melodic-interval  melodic  transpose C@ +  ;

[then]

]file
