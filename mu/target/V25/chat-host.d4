( Chat-host.)

( 16-aug-1999. Created from dos sources.)

s" Chat-host "  file[

decimal

( with trace  ( trace chars sent back and forth)

( Trace.)
[with] trace [if]
: trace>   char > emit  dup .hex  ;
: trace<   char < emit  dup .hex  ;
[else]
: trace>  ;
: trace<  ;
[then]

( all communication is LITTLE-ENDIAN.)
: b>   ( ch)   fd-out @  ttyTarget writes  swap emit  writes  ;
: b<   ( - ch)  fd-in @  ttyTarget reads   key  swap  reads   ;

: .hex  radix @ push  hex  .  pop radix !  ;
: w>   ( w -)   trace>  >hilo   ( hi lo)  b> b>  ;
: w<   ( - w)   b< b<   ( lo hi)  lohi>  trace<  ;

: check  begin  w<  .  again  ;


( target pfas for communication)
variable 'gets   ( gets a bunch of numbers from host to stack)
variable 'puts   ( puts target stack, one by one, to host)
variable 'codes  ( loads code space memory to target, byte by byte)
variable 'words  ( loads word space memory to target, word by word)

: __push  ( n -)  ( push under top of return stack)
         2pop ( our return addr, top of R stack)
         rot ( n to top)  2push  push  ;

: __pop   ( - n)  ( pop from under top of return stack)
         2pop ( our return addr, top of R stack)
         pop ( our n)  -rot  2push  ;


( NOTE: we can do this differently. Either buffer the last ack in a variable,
  that we set to zero when starting, or start the program on the target using
  code - like `go' - that is careful to read only the `g CR LF' but not the
  first `ack'.

  OR, even do it the other way on the target. Why didn't I do this? I probably
  had good reason. Hmmm.)

: tsigned  ( n - n')  dup "8000 and if  "ffff0000 or then  ;
: unusual  ( response -)
    ( sign-extend)  tsigned  dup 0= if exit then
    dup -1 =  if  ." Reboot"  exit  then
    dup -2 =  if  ." Break"  cr  drop  te  exit  then
        -3 =  if  error" TARGET stack underflow."  then
                  error" Lost sync."  -;

: ?ack  begin  w<   ?dup while  unusual  repeat  ;
: >do<  ( pfa -)  ?ack ( previous)  w>  ;

: ?hoststack  ( host check)
   depth dup   0< if error" Host stack underflow."  then
             20 > if error" Host stack too deep."  then  ;

: stack->target   ?hoststack
   depth dup   ?for   swap __push  next  then  ( push to r stack)
  'gets @ >do<  ( depth) dup w>
               ?for  __pop    w>   next  then  ;

: stack<-target
     sp!
     'puts @ >do<  w< dup ( target depth)  ?for  w< __push  next  then
                                 ( depth)  ?for      __pop  next  then  ;

: |download  ( |a bytes)  ( code memory to target)
    'codes @ >do<   over w> ( 'target)     dup w> ( #bytes)
    for  dup |+ c@   b>  1+   char c emit  next  drop  ;

: >download  ( >a bytes)  ( words memory to target)
    dup 1 and if error" >download is not even"  then
    'words @ >do<   over w> ( 'target)  2/ dup w> ( #words)
    for  dup >+ >@   w>  2 +  char w emit  next  drop  ;

variable |chatted         ( # `code' bytes chatted to target)
variable >chatted         ( # `word' bytes chatted to target)

: initial-sync   |here  |chatted !   >here >chatted !  ;
: sync
   ( cr ." 'codes=" 'codes @ .hex
      ." 'words=" 'words @ .hex
       ." 'puts="  'puts @ .hex
       ." 'gets="  'gets @ .hex  cr )
   |here  |chatted @ -  ?dup if   |chatted @  swap |download  then
   >here  >chatted @ -  ?dup if   >chatted @  swap >download  then
   initial-sync  ;

defer remote		( execute remotely)

: chatty-remote  ( >pfa)
   sync  push  stack->target  pop  >do<  stack<-target  ;

: chat!  ( called from te `g' function)
   lit chatty-remote  lit remote !  ( hooray!)  ;

]file
