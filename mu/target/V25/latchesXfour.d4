( latchesXfour.d4 - timed control of latches - FOUR channels!)

( 17-sep-1999. Created, from latches.d4.)

cr s" LatchesXfour "  file[

( Ports:
P0 =  S/-R  d6  d5  d4  d3  d2  d1  d0         set/reset, data
P1 =   -S0 -S1 -S2 -S3   X   X   X   X         strobes

Note that this is a percussion-only setup - no HOLD strobes.)

decimal
"f00 CONSTANT latches
"f08 CONSTANT strobes


( Note timing)

( 08-aug-1999. I tried to make this fancy, but it doesn't work. It's very
  hard to remove notes from the list, so we return to the old way. Sigh.
  Only we solve at least one problem: the old V25 version would try to re-
  strobe the note. We avoid that here. And we avoid the capture problem that
  both the 6809 and old V25 methods exhibited, by using a different decision
  for whether a note is playing already. Now it is free if it points to it-
  self - something it will never do while playing.

  This file is for fourtimesMIDI. Given the special situation, tho, we can
  make an optimization: allot 64 notes per section. At most 48 are used:
  16-63. Zero is free to stand for `nil'. And 64 * 4 = 256! So it fits in
  a byte. Phew. Now we can go back to one duration and one follows array.)

VARIABLE zero         ( index of zero duration list)
128 CARRAY duration   ( array of heads of duration lists)
256 CARRAY follows    ( array of pointers to next note)
( For this 4x midi, we're only using 48 notes, plus usual offset of 16.
  64 per section, times 4.

  One difference between this and `regular' midi is that we use 0 for nil,
  rather than -1 or 255.)

( Because duration has 128 entries per instrument group, the max "velocity"
  we can use is 127.  Arithmetic on "zero" must be mod 128.)

( Latch strobes)
CODE STROBE  ( latch#+fON strobe -)
   AX POP, ( latch+fON)
   ES: AL latches ) MOV, ( out port0)   ( ES = i/o)
   ES: BL strobes ) XOR, ( strobe low)
   ES: BL strobes ) XOR, ( strobe hi)
    t POP,  NEXT,  C;
( Note: n 0 STROBE is a no-op.)


( Moved CLEAR so it would use basic strobe for debug and eprom.)
: CLEAR  ( times FOUR!)
   "f0 strobes IO!  ( strobes hi)
   0  128 FOR   DUP "f0 STROBE  1+  NEXT
   0  256 FOR   DUP DUP follows + C!  1+  NEXT  2DROP
     zero OFF  duration 128 0 FILL  ;


debug [if]  ( show them all on one strobe)
CODE STROBE  ( latch#+fON strobe -)
   AX POP, ( latch+fON)
   AL AH MOV,  "80 # AH AND,  ( isolate on/off bit)  "7f # AL AND,
   "80 # BH MOV,  40 # AL CMP,  u< not IF,  BH BH XOR,  THEN,
   "40 # BL CMP,  0= IF,  24 # AL ADD,  THEN,  ( chan2)
   "20 # BL CMP,  0= IF,  48 # AL ADD,  THEN,  ( chan3)
   "10 # BL CMP,  0= IF,  72 # AL ADD,  THEN,  ( chan4)
   AH AL OR,  BH BL MOV,  ( all onto one `channel')
   ES: AL latches ) MOV, ( out port0)   ( ES = i/o)
   ES: BL strobes ) XOR, ( strobe low)
   ES: BL strobes ) XOR, ( strobe hi)
    t POP,  NEXT,  C;
( Note: n 0 STROBE is a no-op.)
[then]


( LOG is tricky. If note is already playing - ie, it does not follow itself
  in the list - then we jump out of our caller and skip the strobe. This
  is a little bit ugly but saves some time. We could also pass a strobe of
  0 to STROBE - this will execute and act as a nop. If this seems too ugly,
  it can always be changed.)

CODE LOG  ( status note# dur - note#+fOn strobe)
   DX POP, ( note)  63 # DX AND,  DX AX MOV, ( copy)  w POP, ( status)
   ( throw out notes 0--15)
   16 # DL CMP,  ' DROP-EXIT >CODE  u< not UNTIL, ( !! jump out !!)
    3 #  w AND, ( chan 1-4)  w CX MOV,  6 # w SHL, ( *64)  w DX ADD,
 ( only put into list if not already; ie, link pts to itself)
   DX w MOV,  follows # w ADD,
             SS: 0 [w] DL CMP,  ' DROP-EXIT >CODE  0= UNTIL, ( !! jump out !!)
           SS: zero ) t ADD,  127 # t AND, ( t=duration+zero)
   SS: duration [t] DL XCHG, ( old head <-> new note)
             SS: DL 0 [w] MOV, ( new note follows = old head)
   "80 # AL OR,  AX PUSH, ( note+fOn)
   ( CL=chan)  "80 # t MOV,  CL t SHR, ( t=strobe)  NEXT,  C;


( EXPIRING determines if there are any expired notes to shut off, and,
  if so, fetches the first one in the duration list and nils the list head.)

CODE EXPIRING  ( - 0 | note -1)
   t PUSH,  t t XOR, ( flag)  AX AX XOR, ( AH=0, AL=nil=0)
    SS: zero ) w MOV,  SS: duration [w] AL XCHG, ( head <-> nil)
   w INC,  127 # w AND,  SS: w zero ) MOV,
   AL AL OR,  0= not IF, ( not empty)
   AX PUSH, ( note)  t DEC, ( -1)  THEN,  NEXT,  C;

( Remember: nil = 0.)
CODE UNLOG   ( note - following 0 note strobe | -1 note strobe)
   t w MOV, ( note copy)  t DX MOV, ( another copy)  -1 # AX MOV, ( flag)
   follows # w ADD,  SS: DL 0 [w] XCHG, ( note <-> following)
   DL DL OR, ( following = nil?)   0= not IF,  DX PUSH, ( following)
   AX INC, ( flag=0)  THEN,  ( else flag is -1)  AX PUSH, ( flag)
   t CX MOV,  63 # t AND,  t PUSH, ( note)  6 # CL SHR,
   ( CL=chan)  "80 # t MOV,  CL t SHR, ( t=strobe)  NEXT,  C;


: +LATCH  ( status note vel)   LOG  STROBE  ;


VARIABLE age-pulses   ( semaphore counter)

age-pulses   EQU pulse-counter
ld v25/timer.d4

( caller should call `us' before `AGES'.)
: AGES   ( 'task)  CLEAR  age-pulses OFF  ACTIVATE  +CLOCK
   BEGIN
      BEGIN  age-pulses 1DOWN   EXPIRING UNTIL  ( something 2 do)
      BEGIN  UNLOG STROBE  UNTIL
   AGAIN  -;

]file

