( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( basic memory management for target compilers)

loading Memory management

decimal

( 13-sep-1998.  When the target and host have different word sizes, and
  possibly different endianesses, we really need special words for target
  dictionary work.  Chuck Moore's `space switching' will not work for us.)

( 14-sep-1998.  More changes!  We have separate spaces -- in the 80x86 world
  -- for code and `words'.  We need separate [but equal] dictionary words for
  the two spaces.)

( 24-sep-1998.  Changed to be hopefully simpler.  Instead of having the 
  clients of this module worry about relative and absolute we're going to
  change things around a little.  Now `>here' and `|here' return relative
  rather than absolute values.  The `comma' words will work as advertised.
  The only thing that this changes, other than making for fewer `|#' and
  `>+' and other un-readables, is that >c! and >! must have their address
  converted to absolute, in code or word space.)

( 30-may-1999. Added a space for signatures.)


( Target space `word' names will have the prefix `>'.)
( Target space code names will have the prefix `|'.)
( Signature space will have the prefix `"'.)

( First define the image space.)
64 Ki constant #seg
here 1 Ki Ki ( 1 meg!) +  constant "origin
          "origin 1 Ki +  constant |origin
          |origin #seg +  constant >origin  ( words segment -follows- code)

( Since we're in -segment- mode here with the 80x86, we needn't define a
  non-zero origin.  All segments can start at zero.)

: "+    ( a - n)  "origin +  ;	( suggests adding to edge of region)
: |+    ( a - n)  |origin +  ;
: >+    ( a - n)  >origin +  ;


( Dictionary operators.)
variable "h	( sig dictionary pointer)
variable |h	( code dictionary pointer)
variable >h	( word dictionary pointer)

: "here  ( - a)  "h @  ;
: |here  ( - a)  |h @  ;
: >here  ( - a)  >h @  ;
: |c,    ( ch)   |here |+ c!  1 |h +!  ;
: >c,    ( ch)   >here >+ c!  1 >h +!  ;

( Alignment)
: >aligned  ( a - a')  1+  -2 and  ;  ( 32 bit version is  3 + -4 and)
: >align,  ( value)  >here 1 and if  >c, exit  then  drop  ;

( Endian operators.  These are for 16 bit words, little endian.)
: |,    ( w)       >hilo  |c, |c,  ;
: >,    ( w)       >hilo  >c, >c,  ;

( These work for any target space.  They simply determine endianness.)
: >!    ( w a)     leh! ;  ( 16-bit halfword store)
: >@    ( a - w)   leh@ ;  ( 16-bit halfword fetch)

( We can use c@ and c! for the target space as well.)

: wipe   "h off  |h off  >h off
   "origin 1 Ki  0 fill  |origin #seg "90 fill  >origin #seg 0 fill  ;

( Isolate dependencies of the NMIS-0025.)
[with] debug
       [if]  "600  "f700           ( ram-seg, io-seg)  
       [else]   8  "ff00  [then]   ( io-seg aliases the very top of ROM)
constant io-seg
constant ram-seg
  ( constant is host; lowercase is a reminder.)

"a0 constant debug-code-seg

( That's it for now!)
