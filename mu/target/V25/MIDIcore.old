( V25 MIDIcore. Basic MIDI engine, MIDI merge for scanning.)

( Copyright 1996-1999 David Frech.)

( Created 18jan96 - pygmy-DOS version.)

( Modified for dforth 05-aug-1999.)

( 22-aug-1999. Split into a separate version for scanning, for now. It merges
  scanned data with MIDI in, so it's a little different from the standard
  version.)

( 20-sep-1999. Conditionalized the midi code so scanning can share code with
  other apps.)

cr  s" MIDIcore "  file[

\ >here  HERE

decimal

( 5 aug 1999. If we make GRIND a deferred word and reorg this file can we
  make it clearer and avoid patching the jump table? Also we need to figure
  out how to factor out filtering. In some cases we'll want the thing to be
  omni, always; in others respond to fixed channels; and in yet others, to
  have a channel set button and a channel display. This also means that we
  need to send `status' to NOTE-ON and NOTE-OFF so they can decide what to
  do, if they do different things based on the channel.)


( Status byte dispatching.)
CODE ?JUMP  ( returns non-status bytes or jumps to status routine)
   BL BL OR,  0< IF, ( status)
   t w MOV,  "70 # w AND,  3 # w SHR, ( lo 3 bits of status, *2)
   "100 [w] w MOV, ( force word offset)
   \ |here \ |+  2 - ( jump table)  \ swap
   -2 [w] JMP,  THEN,  ( data byte)  NEXT,  C;

: MIDI@  ( - b)  KEY  ?JUMP  ;


CODE FRESH  ( status - status)  ( for running status types)
   ( clears both stacks, keeping status on top)
   SS: u )        r MOV,  ( RP!)
       bottom [r] s MOV,  ( SP!)  "cafe # PUSH,  NEXT,  C;

: GRIND  ( status -)
   FRESH  BEGIN  MIDI@ DROP  AGAIN  -;
   ( infinite, till `MIDI@' returns to someone else..)


( We're sharing MIDIout among several tasks; we need to serialize access
  to the output port.)
VARIABLE MIDIout  ( task that owns the port)

( MIDI out)
: SEND   FOR  EMIT  NEXT  ;      ( useful if we've already got the port)
: [SEND]   ( bn bn-1 .. b1 n -)  ( bracketed, ie ATOMIC, send)
   MIDIout TAKE   SEND   MIDIout RELEASE  ;


MIDIscan [if]

( subtracted from midi-in -> latch; added to latch# for midi-out)
( Set at startup from jumpers/DIP switch.)
VARIABLE MIDItranspose

: NOTE-ON-RUNNING  ( status)
   FRESH  PUSH ( status)
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)
      DUP  IF    OVER MIDItranspose @ -  OVER  +LATCH  SWAP R@  3 [SEND]
           ELSE  OVER MIDItranspose @ -        -LATCH  SWAP R@  3 [SEND]  THEN
   AGAIN  -;

: NOTE-OFF-RUNNING  ( status)
   FRESH  PUSH ( status)
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)
           OVER  MIDItranspose @ -  -LATCH  SWAP R@  3 [SEND]   AGAIN  -;

[then]  ( MIDIscan)


MIDIfilter [if]  ( channel filtering)

( channel filtering)
VARIABLE channel        ( value to match)
VARIABLE channel-mask   ( bits to match)
: CHANNEL!   ( channel mask)   channel-mask !  channel !  ;
: CHANNEL    ( channel#)   "0f  CHANNEL!  ;
: OMNI                    0  0  CHANNEL!  ;


CODE FILTER  ( status - status)
   t AX MOV, ( status)
   SS: channel-mask ) AX AND,  SS: channel ) AX XOR,
   0= not IF,  ' GRIND # i MOV,  THEN,  NEXT,  C;

: NOTE-ON-RUNNING  ( status)
   FRESH  FILTER
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)
           ?DUP  IF  +LATCH  ELSE  -LATCH  THEN
   AGAIN  -;

: NOTE-OFF-RUNNING  ( status)
   FRESH  FILTER
   BEGIN   MIDI@ ( note#)  MIDI@ ( vel)  DROP  -LATCH   AGAIN  -;

[then]  ( MIDIfilter - channel filtering)


MIDIfour [if]

( subtracted from midi-in -> latch; added to latch# for midi-out)
( The instrument is tuned to C. This transpose converts C0 [24] to E-1 [16].
  The lowest note of the instrument is a C, but is connected to latch 16.)

8 CONSTANT MIDItranspose

CODE FILTER  ( status - status)
   t AX MOV, ( status)  "0c # AX AND,  ( only respond to channels 0--3)
   0= not IF,  ' GRIND # i MOV,  THEN,  NEXT,  C;

: NOTE-ON-RUNNING  ( status)
   FRESH  FILTER  PUSH
   BEGIN   R@ ( status)  MIDI@ ( note#) MIDItranspose -  MIDI@ ( vel)
           ?DUP  IF  +LATCH  ELSE  2DROP  THEN
   AGAIN  -;

: NOTE-OFF-RUNNING  GRIND  -;

[then]  ( MIDIfour)


( status byte jump table)
: Fx  ( status -)
   DUP 8 AND IF ( realtime)  DROP  MIDI@  EXIT   THEN   GRIND  -;

HERE  ]
   NOTE-OFF-RUNNING   NOTE-ON-RUNNING      ( 8x  9x)
   GRIND   GRIND   GRIND   GRIND   GRIND   Fx   [
 (  Ax      Bx      Cx      Dx      Ex     Fx)

\ swap \ >!  ( resolve jump)

( Set up the particulars for a MIDI port.)
: MIDIport  ( port)  SERIAL  [ 31250 ] BPS  +Rx +Tx 8N1  ;

MIDIscan [if]
( This is a little bit subtle. We need to call SERIAL from -both- the midi
  task and the scanner task. The way in which we call LISTEN accomplishes
  this.)

: LISTEN   ( 'midi-task -)   0 MIDIport   ACTIVATE
   0 SERIAL  input0  ReceiveISR0  0 GRIND  -;
[then]


MIDIfour [if]    ( MIDI in on serial 1)
: LISTEN   ( 'midi-task -)   ACTIVATE
   1 MIDIport   input1  ReceiveISR1   0 GRIND  -;
[then]


MIDIfilter [if]   ( MIDI in on serial 0)
: LISTEN   ( 'midi-task -)   ACTIVATE
   0 MIDIport   input0  ReceiveISR0   0 GRIND  -;
[then]


debug [if]
: LISTEN   ( 'midi-task -)   ACTIVATE
   1 MIDIport   input1  ReceiveISR1   0 GRIND  -;
[then]


MIDIscan  MIDIfour  \ or  [if]
: MIDI   ( task)   MIDIout OFF  LISTEN  ;
[else]
: MIDI   ( task)   LISTEN  ;
[then]  ( MIDIscan)


'CODE  \ swap-  ." code " .  HERE \ swap-  ." ; words "  .

]file

