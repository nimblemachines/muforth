( timer.d4)

s" Timer "  file[

( 20-aug-1999. Pulled from kernel. We need to include this -after- the
  definition of the task that depends on an independent pulse count.)

( 23-sep-1999. Because I'm now adding xtime capability, and because I realized
  that my previous way to delay was inaccuracy-prone, I've moved all the most
  basic stuff from this file and renamed a few things.

  The basic unit in xtime is the `tick'; it is 1/100 000th of a day. Thus, the
  basic unit that the timer interrupt accumulates needs to be called something
  else. Since it's the foundation of all timing, and is the heartbeat of the
  system, let's call it a `pulse'. That way `beat' is available for musical
  usage.)


( Clients of this file define `pulse-counter' to the address of the
  variable to be incremented, or 0 if task-waking is not desired. Defining
  `pulse-counter' non-zero automatically enables task-waking, so be
  prepared!)


( Time)                           decimal
2VARIABLE #pulses    ( need 32 bit count; high word at lower address)

CODE NOW  ( - pulses.lo pulses.hi)   t PUSH,
   CLI, ( no timer irq)  SS: #pulses 2 + ) AX MOV,
                         SS: #pulses     )  t MOV,  STI,  AX PUSH,  NEXT,  C;

( in pulses)
CODE TIME?  ( dwhen - dwhen 0 | dwhen -1)
   ( calculate now - when.  flag = now - when >= 0.)
   CX POP, ( whenL)  CX PUSH,  t PUSH, ( whenH)
   CLI, ( no timer IRQ)  SS: #pulses 2 + ) AX MOV, ( now.lo)
                         SS: #pulses     ) DX MOV, ( now.hi)  STI,

   CX AX SUB,  t DX SBB, ( now-when)
   DX DX ADD, ( S->CY)  t t SBB, ( 0<)  t NOT, ( >=0)  NEXT,  C;

( We use JUMP> >JUMP so we don't PAUSE if our time has already elapsed.)
: @PULSE   ( dpulse#)  JUMP>  BEGIN  PAUSE  >JUMP  TIME?  UNTIL  2DROP  ;
: PULSES   0  NOW D+  @PULSE  ;  ( only approximate)


( Timer interrupt)
( 16-sep-1998.  I've moved to Timer 1 just in case we want to use Timer 0,
  which has an output pin [optionally] connected to it, for something else.
  Also the RAM allocation has changed.  Here is the rationale:  The bottom
  two register banks overlap the macro service and DMA channels.  DMA stuff
  overlaps the bottom two macro service channels.  Register banks take 32
  bytes, macro service and DMA eight.  Also, we want to keep the lowest in
  memory [and -highest- priority] slots open for serial receive.  Thus we
  should put the Timer in slot 4.  Macro/DMA take 0 & 1; Serial could take
  2 & 3.)

( Also I'm now passing a -vector- of registers to RBHANDLER, which compiles
  the handler -and- code to install it!  NOTE:  Because of bogusness in
  the V25 interrupt controller, we need -two- interrupt control registers:
  one to control which bank [this is the highest priority register in a
  group, eg timer0 interrupt control] and the -actual- register for the
  function.  Grrr.)

LABEL tickety-tock
   ( CS=rom code, DS=ram, SS=ram)
   ( t=addr of pulses 2variable; r=task to wake; i=task pulses counter)
   STI,  ( enable interrupts again)
   1 # 2 [t] ADD,   0 # 0 [t] ADC,  ( increment pulses 2variable)
pulse-counter [if]
   1 # 0 [i] ADD,  carry IF,  RUN # 0 [r] MOV,  THEN,
[then]
   FINT,  IRETRB,  C;

( 'code AX CX DX BX SP BP SI DI ES CS SS DS bank# IRQbank IRQreg)
tickety-tock
        00 00 00 #pulses
                    32 ALLOT RAM ( stack)
                       00 pulse-counter
                             00
                                io-seg
                                   00 ram-seg
                                         ram-seg  timer1-priority  "f9c  "f9d
RBHANDLER _PuLsE_   ( Bank Switched version; installs itself when called!)


( Timer interrupt)

( Careful! Since RBHANDLER interrupts now set BP to point to the calling task,
  we can only set up the clock - by calling +CLOCK - from the task that will
  care about such things. This task can't also be waiting on anything else!
  If it's waiting on characters to come in from a serial port and happens to
  be waiting on an empty queue, a timer interrupt could wake it up and it
  would grab characters that weren't really there and go off into the grass...

  This was just happening to me, so it's more than theoretical!)

( 27-sep-1999. Conversion to xtime. A short discussion. fclk is assumed 8 MHz.
  timer_period = 1s/8M*6 = 3/4 us.
  125 t = 108 s = 100 000 t / 800 = 86 400 s / 800.
  timer_period = 3/4 us * 125 t / 108 s = 125 / 144 ut = 108 / 144 us.

  If we set the timer md register to a multiple of 144, we'll get a multiple
  of 125 ut for the pulse_period. Since we want a period as close to 600 us
  as possible - so as not to interfere with the per-pulse solenoid timing -
  we choose the pulse_period to be

  pulse_period = 6*144*timer_period = 750 ut = 648 us!

  It's a little weird, but at least it's a rock-solid pulse based on ticks.)

( 27-sep-1999. It's too much, right now. I'd rather have a timebase in us and
  convert to pulses from ticks or seconds.)

VARIABLE us/pulse  ( microsecs per pulse period)
: +CLOCK
   ( now start clock)  _PuLsE_ ( self-installing!)
   "80 "f91 IO! ( start tm1 countdown; fClk/6)  ;

( fClk = 8MHz but the timer is clocked at fClk/6 MHz.
  So we have to take our interval in uSec and scale by 4:3.)

: us  ( #)   DUP us/pulse !   4 3 */   1-  "f8a IOW!  ( md1)  ;

( These two words - `ms' and `mt' - should only be used for approximate,
  global timing. For musical purposes, use something that always adds an
  offset to a per-task variable, and calls @PULSE with the sum. This is
  more accurate. See, eg, seismUSic.)

: pulses/ms  ( - num denom)   1000  us/pulse @  ;
: ms  ( #ms -)  pulses/ms  */  PULSES  ;

-1 [if]
( jonathan jay's xtime: 1 day = 100 000 ticks; so 1 tick = .864 second)
: pulses/mt  ( - num denom)    864  us/pulse @  ;
: mt  ( #mt -)  pulses/mt  */  PULSES  ;
[then]

]file
