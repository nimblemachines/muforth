( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( Target/meta compiler for v25.  headaches galore!! 
  re-worked for dforth, 4-sep-1998)

loading Meta compiler

comment %%
15-sep-1998.  Changed to use the capitalization convention already in effect
  in the code I wrote for the Pygmy cross-compiler.  Maybe this way I can do
  a lot less work converting the old stuff.  Of course it means changing the
  assembler and -also- switching the kernel back.  Ugh.

24-sep-1998.  Changed to simpler dictionary.

18-aug-1999. Changed to a more complicated dictionary. :-| I've been caught
  by the `which word to compile' bug, and needed to make searching work better
  in the presence of the meta-compiler.

  I want the host's forth to remain completely `pure' during
  meta-compilation. No words can show up there that don't have to do with
  normal host forth things, like finding words or making new words or even
  making new defining words. Actually it's not quite that strict. What we
  want is for the pieces to be defined in forth, but the top-level word -
  like the new `:' for target compilation - to be in meta, so we don't get
  it by accident.

  All the `meta' words go into a new vocab - called `meta-forth' - that
  concerns itself with issues of meta-ness. The `:' that defines new target
  words is here, as is the colon word - `::' - that defines new
  meta-defining words. The ' in meta-forth will search target and not
  [host's] forth.

  The meta -interpreter- will -never- look in forth. So we have to have an
  escape mechanism if we want to compute `a b +' while running the
  meta-interpreter. `{' solves this problem; `[' does the same thing inside
  the meta-compiler.

  In the meta compiler is the word `::', used to compile new meta-compiler
  words. It also compiles from the host's forth; actually, it first searches
  the host's -compiler- vocab, so that things like if..then will work, then
  searches meta and lastly searches forth. The main thing is that when, after
  having loaded the target compiler, we're typing at the `command line', we
  don't -ever- want to accidentally execute a host forth word.

  The assembler, on the other hand, searches the assembler and then the host
  vocab - but -not- the meta vocab! Unless I find that this doesn't make
  sense.

  Target words are defined so that when executed they call `remote'.

  ARGH! After scratching my head for a long time wondering why the meta-
  interpret loop seemed to hang I realized something: the sentinels were
  missing! The easiest way to make this work again is to put, in dforth.m4,
  sentinels for every chain. Which I did.

19-aug-1999. Wrong again. Searching only meta in `target' interpretation
  mode makes finding information really tedious, and involves a lot of repli-
  cation, and creates more confusion than it eliminates. The good idea here
  was creating a `meta' vocabulary with words useful in a `target' or `meta'
  interpretation - NOT compilation - mode. The bad idea was not also searching
  the regular host `forth' as well. It might be nice to be able to drop back
  into a `pure' host forth - and this is still possible. But it's too arduous
  to search only meta. Back to work.

  In general, once we've started the meta-compiler we'll be compiling new
  tools into `meta' - this means that assembler constants and stuff like that
  should be defined in meta, and the assembler loop should search meta as
  well.

  I think I'm still wrong. I think the right idea is to factor the existing
  forth into -three- vocabularies: forth, definer, compiler. forth is every-
  thing simple, like `@ ! +'. definer is `variable create : constant' &c.
  compiler is `if then begin while for' &c. We want to be careful not to mix
  up our host definers and target definers, just as we've (already) separated
  the host and target compiler vocabs.

  There are now perhaps four modes we can be in:  host interpret, host
  compile, target - meta - interpret, target compile.

  Host interpret: definer execute; forth execute; number
  Host compile:   compiler execute; definer compile; forth compile; literal

  Meta interpret: target execute; meta-definer execute; forth execute; number
  Meta-definer compile:
                 compiler execute; meta-definer compile; forth compile; literal
  Target compile: meta-compiler execute; target compile; target-literal

  Yargh. Actually one of the main sources of confusion is being able to access
  in the assembler constants that are defined only on the host, but are used
  only for target compilation/assembly. These right now go into forth. But is
  that the right place? If we're using a `pure' meta method, then these all
  need to go only into `meta' and then accessing them from the assembler, which
  doesn't search meta, becomes clumsy.

  I think the thing to do is catalog the information that is needed for dif-
  ferent tasks. There are four tasks: loading code from disk, assembling
  code words, colon compiling, and interacting with the target. These have
  rather different requirements.

  Ok, ok. It turns out that my original way was the best: slowly replace the
  `definer' words in the forth vocab with meta-definers, add a special meta-
  compiler vocab - called `meta' - and compile the compiler-like words into
  that. If we get confused at run time it's still possible to run a forth-
  only interpreter - we -will- get meta-definer words but no target words.

  Now I think I understand all this stuff. Phew.

27-apr-2000. Dramatical changes. Hopefully things are even simpler.
%%

forth definitions  decimal

defer remote ( XXX - until we can load terminal and chat-host code!)

( Primitives )
variable 'lit       variable 'does        variable 'evokes
variable 'br        variable '0br         variable 'exit
variable 'for       variable '?for        variable 'next


( Metacompiler vocabs)
vocab definer  ( used to compile meta-definer words, like create, variable)
vocab outside  ( used outside of target definitions - the `meta' forth)
vocab inside   ( used inside target definitions - the `meta' compiler)
vocab target   ( the target words)


compiler definitions
comment %%
: \f   ( compile from forth)     forth   \chain  ;  %%
: \o   ( compile from outside)   outside \chain  ;
: \i   ( compile from inside)    inside  \chain  ;
: \t   ( compile from target)    target  \chain  ;

forth definitions
: \   outside chain'  execute  ;  ( escape to meta - find and execute a word) 

outside definitions
: \   forth chain'  execute  ;  ( escape to forth - find and execute a word)
: {   \ [  ;  ( escape to host interpreter)
: ,     >,   ;  ( so we don't have to remember the funny-looking ones)
: C,    >c,  ;
: HERE    >here  ;
: 'CODE   |here  ;
: CELL-   2 -  ;
: CELL+   2 +  ;
: >DATA   >+            >@  ;  ( fetch first cell of param field)
: >CODE   >+  \o CELL-  >@  ;  ( fetch code field)
: '    target token' 0=  if error" : not defined in target" then  @  ( target-pfa)  ;
0 [if] : |    \o '  \o >DATA  ;  [then]

( We might as well make `remote execution' do something useful while we're
  compiling, so, instead of complaining, it fetches the first cell of the
  parameter field.)

( outside)  '  >DATA   ( XXX only works if ' searches current not forth!)
forth chain' remote !  ( remote is called with target pfa on the stack)

( Random useful goodies.)
: hex      hex  ;
: decimal  decimal  ;
: octal    octal  ;
: .   .  ;
: u.  u.  ;
: .s  .s  ;
: (   \f (  ;
: char   \f char  ;
: cr   cr  ;
: ."   \f ."  ;
: s"   \f s"  ;
: ld   ld  ;
-- : te   te  ;  ( XXX need terminal code for this)

inside definitions
: LITERAL   ( n)  'lit @  \o ,  \o ,  ;
: 2LITERAL  ( d)  swap  \i LITERAL  \i LITERAL  ;
: char   \f char  \i LITERAL  ;
: (    \f (  ;

forth definitions
( If a number has radix punctuation - currently only dot . - convert to
  scaled integer and split into hi and lo words.)

: >target-scaled  ( sc - sclo schi)
   [ #f 16 - ] literal  push  1 r@ << 2/ +  pop >>  ( round down to 16 bit fraction)
   "1_0000 /mod  ( lo hi) ;

: tnumber   ( a u - n f | sclo schi t)
   number  dpl @  0< if  0  exit  then   >sc  >target-scaled  -1  ;

: tnumber,  ( d t | n f)
   tnumber  if  \i 2LITERAL  exit  then  \i LITERAL  ;


( All the different search-execute-compile routines for different modes,
  and their associated prompts.)

-:  ."  (assembling)"  ;
-:  assembler -"find if  outside -"find if  target -"find  if
      ( not found)  number exit  then
      ( target)  @  \o >DATA  ( target pfa contents)  exit  then  then
      execute  ;
mode assemble

-:  ."  (meta)"  ;
-:  outside -"find  if  target -"find  if  tnumber drop  exit  then
      @ ( target pfa)  remote exit  then  execute  ;
mode meta-interpret  ( outside)

-:  ."  (meta-compiling)"  ;
-:  inside -"find  if   target -"find  if  tnumber, exit  then
      @ ( target pfa)  \o ,  exit  then   execute  ;
mode meta-compile  ( inside)

-:  ."  (meta definer compiling)"  ;
-:  definer -"find  if  compiler -"find  if  ( execute if either of these)
    outside -"find  if     forth -"find  if  number, exit  then  then
        compile, exit  then  then   execute  ;
mode definer-compile


outside definitions
( Dictionary name entries.)
( NAME creates a head that needs show to make it findable. There is a
  subtle issue here: If one of these target names is executed, it will
  compile, into the target image, a reference to itself. Under normal
  circumstances this will never happen, since the meta-compile and
  meta-interpret loops -never- execute target words directly, instead
  executing remotely or compiling depending on the current mode. This
  means, though, that we can define helper words in the target - like `BPS'
  in the kernel - that compile target words.)

: NAME
   target definitions  name  outside definitions
   0 >align,  \o HERE 2 + , ( pfa)
   does> @ ( target pfa)  \o ,  ;

: SHOW   show ;

( Meta structures   until again if then etc)
: mark>      ( - fwd)    \o HERE  0  \o ,  ;
: <resolve   ( back -)   \o ,  ;

inside definitions
: BEGIN   ( - back)  \o HERE  ;
: UNTIL   ( back -)       '0br @ \o ,  \o <resolve  ;
: AGAIN   ( back -)       'br  @ \o ,  \o <resolve  ;
: THEN    ( fwd -)   \o HERE  swap  >+ >!  ;
: IF      ( - fwd)        '0br @ \o ,  \o mark>  ;
: JUMP>   ( - fwd)         'br @ \o ,  \o mark>  ;  ( unconditional)
: >JUMP   ( fwd back - back)   swap  \i THEN  ;
: WHILE   ( back - fwd back)  \i IF  swap  ;
: REPEAT  ( fwd back -)   \i AGAIN   \i THEN  ;
: ELSE    ( fwd0 - fwd1)  \i JUMP>   \i >JUMP  ;  ( strange but true)
: FOR     ( - back)       'for @ \o ,  \i BEGIN ;  ( u times; 64k for 0)
: ?FOR    ( - fwd back)  '?for @ \o ,  \o mark>   \i BEGIN  ;
: NEXT    ( back -)      'next @ \o ,  \o <resolve  ;

( .. FIRST .. BEGIN .. THEN <test> UNTIL .. ; FIRST jumps to THEN)

( Since REPEAT is just AGAIN THEN, think about this:
  BEGIN .. WHILE .. UNTIL .. THEN   A loop with two exits!)

( n FOR .. NEXT        goes n times; 64k if n=0 )
( n ?FOR .. NEXT THEN  goes n times; 0 if n=0 )


( Compiler and interpreter.)
: [   meta-interpret  ;
: -;   \o SHOW       \i [  ;
: ;    'exit @ \o ,  \i -;  ;

forth definitions
: }   \i [  ;  ( return to meta interpreter)

outside definitions
: ]   meta-compile  ;


( Conditional compilation.)
( The defining word `with' for creating conditional compilation words.)
: with     with  ;
: [if]     \ [if]  ;
: [else]   \ [else]  ;
: [then]   ;
: [with]   \ [with]  ;

inside definitions
: [if]     \ [if]  ;
: [else]   \ [else]  ;
: [then]   ;
: [with]   \ [with]  ;


( DOES>, ;CODE and other magic.)
forth definitions
: >patch    pop @  last-code @  cell+  @ ( target word)
	    >+  ( image)  2 -  >!  ;
: <;code>   \o SHOW   lit >patch compile,   |here ,  ;

( This <does> is tricky.  Since code and words are separate, we cannot
  simply insert a `call do_does' into the sequence of addresses.  Instead
  we assemble the `call do_does' into code space followed by the ip to
  start executing.)

( 15-apr-2000. This way of doing DOES> - a CALL dodoes followed by new ip -
  takes 41 + 2w cycles on the V25. A MOV #new_ip, AX; JMP dodoes takes only
  20 cycles, and only one byte more. Let's do it.)
0 [if]
: <does>   ( offset)
   <;code>  <asm  ) CALL,  asm>  \o HERE  |, ( ip)  target-]  ;
[then]

: <does>   ( offset)
   <;code>  \o HERE  ( ip)  <asm  # AX MOV,  ) JMP,  asm>  meta-compile  ;

( Definers. Words to create target defining words.)
outside definitions
: :D   ( outside definitions)  :  definer-compile  ;  ( definer words)
: :O   ( outside definitions)  :  ( host-compile)  ;  ( helper words)
: :I      inside definitions   :  outside definitions  ;

( Note: The subtle difference here is that the :D compiler searches only
  `definer' and `outside'. `\f' can be used to escape to Forth. This is
  intended for creating defining words, like the meta VARIABLE and : and
  such. :O is an alias for the host compiler, except that, like :D, the
  word is defined in the outside vocab. There are a few obscure cases in
  the V25 kernel when this is helpful - like to imitate the behavior of
  SERIAL while compiling.)

compiler definitions
: ;O   \ ;  ( outside definitions)  \i [  ;
: ;I   \ ;O  ;

definer definitions
: ;CODE    <;code>  assemble  ;
: DOES>    'does @    <does>  ;  ( readonly)
: EVOKES>  'evokes @  <does>  ;  ( volatile)
: ;D   \ ;O  ;
: !   \ >+  \ >!  ;  ( common idiom)
: @   \ >+  \ >@  ;  ( ditto)
: (    \f (  ;  ( comments are useful!)

( This is a little bit subtle. We want access to `forth' words, which we
  want to COMPILE, and to `compiler' words, which we want to EXECUTE.)
: \   compiler token' if  execute  ^  then  forth find  huh?  , ;


( Assembler helpers.)
outside definitions
io-seg   constant io-seg
ram-seg  constant ram-seg
: EQU           constant ( in outside)  ;
: LABEL   |here constant ( in outside)  assemble  ;
: CODE             \o NAME  \o SHOW  |here  \o ,  assemble  ;  ( ITC)
: CODES  ( code)   \o NAME  \o SHOW         \o ,  ;   ( for aliasing)
: RESOLVES     forth chain'  !  ;  ( for setting primitive pointers)
: IMPLEMENTS   |here  \o RESOLVES  assemble  ;
                         ( for code fragments - does, evokes)

assembler definitions
: C;  \i [  ;  ( exit assembler, back to outside)
: t   \a BX ;    : [t]    \a [BX] ;
: i   \a SI ;    : [i]    \a [SI] ;
: w   \a DI ;    : [w]    \a [DI] ;
: s   \a SP ;    ( can't do [SP] on 8086!)
: r   \a BP ;    : [r]    \a [BP] ;
                 : [t+w]  \a [BX+DI] ;
                 : [t+i]  \a [BX+SI] ;

( Threading macros.)
: NEST,    <asm                 r DEC,  r DEC,  i 0 [r] MOV,  asm>  ;
: UNNEST,  <asm   0 [r] i MOV,  r INC,  r INC,                asm>  ;
: NEXT,    <asm  AX LODS,  w AX XCHG,  -2 [w] JMP,  asm>  ;

( Now that I'm using a stack-based assembler I can do this the way I wanted
  to but was thwarted by Frank's assembler.)

( 28-apr-2000. Moved here from the kernel so we don't have to change gears.)
: FLOOR,  ( r | d mem)  ( macro)   ( q = AX; r = DX)
   <asm  DX CX MOV,
   IDIV,  ( using argument)
   BX CX XOR,  ( sign bit SET if different signs)
   0< IF,  DX DX OR,  0= not IF,
   ( adjust)  AX DEC,  BX DX ADD,  THEN,  THEN,  asm>  ;

( IDIV is symmetric.  To fix it [to make it _FLOOR_] we have to
  adjust the quotient and remainder when BOTH rem not= 0 AND
  the divisor and dividend are different signs.  [This is NOT the
  same as quot < 0, because the quot could be truncated to zero
  by symmetric division when the actual quotient is < 0!]
  The adjustment is q' = q - 1; r' = r + divisor.  This
  preserves the invariant  a / b => [r,q] s.t.  a = qb + r;
  a = q'b + r' = [q - 1]b + [r + b] = qb - b + r + b = qb + r !!)


( Assembler needs some arithmetic and a few other useful things.)
: +  +  ;
: -  -  ;
: *  *  ;
: /  /  ;
( and, or, xor?)


( Signatures)
forth definitions
: "sign   ( a #)  "here "+ swap  ( a to #)  dup "h +! ( allot)  cmove  ;
           ( for putting signature in kernel)

outside definitions
: signature"      char " parse  "sign  ;
: sign"   \o signature"  ;  ( ?which?)

( Timestamping with creation date.)
: created-on   s" Created: " "sign   epoch time"  "sign  ;

( variable stamped  stamped off)


( Memory mismanagement)
forth definitions
variable r    ( ram allocation pointer)
variable #u   ( user variable allocator)

: canonical!    lit canonical !   canonical  ;
   ( reset the vector that resets to interpret state, and execute once)

outside definitions
: ALLOT     r +!  ;  ( advance ram allocation pointer)
: RAM       r @   ;  ( next available ram)
: UALLOT   #u +!  ;  ( analogous to ram, allot)
: #USER    #u @   ;

( Switch to host forth.)
-: forth definitions   \o {  ;
: host   literal  canonical!  ;

( Finish up after compiling.)
: ]target  \o host  ;

forth definitions
-: outside definitions   }  ;  ( start meta interpreter)
: meta   literal  canonical!  ;

: target[
   wipe  ( reset pointers, fill code with nops, word with zeroes)
   r off ( start ram allocation at 0)
   #u off  ( reset count of user area)
   meta  ;

: .bytes   5 u.r  ."  bytes."  ;

: report   ( word-seg)
   cr ." Boot address is "  hex  |boot @ u.
   cr ." word-seg is "                   u.  decimal
   cr ." RAM usage: "  \o RAM    .bytes
   cr ." User area: "  \o #USER  .bytes  cr
   cr ." Signature: "  "here  dup .bytes
   cr ." Code     : "  |here  dup .bytes
   cr ." Words    : "  >here  dup .bytes
   cr ." Total    : "        + +  .bytes  ;


( Phew!  That wasn't so bad...)
