( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( A tiny compatibility layer to get the V25 stuff to compile under muforth.)

loading dforth compatibility

variable csp
: !csp   depth  csp ! ;
: ?csp   depth  csp @  xor  if  error" stack depth changed"  then ;

( For conditional compilation)
: with   -d ;

compiler
: exit    \ ^ ;
: \cond   .conditional. \chain ;  ( needed for synonyms)

: [with]  \ .def ;
: [if]    \ .if ;
: [else]  \ .else ;
: [then]  \ .then ;

forth
: [with]  \ .def ;
: [if]    \ .if ;
: [else]  \ .else ;
: [then]  \ .then ;

conditional
: [if]    \cond .if ;
: [else]  \cond .else ;
: [then]  \cond .then ;

forth
: vocab   sealed ;  ( make a new vocab chain)
: -"find  ( a u chain - xtk 0 | a u -1)   find  0= ;

( The V25 code was written for dforth, which used a different convention
  for vocab names. In dforth, forth and compiler are vocab [chain] names,
  and to compile into one you write "forth definitions". I decided this was
  too much to type, so for muforth things are different. .forth. and
  .compiler. are chain names, and to compile into one you write simply forth
  or compiler.)

: forth     .forth. ;
: compiler  .compiler. ;

( Also, literals are different. In dforth, literal was the traditional
  Forth immediate style. There are also a few cases where the code reads

  lit <word-name>

  to make a literal out of a reference to a Forth word. Also, the right
  bracket - ] - behaves differently. In dforth, as in most Forths, it simply
  returns to Forth colon compiler mode; in muforth it also creates a
  literal.)

: number,   number literal ;  ( this is muforth's literal)
: compile,  , ;

: lit  (lit) ;

compiler definitions  ( !!)
: literal   \f literal ;
: -;  show  \ [ ;  ( end a word without compiling EXIT)
: s"    \ " ;

forth definitions
: ]   -] ;
: s"   \f " ;

: 0<>   0= 0= ;  ( !!)
: rshift   >> ;
: lshift   << ;
: which    jump ;
: +under   u+ ;
: swap-    swap - ;

( dforth's ' searches current rather than forth; maybe muforth should too?)
: '   current @  chain' ;
