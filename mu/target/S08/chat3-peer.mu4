( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading S08 serial chat protocol v3 (peer)

( NOTE: This might seem a bit odd, but this file implements the side of the
  chat protocol normally implemented by firmware in a target chip! The
  reason for doing this here, in muforth, is to test out the protocol by
  having both sides running on the host.)

( chat3 commands:

  0  Idle       - ignored by chat; force other command loops to return to chat;
                  can be used as an Idle
  1  Version    - sets HX to point to version string:
                - 4 bytes of muforth commit, big-endian
  2  Run        - does an RTI - pops stack frame and runs
  3  GetSP      - sets HX from SP, then returns HX
  4  SetHX      - reads two bytes from SCI, writes them into H & X registers
  5  ReadNext   - reads a byte from memory @ HX, writes it to SCI, incrs HX
  6  WriteNext  - reads a byte from SCI, writes into memory @ HX, incrs HX

 ~~ The following are S08-only commands ~~

  7  ReadN      - reads a count from SCI, reads that many bytes from
                  memory, and writes them to SCI
  8  FlashNext  - reads a byte from SCI, writes to flash @ HX, incrs HX
                - calls a routine in ram that host downloads to device
                - returns FSTAT
)

hex

variable pty-master
: pty-send  ( b)     pty-master @ >emit ;
: pty-recv  ( - b)   pty-master @ <key ;

( Spying on the protocol.)
variable spy  spy on
: send             spy @ if ." >"  dup .h8_ then  pty-send ;
: recv   pty-recv  spy @ if ." <"  dup .h8_ then ;

: >b   send ;
: b>   recv ;
: >w   >lohi  >b >b ;
: w>           b> b>  hilo> ;

( Location of flash command in zero-page RAM.)
0ff constant fcmd

: swi
   0 fcmd image-c! ( set flash command to 0 - an illegal value) ;

( Emulate S08 stack _exactly_: it pushes _then_ decrements; increments
  _then_ pops.)

variable peer-sp  ( holds a target address!)
: p.push  ( b)     peer-sp @  dup  1-       peer-sp !  image-c! ;
: p.pop   ( - b)   peer-sp @       1+  dup  peer-sp !  image-c@ ;

: p.pushw  ( w)    >hilo  p.push  p.push ;

( Stack frame: H CC A X PC)
: peer-push-frame
   ff4c p.pushw  ( outer PC)
   fefe p.pushw  ( frame PC)
     80 p.push ( X)  58 p.push ( A)  68 p.push ( CC)  02 p.push ( H) ;

variable chat-version
muforth-commit drop 8 evaluate  chat-version bew!

: p.Version   chat-version  m ! ;

: p.GetSP       peer-sp @  1+  >w ;
: p.SetHX   w>  image+  m ! ;

: p.ReadNext     m* >b ;
: p.WriteNext        b> m& ;

( We send the target zero counts to read 256 bytes, so let's do that here
  as well.)

: p.ReadN    b>  dup 0= if  drop #256  then  for  p.ReadNext  next ;

: p.Run   swi ;

: peer-erase-page
   m @  image-  ( 'target)  [ /page 1- invert #] and  image+  m !
   /page for  0ff m&  next  [ /page negate #]  m +! ;

( If fcmd not a valid flash command, read a byte but do nothing.)
: p.FlashNext
   fcmd image-c@
   dup mByteProgram = if  drop  p.WriteNext  0c0 >b  ^  then
   b> drop
       mPageErase   = if  peer-erase-page  0c0 >b  ^  then
   0d0 >b  ( done + ACCERR) ;

: peer-command
   b>  dup #9 u< if  jump
      nope  p.Version  p.Run  p.GetSP  p.SetHX
      p.ReadNext  p.WriteNext  p.ReadN  p.FlashNext
   then  drop ;

: re-peer
   open-pty  cr  ." Connect to "  zcount type  ."  to chat with this peer."
   pty-master !  swi  begin  peer-command  again ;

: peer
   @ram #ram +  1-  peer-sp !  peer-push-frame
   0 fcmd image-c!  ( set flash command to 0 - an illegal value)
   6e ffad image-c!  97 ffaf image-c!  ( fake trims)
   begin  catch re-peer  pty-master @ close-file  again ;

( Let's run it!)
peer
