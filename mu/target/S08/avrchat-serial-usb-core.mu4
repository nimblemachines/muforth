( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading AVR chat over serial over USB (core)

__meta

hex

( Support for sending and receiving short commands over the serial line to
  an AVR target. Right now we wire the baud rate to 125k, limit receiving
  to one byte at a time, and limit sending to 6 bytes - what will fit in
  the SETUP packet. This is for simplicity, not because we think it's a
  good idea. ;-)

.reg EPCTL0 .not .if
   z" This code will currently only work on an S08JS or S08JM device."  abort
.then

( Because we want to be independent of the USB byteloader code, we have to
  re-implement a lot of that code: the command dispatch table, and the
  basic handling of SETUP, IN, and OUT tokens. But code to enumerate the
  device, and the device descriptors, are *not* repeated here. We only
  implement the "vendor specific" requests required to do BDM.)

10 constant buflen0  ( buffer length, and hence max packet size, for endpoint 0)

1860 equ 'usb            ( USB RAM origin; buffer descriptors live here)
1880 equ 'usb-buffers    ( endpoint RAM from here to 195f)

__host

: >bufaddr  ( buffer - bufaddr)
   dup 0f and if  error" endpoint buffer must be on a 16-byte boundary"  then
   \eq 'usb -  2 >> ;

__meta

( Buffer descriptor control byte to match _any_ SETUP transaction, or an IN
  or OUT transaction with a DATA1 packet.)
0c8 equ match-data1

( USB buffer descriptors)
1860 equ in-control
1861 equ in-count
1862 equ in-bufaddr
1863 equ out-control
1864 equ out-count
1865 equ out-bufaddr

'usb-buffers            equ in-buffer
'usb-buffers buflen0 +  equ out-buffer

( Useful aliases for buffer addresses - for control requests.)
out-buffer 0 + equ bmRequestType
out-buffer 1 + equ bRequest
out-buffer 2 + equ wValue
out-buffer 3 + equ wValueHi
out-buffer 4 + equ wIndex
out-buffer 5 + equ wIndexHi
out-buffer 6 + equ wLength
out-buffer 7 + equ wLengthHi

( Create a forward jump at the start of the flash sector.)
forward-jmp avrchat-serial-loop

( Port pins.)

( TxD is PTA7, pin 20.
  RxD is PTA6, pin 19.)

label uart-init
   -- Set up port pins

   .a clr  PTAD ) sta  PTADD ) sta  ( set value and drive to 0)
   80 # lda  PTADS ) sta  ( set high drive on TxD)

   -- Configure SCI for 125000 bps, based on 24m clock

   SCIBDH ) clr        ( baud rate divisor, high)
   #12 # SCIBDL ) mov  ( baud rate divisor, low)
                       ( yields 125000 from 24M bus clock)
   0c # SCIC2 ) mov    ( enable rcvr, xmitter)

   ( flush input buffer)
   begin  SCIS1 5 ( recvr full)  bset? while  SCID ) lda  repeat
   rts  ;c

label uart-recv  ( returns char in A)
   begin  SCIS1 5 ( recvr full)  bset? until
   SCID ) lda  rts  ;c

label uart-send  ( transmits char in A)
   begin  SCIS1 7 ( xmit empty)  bset? until
   SCID ) sta  rts  ;c

label uart-set-speed  ( divisor in A)
   SCIBDL ) sta  rts  ;c

( Prepare to return status - a zero-length IN transaction. Also be ready to
  accept another SETUP even if it would mean abandoning the current
  transfer. This is what the USB spec says we have to do.)

label finish-control-write
   ( Setup IN status stage)
   .a clr   ( zero-length DATA1 transaction)
   ( fall thru)  ;c

( Enter with in-count in A)
label prepare-fixed-in
   in-count ) sta
   match-data1 # lda  in-control ) sta
   ( fall thru)  ;c

( Get ready to receive another SETUP token.)
label expect-setup-token
   match-data1 # lda  out-control ) sta
   buflen0 # lda  out-count ) sta
   CTL 5 bclr ( TSUSPEND off - resume processing)
   rts  ;c

( Before reading or writing a series of bytes from/to the UART, write a
  single command byte.)

label write-command
   wValue ) lda  uart-send j  ;c

( Get divisor from SETUP packet and write it to UART divisor register.)
label serial-speed
   wValue ) lda  uart-set-speed c  finish-control-write j  ;c

( Write command, then read a series of bytes from UART and return to host.)
label serial-read
   write-command c
   wLength ) lda  prepare-fixed-in  0!= until
   .x clr  .h clr  .a psh
   begin
      uart-recv c  in-buffer ,x sta  .x inc
   0 ,s decz?  until  .a pul
   txa  prepare-fixed-in j  ;c

label serial-write
   write-command c
   wLength ) lda  finish-control-write  0!= until
   expect-setup-token j  ( wait for OUT packet with data payload)  ;c

( Return NAK on IN.)
label nak-in
   .a clr  in-control ) sta  rts  ;c

label setup-token
   nak-in c

( NOTE: Command numbers are all given in HEX.)
( assume vendor request)
   bRequest ) lda
   60 # sub   ( commands start at 60 hex; anything below that, we exit)
   u< if  ( 00 - 5f Bye)  2 # ais  ( skip return from process-usb)  rts  then

   ( 60) serial-speed          0!=  until
   ( 61) serial-read   .a dec  0!=  until
   ( 62) serial-write  .a dec  0!=  until

   ( unknown, fall thru)

label stall
   EPCTL0 1 bset ( STALL)  rts  ;c

label setup-or-out-token
   out-control ) lda  3c # and  34 # cmpne?  setup-token  until

   ( OUT token)
   ( If last OUT was zero-length, it was a status transaction for a
     control read, so get ready for a new SETUP.)
   out-count ) lda  0= if  expect-setup-token j  then

   ( Got a data payload. Write it to the UART.)
   .x clr  .h clr  .a psh
   begin
      out-buffer ,x lda  uart-send c  .x inc
   0 ,s decz?  until  .a pul
   finish-control-write j  ;c

( An IN token is either part of a data stage of a control read, or it is
  the status stage of a control write. Status IN's are always zero bytes
  long; sometimes the last IN of the data stage is also zero bytes long -
  see copy-to-in for details.

  The upshot is that if the last packet wasn't full we should expect no
  more IN transactions.)

label in-token
   ( fall thru)

label nak-in-expect-setup
   nak-in c  ( further IN's will return NAK)
   expect-setup-token j  ;c

( XXX To convert process-usb into an interrupt handler, jumps to
  setup-or-out-token, in-token, and nak-in-expect-setup should really be
  _calls_; we should handle all the flags that are set all at once, rather
  than only one per call. Also, interrupt flags - like TOKDNEF and STALLF -
  should be cleared after being handled.)

label process-usb
   INTSTAT 3 bset? if ( TOKDNEF)
      STAT ) lda  INTSTAT 3 bset  ( ack TOKDNEF)
      0f8 # and  setup-or-out-token 0!= until
       08 # cmpne?  in-token  until
      ( not EP0; ignore)  ( fall thru)
   then
   INTSTAT 7 bset? if ( STALLF)
      EPCTL0 1 bclr ( remove EPSTALL)
      INTSTAT 7 bset  ( ack STALL)
      nak-in-expect-setup j  ( get ready to receive SETUP)
   then
   rts  ;c

\m avrchat-serial-loop resolve>>  ( jump at start of Flash points here)
label main-loop
   uart-init c    ( setup serial port)
   finish-control-write c  ( ready status IN; also prepare for SETUP)
   begin  process-usb c  again  ;c
