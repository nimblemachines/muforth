( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading S08 Flash programming (target)

hex

( Posts from the 8-bit forum about programming S08 flash:
  http://forums.freescale.com/freescale/board/message?board.id=8BITCOMM&thread.id=14410
  http://forums.freescale.com/freescale/board/message?board.id=8BITCOMM&message.id=9610
  http://forums.freescale.com/freescale/board/message?board.id=8BITCOMM&message.id=627)

comment tonyp  Bomb-proof working code from tonyp:

;*******************************************************************************
; Purpose: RAM routine to do the job we can't do from Flash
; Input  : A = value to program
; Output : None
; Note(s): This routine is modified in RAM by its loader at @2,3 and @5
;        : Stack needed: 20 bytes + 2 for JSR/BSR

?RAM_Execute       sta       EEPROM              ;Step 1 - Latch data/address
                                                 ;EEPROM (@2,@3) replaced
                   lda       #mByteProg          ;mByteProg (@5) replaced
                   sta       FCMD                ;Step 2 - Write command to FCMD

                   lda       #FCBEF_
                   sta       FSTAT               ;Step 3 - Write FCBEF_ in FSTAT
                   lsra                          ;min delay before checking FSTAT
                                                 ;(FCBEF -> FCCF for later BIT)
?RAM_Execute.Loop  bit       FSTAT               ;Step 4 - Wait for completion
                   beq       ?RAM_Execute.Loop   ;check FCCF_ for completion
                   rts

;after exit, check FSTAT for FPVIOL and FACCERR

?RAM_Needed        equ       *-?RAM_Execute

XXX: add the short - sometimes-it-works code as well.

comment tonyp

__meta

h @  ( save memory region)

1 xvar flash-command
1 xvar bdm-flash-count

ram
here 0100 xor .if ." Flash routine not at 0100 hex" .then
flash-command 0ff xor .if ." flash-command not at 00ff hex" .then

( Target code to write to and erase the Flash. The routine loads the flash
  command to execute from zram - from the variable called flash-command. By
  setting flash-command to different values, it's possible to do regular
  byte programming, or page/mass erase. Burst programming requires a
  slightly different test for completion.

  The USB code uses this same routine, and requires that the flash-command
  byte be in the zero page -- otherwise the tst instruction will not
  compile! -- which is why it reads the flash command from a variable,
  rather than having the host "paste" it into the code; this way the code
  can start in non-zero-page RAM.)

label flash-byte
   0 ,x sta   ( store byte into Flash array)
   flash-command ) lda  FCMD ) sta  80 # lda  FSTAT ) sta  .a lsr
   begin  FSTAT ) bit  0!= until
label flash-exit
   rts     ( For BDM use, gets rewritten in b.Hi to a nop.)
label flash-end

( The following code is for use on BDM targets only. It is copied over
  explicitly when we connect via BDM to a target.)

   1 # aix
   bdm-flash-count ) dec  0!= if
label bdm-flash-row  ( entry point -- for BDM use only!)
   .a pul  ( SP points to buffer of bytes to program; HX has flash addr)
   flash-byte j
   then
   bgnd
label bdm-flash-end  ;c

flash-end goto  ( back up over BDM flash code)

h !  ( restore memory region)

__host

( Copy flash routine to RAM.)
: copy-flash-routine
   \m flash-byte  \m flash-end  over -  ( a u)  copy-region
   \m flash-end  ram-copied ! ;

( NOTE!! Do not move the following definitions from this file! They are
  needed by the JS16 bootloader code.)

( Use this to initially set the value of "our" trim - the one that trims
  the internal osc to 9.216M.)
: set-trims ( ours factory-ftrim factory)
   0ffaf image-c!  0ffae image-c!  0ffad image-c! ;

( Set value of NVOPT, which is loaded into FOPT at reset. We set it so
  security is off, and vector redirection is _enabled_.)
: set-unsecured
   0be 0ffbf image-c! ;  set-unsecured

: >nvprot  ( protected-addr - byte)
   1-  8 >>  0fe and ( clears FPDIS bit to enable protection!) ;

: protect-flash  ( protected-addr)
   dup vector-offset !  ( oddly, protected addr is mod 64k vector offset!)
   >nvprot 0ffbd image-c! ;  -- 0fe00 protect-flash

.ifdef S08JS
( Bypass checksum check on JS parts.)
: bypass-checksum   0  0ffba image-c! ;  bypass-checksum
.then
