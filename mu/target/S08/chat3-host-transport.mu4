| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading S08 Chat v3 (host transport)

( chat protocol v3)

| Commands:
| 0  Idle       - ignored by chat; force other command loops to return to chat;
|                 can be used as an Idle
| 1  Version    - sets HX to point to version string:
|               - 4 bytes of muforth commit, big-endian
| 2  Run        - does an RTI - pops stack frame and runs
| 3  GetSP      - sets HX from SP, then returns HX
| 4  SetHX      - reads two bytes from SCI, writes them into H & X registers
| 5  ReadNext   - reads a byte from memory @ HX, writes it to SCI, incrs HX
| 6  WriteNext  - reads a byte from SCI, writes into memory @ HX, incrs HX
|
| ~~ The following are S08-only commands ~~
|
| 7  ReadN      - reads a count from SCI, reads that many bytes from
|                 memory, and writes them to SCI
| 8  FlashNext  - reads a byte from SCI, writes to flash @ HX, incrs HX
|               - calls a routine in ram that host downloads to device
|               - returns FSTAT

hex

: cx.Idle              00 send  ;  ( command 0 is ignored by the chat target)
: cx.Version    ?spkt  01 send  ;  ( point to chat firmware version commit)
: cx.Run        ?spkt  02 send  ;  ( don't walk! and don't wait for the target. ;-)
: cx.GetSP      ?spkt  03 send        recv recv hilo> ;
: cx.SetHX      ?spkt  04 send  >lohi send send ;
: cx.ReadNext   ?spkt  05 send  recv ;
: cx.WriteNext  ?spkt  06 send  send ;
: cx.Stream     ?spkt  07 send  send ;  ( "stream" N bytes from memory)
: cx.FlashNext  ?spkt  08 send  send recv ;  ( flash one byte, get flash status)

| Resynchronise the protocol - just to make sure. We send two dummy bytes,
| in case we were doing a SetHX. We wait for them to transmit. Then we
| throw away any unread input. This puts us back into a known state.

: resync  ?spkt  cx.Idle  cx.Idle  drain  flush ;

| Before loading anything chip-specific or the interact code, we'd like to
| be able to query the chip for its device id. We read two bytes from
| address 1806 (the SDIDH and SDIDL registers).

: cx.device-id
.ifdef chat-slow  ( using a xtal that only allows 38400)
    #38400 bps
.else
   #115200 bps
.then
   resync

   | High nybble of device-id is "reserved" and might not be zero.
   1806 ( chip id) cx.SetHX  cx.ReadNext cx.ReadNext hilo>  0fff and ;
