| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading S08 Chat v4 (host)

hex

| To be safe, let's resync every time we set a target address. (chat3 does
| the same thing.)

: c.set-addr   resync  cx.set-addr ;

.ifndef m&

| We load this file just to run S08 code to, eg, talk to AVR targets, so
| we won't have the version in target/S08/memory.mu4. If the other target
| hasn't loaded the equivalent, we define our own version here.

| Generic tools for reading and writing host-side memory. These give us a
| second "hand" so we can, eg, compare two images using c@+ on the one hand
| and m* on the other.

variable m  ( memory pointer)
: m*  ( - byte)  m @  c@  1 m +! ;
: m&  ( byte)    m @  c!  1 m +! ;

.then  ( ifndef m&)

: c.setup-chunk  ( buf a u - u)  swap c.set-addr  swap m ! ;

| For chunked read and write, if chunk count is 0, don't do anything.
: c.read   ( buf a u)
   c.setup-chunk  ?if  dup cx.read-n  for  b> m&  next  then ;

: c.write  ( buf a u)
   c.setup-chunk  ?if  for  m* cx.write-1  next  then ;

: flash-chunk-until-error  ( len - status)
   for  m* cx.flash-1  dup 0c0 xor if  rdrop ^  then  drop  next
   0c0 ;

| Helper for flash-chunk. Set an address, and write a byte there.
: chat-c!  ( b a)  c.set-addr cx.write-1 ;

: c.flash   ( buf a u cmd - status)
   30 \eq FSTAT chat-c!  ( clear flash errors)
   \m flash-command chat-c!
   c.setup-chunk  flash-chunk-until-error
   00 \m flash-command chat-c! ;

: c.hello  ( - in-ram?)
   resync  ( exit BDM loop, if running; resync chat protocol)

   cx.version  4 cx.read-n  b> b> b> b>  3210>
   cr ." Chat firmware version "
   radix preserve  hex  sep preserve  -sep  <#  4#  4#  #> type
   cx.status nip ( pc) [ @ram #ram + #] u<  dup if  ."  (running in RAM)"  then
   cr ." Connected device is "  cx.device-id .device
   ( Copy flash routine to RAM.)  copy-flash-routine ;

: c.status  ( - dp)  cx.status drop ;
: c.run  ( pc dp)  swap c.set-addr  cx.run ;

: chat
   chat-via  c.hello  cx.status  c.run  c.read  c.write  c.flash ;
