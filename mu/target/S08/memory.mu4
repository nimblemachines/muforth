( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading S08 memory image

( Space for compiling into. Right now we define #addrbits to 16, which
  means we are going to create a 64 KiB memory image.)

( HC08s are big-endian, like all Motorola/Freescale processors!)
-d big-endian
-d unaligned-words

( 64 Ki address space. 16 bits of address.)
#16 constant #addrbits

ld target/common/memory-small-flat.mu4

( h points to one of:)
@ram    image-region zram   ( image-region sets origin and ptr)
"100    image-region xram
"100    image-region ram
@flash  image-region flash

( xram is a bit odd. Sometimes we need to set aside a few bytes of zram
  for flash-based code - like the USB chat and BDM code - and never
  allocate these bytes to code or variables that we need while doing
  interactive development.

  My solution is to break the zero-page ram into two spaces: zram and xram.
  zram is "application" ram, and is allocated bottom up, from the @ram
  origin. xram is the "system" ram and is allocated top down, from 0100.

  Routines that might be necessary, say for programming flash, are by
  default placed at the "ram" origin - 0100. In the case of the USB code,
  we take advantage of this fact, and allow the write memory USB request to
  specify a wIndex value. 0 means "just copy the byte into memory";
  non-zero means "run the flash code at 0100 using wIndex as the command
  byte". This way it is almost trivial to run flash programming and erase
  commands via USB.

  But having these things be at arbitrary addresses seemed brittle and
  error-prone. This way they are at least somewhat fixed, and the memory
  allocation code checks to see if zram runs into xram.

  The best way to use these is to always load the "system" code even if
  it's already in flash, just so your code "knows" how much xram is
  allocated.)

( Erase image memory and default to ram region.)
wipe  ram
