( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( I couldn't take it any more - the 908 ROM monitor was driving me crazy.
  It's slow, and there is still an odd bug with the PC - the "image" of it on
  the stack frame - not getting properly initialised... but only when the
  target is first connected!

  I decided to try out some simple ideas. Instead of the Nibble Machines
  loader, we have this! Rather than a Bootloader, it's a Byteloader?

  This code should _just_ fit into RAM, leaving room for the data
  structures needed for the ROM flash routines. The idea basically that
  this is a simple target to write to in order to get the Flash written -
  ideally with a copy of this code to act as a bootloader!)

loading S08 Chat v2 (target)

hex

__meta

( The SCI code is identical between 908 and S08 except for the names - and
  offsets - of the SCI status and data regs ... so let's abstract them.)

.ifdef S08

aka SCIS1 SciStatus
aka SCID  SciData

.else   ( 908)

aka SCS1 SciStatus
aka SCDR SciData

.then

label SciRx  ( returns char in A)
   begin  SciStatus 5 ( recvr full)  bset? until
   SciData ) lda  rts  ;c

label SciTx  ( transmits char in A)
   begin  SciStatus 7 ( xmit empty)  bset? until
   SciData ) sta  rts  ;c

( chat2 protocol)

( Commands:
  0  Idle       - ignored by chat; force other command loops to return to chat;
                  can be used as an Idle
  1  Run        - does an RTI - pops stack frame and runs
  2  SetHX      - reads two bytes from SCI, writes them into H & X registers
  3  GetHX      - writes H then X register to SCI
  4  HXtoSP     - sets SP from HX -- deprecated, but I'm leaving it in
  5  SPtoHX     - sets HX from SP
  6  ReadNext   - reads a byte from memory @ HX, writes it to SCI, inc HX
  7  WriteNext  - reads a byte from SCI, writes into memory @ HX, inc HX

 ~~ The following are S08-only commands ~~

  8  ReadN      - reads a length from SCI, reads that many bytes from
                  memory, and writes them to SCI [S08 only!]
  9  FlashNext  - reads a byte from SCI, writes to flash @ HX, inc HX
                - calls a routine at @ram that host downloads to device
 10  FlashStatus - returns FSTAT
                 - need this as a way to "ping" the device for the
                 - completion of long operations, such as erase
)

label SendByte  ( send char in A)
   SciTx bsr

label Dispatch
   SciRx bsr  ( command)

   ( map 0 -> ff -- ignore)
   .a decz? if ( Run)   .h pul  rti  then

   .a decz? if ( SetHX)
   SciRx bsr  .a psh  .h pul  ( set H)
   SciRx bsr  tax ( set X)  Dispatch again  then

   .a decz? if ( GetHX)
   .h psh  .a pul  SciTx bsr  ( send H)
   txa  SendByte again  ( send X)  then

   .a decz? if ( HXtoSP)  txs  Dispatch again  then
   .a decz? if ( SPtoHX)  tsx  Dispatch again  then

   .a decz? if ( ReadNext)
   0 ,x lda  1 # aix  SendByte again  then

   .a decz? if ( WriteNext)
   SciRx bsr   0 ,x sta
label write-increment
   1 # aix

.ifdef S08

   ( end WriteNext)  Dispatch again  then

   .a decz? if ( ReadN)
   SciRx bsr  .a psh ( count)
   begin  0 ,x lda  1 # aix  SciTx bsr  0 ,s decz? until
   .a pul  Dispatch again  then

   .a decz? if ( FlashNext)
   SciRx bsr   flash-byte c ( call flash routine in RAM)
   write-increment again ( to WriteNext)  then

   .a decz? if ( FlashStatus)
   FSTAT ) lda  SendByte again

.then

   then
   ( unknown command)   Dispatch again  ;c


( If compiling into RAM and using 908 flash control block, check to make
  sure we haven't "run into" the control block, then jump forward over it
  and continue compiling there.)

.def in-ram  .def control-block  .and .if
__host
: ?fits
   control-block  'zram @  u< if
      error" Code too long - ran into Flash control block"
   then ;
?fits
__meta
09c org           -- continue compiling there
.then

label emulated-swi
   ( jsr/bsr has already pushed PC)
   .x psh  .a psh  tpa ( flags to A)  .a psh  sei
   .h psh
.ifdef S08
   flash-command ) clr  ( do what we can to prevent spurious writes/erases)
.then
   Dispatch  again  ;c


( If the chat interaction changes the PC on this stack frame to point
  somewhere other than _after_ the __swi, not all is lost - since we got
  here via a _call_ from reset, we'll return to _that_ loop, and re-enter
  the SWI.

  On the other hand, if the PC remains unaltered, an RTI from the SWI's
  stack frame wil simply return here, and we'll take the "exception" again.)

label interact
   begin  emulated-swi c  again  ;c

Vreset handler
   @ram #ram + # ldhx
   txs

.ifndef in-ram  ( don't compile clock/UART code for RAM-based versions)
ld target/S08/chat-init.mu4
.then

   begin  interact c  again  ;c
