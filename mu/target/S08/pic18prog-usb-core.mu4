( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading PIC18 programmer over USB (core)

__meta

hex

( Support for programming PIC18 parts over ICSP, using my JS16 as a
  USB-based programmer.)

.ifndef S08JS
   z" This code will currently only work on an S08JS device."  abort
.then

( Because we want to be independent of the USB byteloader code, we have to
  re-implement a lot of that code: the command dispatch table, and the
  basic handling of SETUP, IN, and OUT tokens. But code to enumerate the
  device, and the device descriptors, are *not* repeated here. We only
  implement the "vendor specific" requests required to do BDM.)

10 constant buflen0  ( buffer length, and hence max packet size, for endpoint 0)

1860 equ 'usb            ( USB RAM origin; buffer descriptors live here)
1880 equ 'usb-buffers    ( endpoint RAM from here to 195f)

__host

: >bufaddr  ( buffer - bufaddr)
   dup 0f and if  error" endpoint buffer must be on a 16-byte boundary"  then
   \eq 'usb -  2 >> ;

__meta

( Buffer descriptor control byte to match _any_ SETUP transaction, or an IN
  or OUT transaction with a DATA1 packet.)
0c8 equ match-data1

( USB buffer descriptors)
1860 equ in-control
1861 equ in-count
1862 equ in-bufaddr
1863 equ out-control
1864 equ out-count
1865 equ out-bufaddr

'usb-buffers            equ in-buffer
'usb-buffers buflen0 +  equ out-buffer

( Useful aliases for buffer addresses - for control requests.)
out-buffer 0 + equ bmRequestType
out-buffer 1 + equ bRequest
out-buffer 2 + equ wValue
out-buffer 3 + equ wValueHi
out-buffer 4 + equ wIndex
out-buffer 5 + equ wIndexHi
out-buffer 6 + equ wLength
out-buffer 7 + equ wLengthHi

( Create a forward jump at the start of the flash sector.)
forward-jmp pic18-loop

( Port pins.)

( PIC18     JS16
  ======================
  PGC    -- PTA3, pin 11
  PGD    -- PTA2, pin 10
  /MCLR  -- PTA4, pin 12
  PGM    -- PTA1, pin 9
)

label init-pins
   .a clr  PTAD ) sta   ( set pins low)
   .a com  PTADD ) sta  ( set them for output)
   1e # lda  PTADS ) sta  ( set high drive)  rts  ;c

( The building blocks.)

comment %% delay-times

  In HX is a _negated_ 16-bit delay count. We negate the count and
  count _up_ to make it easier to know when to increment the high half.
  Remember that inc and dec affect V, N, and Z, but not C.

  I _could_ put it on R stack. Delay would skip over ret address and decr
  2,s and 3,s.

  Delay time is 9n + (9n/256) + 18 ( pshes, ais, call+ret) cycles
              = 9n(1 + 1/256) + 18
              = 9n(257/256) + 18

  At 24M, to delay 1ms, n = (24000 - 18) * 256 / (9*257) = 2654
        to delay 100us, n = (2400 - 18) * 256 / (9*257) = 263.6

%%

label delay
   .h psh  .x psh
   begin  begin  1 ,s inc  ( lo)  0= until  0 ,s inc  0= until
   2 # ais  rts ;c

label 1ms
   #-2654 # ldhx  delay j  ;c

label 100us
   #-264 # ldhx  delay j  ;c

( Now for some spiffy macros that let us define the bit send and receive
  words so that they look like timing diagrams!)

macro D/  PTAD 2 bset   ;m
macro D\  PTAD 2 bclr   ;m
macro C/  PTAD 3 bset   ;m
macro C\  PTAD 3 bclr   ;m

label drive-d  ( drive value of C onto bus)
   CS if  D/  rts  then
          D\  rts  ;c

macro D@  PTAD 2 bset? if then  ( sets C with pin value!)  ;m
macro D!  drive-d c    ;m

label send-bit      D!  C/      C\   rts  ;c
label recv-bit          C/  D@  C\   rts  ;c

( 4-bit command to send in A. Send LSB first.)
label send-cmd
   .a psh  ( byte to send)
   4 # lda  .a psh  ( bit count)
   begin  1 ,s ror  send-bit c  0 ,s decz? until
   2 # ais  rts  ;c

( Byte to send in A. Send LSB first.)
label send-byte
   .a psh  ( byte to send)
   8 # lda  .a psh  ( bit count)
   begin  1 ,s ror  send-bit c  0 ,s decz? until
   2 # ais  rts  ;c

( Read byte from chip into A.)
label recv-byte
   PTADD 2 bclr  ( undrive PGD)
   .a psh  ( byte accumulator)
   8 # lda  .a psh  ( bit count)
   begin  recv-bit c  1 ,s ror  0 ,s decz? until
   1 ,s lda  2 # ais
   PTADD 2 bset  ( redrive PGD)  rts  ;c

1 zvar total-count

label toggle-control  ( HX points to EP buffer control byte)
   0 ,x lda  40 # and ( data0/1)  match-data1 # eor  0 ,x sta  rts  ;c

( Read data from chip and copy into IN buffer.)
label prepare-next-in
   total-count ) lda  0!= if  ( still data to read)
      .h clr  .x clr  ( bufptr)
      buflen0 # cmp  u>= if  ( whole packet)  buflen0 # lda  then
      .a psh  begin
         .a clr  total-count ) dec  0= if  .a inc  then  ( ACK)
         recv-byte c
         in-buffer ,x sta  .x inc
      0 ,s decz? until  .a pul
      txa  ( in-count to a)
      total-count ) tst  0= if  stop-bit c  then
   then
   ( fall thru)

( Enter with in-count in A)
label prepare-fixed-in
   in-count ) sta
   ( toggle DATA0/1)  in-control # ldhx  toggle-control c  ( fall thru)

( Get ready to receive another SETUP token.)
label expect-setup-token
   match-data1 # lda  out-control ) sta
   ( fall thru)

( Jump here if out-control has already been toggled.)
label expect-out-token  ( expect OUT or SETUP, really)
   buflen0 # lda  out-count ) sta
   CTL 5 bclr ( TSUSPEND off - resume processing)
   rts  ;c

label finish-twi-write
   stop-bit c
   ( fall thru)

( Prepare to return status - a zero-length IN transaction. Also be ready to
  accept another SETUP even if it would mean abandoning the current
  transfer. This is what the USB spec says we have to do.)

label finish-control-write
   ( Setup IN status stage)
   .a clr  in-count ) sta  ( zero-length DATA1 transaction)
   match-data1 # lda  in-control ) sta
   expect-setup-token j  ;c

( wValue is twi-cmd and wIndex is slave-addr.)

( XXX is slave addr as sent to us shifted left already?)
( Code as written currently says NO.)
( XXX all send-byte's should really check ACK bits!)

label slave+write
   start-bit c
   wIndex ) lda  .a lsl ( slave addr + write)  send-byte j  ;c

label send-command
   wLength ) lda  total-count ) sta
   slave+write c
   wValue ) lda  ( twi-cmd)  send-byte j  ;c

label bulk-write
   send-command c  ( save wLength, send START, slave addr+write, cmd)
   wLength ) lda  0!=  finish-twi-write  until
   expect-setup-token j  ( wait for OUT or new SETUP)  ;c

( Don't start talking to the slave at all for 0-length reads. It would just
  break things.)

label bulk-read
   wLength ) lda  0!=  prepare-fixed-in  until
   send-command c  ( save wLength, send START, slave addr+write, cmd)
   restart-bit c
   wIndex ) lda  .a lsl  .a inc  ( slave addr + read)  send-byte c
   prepare-next-in j  ;c

( Read last IN buffer of ACK bits from chip.)
label read-acks
   wLength ) lda  prepare-fixed-in j  ;c

( Ping slave. Just send START bit, slave address+write, and STOP bit, and
  return the value of the ACK bit.)

label ping-slave
   slave+write c  ( returns ACK in A)  stop-bit c
   in-buffer ) sta  1 # lda  prepare-fixed-in j  ;c

( Return NAK on IN.)
label nak-in
   .a clr  in-control ) sta  rts  ;c

label setup-token
   nak-in c

( NOTE: Command numbers are all given in HEX.)
( assume vendor request)
   bRequest ) lda
   40 # sub   ( TWI commands start at 40 hex; anything below that, we exit)
   u< if  ( 00 - 3f Bye)  2 # ais  ( skip return from process-usb)  rts  then

   ( 40 Read)              0!=   bulk-read   until
   ( 41 ReadAcks)  .a dec  0!=   read-acks   until
   ( 42 Write)     .a dec  0!=   bulk-write  until
   ( 43 Ping)      .a dec  0!=   ping-slave  until

   ( unknown, fall thru)

label stall
   EPCTL0 1 bset ( STALL)  rts  ;c

label setup-or-out-token
   out-control ) lda  3c # and  34 # cmpne?  setup-token  until

   ( OUT token)
   ( If last OUT was zero-length, it was a status transaction for a
     control read, so get ready for a new SETUP.)
   out-count ) lda  0= if  expect-setup-token j  then

   ( Otherwise, we've got a bulk write data payload. Write bytes to slave
     via TWI. Put ACK bit into in-buffer, just in case the host wants to
     read it back - though it'll only see the ACK bits of the last OUT.)

   .h clr  .x clr  ( bufptr)
   .a psh  ( repeat out-count times)
   begin
      ( send byte from out-buffer)
      ( XXX logical OR all the ACK bits?)
      out-buffer ,x lda  send-byte c  ( send byte, recv ACK bit)
       in-buffer ,x sta  .x inc  total-count ) dec  ( affects Z)
   0 ,s decz? until  .a pul

   ( If total-count zero, we've received all the data; send STOP bit and
     queue up status IN token.)
   0= if  finish-twi-write j  then

   ( total-count non-zero; expect more data.)
   ( toggle DATA0/1)  out-control # ldhx  toggle-control c
   expect-out-token j  ;c

( An IN token is either part of a data stage of a control read, or it is
  the status stage of a control write. Status IN's are always zero bytes
  long; sometimes the last IN of the data stage is also zero bytes long -
  see copy-to-in for details.

  The upshot is that if the last packet wasn't full we should expect no
  more IN transactions.)

label in-token
   ( If last IN was a full packet, ready some more data.)
   in-count ) lda  buflen0 # cmp  0= if  prepare-next-in j  then
   ( fall thru)

label nak-in-expect-setup
   nak-in c  ( further IN's will return NAK)
   expect-setup-token j  ;c

( XXX To convert process-usb into an interrupt handler, jumps to
  setup-or-out-token, in-token, and nak-in-expect-setup should really be
  _calls_; we should handle all the flags that are set all at once, rather
  than only one per call. Also, interrupt flags - like TOKDNEF and STALLF -
  should be cleared after being handled.)

label process-usb
   INTSTAT 3 bset? if ( TOKDNEF)
      STAT ) lda  INTSTAT 3 bset  ( ack TOKDNEF)
      0f8 # and  setup-or-out-token 0!= until
       08 # cmpne?  in-token  until
      ( not EP0; ignore)  ( fall thru)
   then
   INTSTAT 7 bset? if ( STALLF)
      EPCTL0 1 bclr ( remove EPSTALL)
      INTSTAT 7 bset  ( ack STALL)
      nak-in-expect-setup j  ( get ready to receive SETUP)
   then
   rts  ;c

\m twi-loop resolve>>  ( jump at start of Flash points here)
label main-loop
   init-pins c    ( setup TWI bitbang interface)
   finish-control-write c  ( ready status IN; also prepare for SETUP)
   begin  process-usb c  again  ;c
