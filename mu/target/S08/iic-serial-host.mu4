( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading IIC over serial (host)

( Host-side code to drive the IIC code in target/S08/iic-serial-core.mu4.)

hex

( Commands:
0-2f  Bye        - exit AVR chat code and return to chat loop
  30  Start      - send START bit
  31  Restart    - send RESTART bit
  32  Stop       - send STOP bit
  33  Send       - send data byte, return ACK/NACK
  34  RecvAck    - receive data byte, send ACK
  35  RecvNack   - receive data byte, send NACK
  36  EndRecv    - read last byte received
)

: iic.Hello  ( start the IIC firmware on the connected device)
   #115200 bps  resync
.ifdef in-ram
   0112 c.SetPC c.Run  ( run from ram - loads right after flash routine)
   " IICtX" await  ( match signature) ;
.else
   @iic c.SetPC c.Run
   " IICt1" await  ( match signature) ;
.then


( Some shorthands)
: S    ( start)    30 send ;
: PS   ( restart)  31 send ;
: P    ( stop)     32 send ;
: W    ( write)    33 send  send  recv u. ;  ( ACKs are wrong?!?)
: Ra   ( read)     34 send  recv ;  ( read and ACK)
: Rn   ( read)     35 send  recv ;  ( read and NACK)
: Re)  ( endread)  36 send  recv ;  ( read last byte)

variable iic-slave  0fe iic-slave !  ( default)
: Aw   ( addr+write)  iic-slave @  0fe and  W ;
: Ar   ( addr+read)   iic-slave @   01  or  W ;

( Because reads are pipelined - the first one returns junk, and the last
  byte must be fetched with Re) ( - let's make some shorthands for the
  initial read, which will always drop its result.)

: (Ra   Ra drop ;
: (Rn   Rn drop ;


( Standard form for interact - we might also be using the serial chat for
  devices that lack an IIC interface.)

: avrchat.Hello    iic.Hello  0b0 iic-slave ! ;

( The following is test code to talk to my simple "debug stub" running on
  an Atmel AVR.)

( First byte of IIC payload is a chat command.)
: cmd  ( cmd)   S  Aw  W ;

( zp* and zpcell* read from _program_ memory. z* and zcell* read from
  _data_ memory.)

: z!       ( addr)  >hilo  10 cmd  W  W  P ;
: zp*      ( - b)          11 cmd        PS  Ar      (Rn  Re)  P ;
: zpcell*  ( - w)          11 cmd        PS  Ar  (Ra  Rn  Re)  P  lohi> ;
: z*       ( - b)          12 cmd        PS  Ar      (Rn  Re)  P ;
: zcell*   ( - w)          12 cmd        PS  Ar  (Ra  Rn  Re)  P  lohi> ;
: z&       ( b)            13 cmd  W     P ;
: zcell&   ( w)    >hilo   13 cmd  W  W  P ;
: zgo                      14 cmd        P ;

: zcmd   ( buf addr len cmd - len)  rot z!  cmd  swap m ! ;

: R?  ( len - len-1)  1-  =if  Ra ^  then  Rn ;

: zrcmd  constant  does> @  ( buf addr len cmd)
   over if
      zcmd  PS  Ar  R? drop  begin  =while  R? m&  repeat  drop  Re) m&  P  ^
   then  2drop 2drop ;

: zwcmd  constant  does> @  ( buf addr len cmd)
   over if
      zcmd  for  m* W  next  P  ^
   then  2drop 2drop ;

11 zrcmd zpread  ( buf addr len)
12 zrcmd zread   ( buf addr len)
13 zwcmd zwrite  ( buf addr len)

15 zrcmd zeread   ( buf addr len)  ( read eeprom)
16 zwcmd zewrite  ( buf addr len)  ( write eeprom)

( XXX Support for bootloader commands can wait. ;-)
