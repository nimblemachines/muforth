| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading S08 Chat v4 (target)

| Chat version 4
|
| This has only minor changes from v3, but making a new version still
| makes. I want to clean things up, drop 908 support, and experiment with
| a "trampoline-style" way of calling code. I'm also thinking of adding
| a simple tasker, like in the AVR target. And in general I like starting
| the commands at 10 (hex), so I'm going to do that too. ;-)

| Commands:
| 00 - 0f and
| 18 - ff      - ignored by chat; force other command loops to return to chat;
|                can be used as an "idle" command
|
| 10 version   - set HX to point to version string
|
| 11 run       - push HX (PC), do set-addr, return to pushed PC
| 12 set-addr  - recv two bytes, write them into H & X registers
| 13 get-addr  - send H then X back to host
|
| 14 read-n    - recv count, read and send bytes from memory @HX, incrementing
| 15 write-1   - recv byte, write to memory @HX, increment HX
| 16 flash-1   - recv byte, write to flash @HX, increment HX, return FSTAT
|                (calls a routine in ram that host downloads to device)

hex
__meta

.ifdef in-ram  ram
.else

   trims    "14 allot      | ffac - ffbf: trims and security bytes
   vectors  "40 allot      | ffc0 - ffff
   | Memory code (wipe) has set boot and commit to reasonable defaults.
   commit

.then

| Compile the first 32 bits of the current muforth Git commit. When asked
| for the version, return these four bytes, in big-endian order.

label version
   muforth-commit drop 8 evaluate  >0123  c, c, c, c,

.ifndef in-ram  boot  .then

label recv-byte  ( returns char in A)
   begin  SCIS1 5 ( recvr full)  bset? until
   SCID ) lda  rts  ;c

label send-byte  ( transmits char in A)
   begin  SCIS1 7 ( xmit empty)  bset? until
   SCID ) sta  rts  ;c

label process-serial
   recv-byte c  ( get command byte)
   0f # sub  ( ignore 00 to 0f)

   .a decz? if  ( version)
      version # ldhx  rts  then

   .a decz? if  ( run)
      .x psh  .h psh  ( push HX as PC)
      .a inc  ( fall thru!)  then

   .a decz? if  ( set-addr)
      recv-byte c  .a psh  .h pul  ( set H)
      recv-byte c             tax  ( set X)  rts  then

   .a decz? if  ( get-addr)
      .h psh  .a pul  send-byte c  ( send H)
                 txa  send-byte j  ( send X)  then

   | NOTE: A count of 0 will send back 256 bytes! This is by design. ;-)
   .a decz? if  ( read-n)
      recv-byte c  .a psh ( count)
      begin  0 ,x lda  send-byte c  1 # aix  0 ,s decz? until
      .a pul  rts  then

   .a decz? if  ( write-1)
      recv-byte c  0 ,x sta  1 # aix  rts  then

   .a decz? if  ( flash-1)
      recv-byte c  flash-byte c  ( call flash routine in RAM)  1 # aix
      FSTAT ) lda  send-byte j  then

   ( unknown command)   rts  ;c

Vreset handler
.ifndef in-ram  ( don't compile clock/UART code for RAM-based versions)
   | Init clock and serial port, and disable watchdog.
   ld target/S08/chat-init.mu4

   | Zero all of ram. But only for flash-resident chat. ;-)
   @ram # ldhx  .a clr  begin  0 ,x sta  1 # aix  @ram #ram + # cphx  0= until
.else
   @ram #ram + # ldhx
.then
   txs   | Set stack pointer (mp) to end of ram.

   begin  process-serial c  again  ;c
