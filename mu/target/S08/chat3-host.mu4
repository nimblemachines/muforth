| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading S08 Chat v3 (host)

| Using the chat3 transport (cx.Something) words, define everything we need
| in order to connect to interact.

hex

| We resync right before reading from a new memory address, and when
| getting or setting the SP. We don't do these all the time, but when we
| do, we'd like to get the right addresses! By "sprinkling" these protocol
| resets throughtout the interaction, it's difficult for the two machines
| to stay out of whack for very long. Doing a "du" or ".regs" usually
| resets things.

: c.SetAddr   resync  cx.SetHX ;
: GetSP       resync  cx.GetSP ;

: chat-c@  c.SetAddr  cx.ReadNext ;
: chat-c!  c.SetAddr  cx.WriteNext ;

.ifndef m&

| We load this file just to run HC08 code to, eg, talk to AVR targets, so
| we won't have the version in target/S08/memory.mu4. If the other target
| hasn't loaded the equivalent, we define our own version here.

| Generic tools for reading and writing host-side memory. These give us a
| second "hand" so we can, eg, compare two images using c@+ on the one hand
| and m* on the other.

variable m  ( memory pointer)
: m*  ( - byte)  m @  c@  1 m +! ;
: m&  ( byte)    m @  c!  1 m +! ;

.then  ( ifndef m&)

| This can read from and write to arbitrary buffers on the host side, not
| just pieces of the image.

: c.setup-chunk  ( buf a u - u)   swap c.SetAddr  swap m ! ;

.ifdef S08

( Use streaming read.)
: c.ReadChunk    ( buf a u)
   c.setup-chunk  ?if  dup cx.Stream  for  recv m&  next  then ;

.ifdef usb-debug-via-serial

: c.FlashChunk  complain ;  ( we should be using USB to flash when running both)

.else

: flash-chunk-until-error  ( len - status)
   for  m* cx.FlashNext  dup 0c0 xor if  rdrop ^  then  drop  next
   0c0 ;

: c.FlashChunk   ( buf a u cmd - status)
   30 \eq FSTAT chat-c!  ( clear flash errors)
   \m flash-command chat-c!  c.setup-chunk
   flash-chunk-until-error
   00 \m flash-command chat-c! ;

.then  ( usb-debug-via-serial)

.else  ( 908 version without streaming read)

: c.ReadChunk    ( buf a u)
   c.setup-chunk  for  cx.ReadNext m&  next ;

.then

: c.WriteChunk   ( buf a u)
   c.setup-chunk  for  m* cx.WriteNext  next ;

: GetRegs  ( buf - sp)
   GetSP  dup push  6 c.ReadChunk  pop ;

: SetRegs  ( buf)
   GetSP            6 c.WriteChunk ;

ld target/S08/deprecated-chat-frame.mu4

: c.Hello  ( - in-ram?)
   resync  ( exit BDM loop, if running; resync chat protocol)

   cx.Version  4 cx.Stream  recv recv recv recv  3210>
   cr ." Chat firmware version "
   radix preserve  hex  sep preserve  -sep  <#  4#  4#  #> type
   get-regs pc@ [ @ram #ram + #] u<  dup if  ."  (running in RAM)"  then
   cr ." Connected device is "  cx.device-id .device
   ( Copy flash routine to RAM.)  copy-flash-routine ;

: c.Status  ( - dp)           get-regs  hx@ ;
: c.Run     ( pc dp)  hx! pc! set-regs  cx.Run ;

.ifdef S08

: chat
   chat-via  c.Hello  c.Status  c.Run  c.ReadChunk  c.WriteChunk  c.FlashChunk ;

.else

: chat
   chat-via  c.Hello  c.Status  c.Run  c.ReadChunk  c.WriteChunk  complain ;

.then  ( S08)
