( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading S08 Flash programming (host)

hex

( S08 Flash memory layout.

  ffac  my FTRIM - trims to 9.216M
  ffad  my TRIM  - ditto
  ffae  FTRIM bit - factory trim for 8M
  ffaf  TRIM byte - ditto

  ffb0 - ffbf    is all about _security_
  ffb0 - b7   comparison key
  ffb8 - bc   available
  ffbd        NVPROT; copied to FPROT at reset
  ffbe        available
  ffbf        NVOPT; copied to FOPT at reset

  ffc0 - ffff  Interrupt and reset vectors)

forth

05 constant mBlankCheck
20 constant mByteProgram
25 constant mBurstProgram
40 constant mPageErase
41 constant mMassErase

#512 constant /page   ( S08 has 512 byte Flash pages - this is erase size)

: check-flash-status  ( status)
   ." FSTAT=" dup u.
   30 and if error" flash access or protection violation" then ;

: program-chunk  ( 'target len)
   cr ." program "  2dup swap u. u.
   over image+  mByteProgram  t.FlashChunk  check-flash-status ;

: erase-page  ( 'target)
   cr ." erase " dup u.
   1  over image+  mPageErase  t.FlashChunk  check-flash-status ;

: erase?  ( 'target - erase?)   [ /page 1- #] and  0= ;

( Before we program the _first_ row of a page, we erase the page.)
: program-row  ( 'target len - 'target+len)
   2dup + push  over erase? if  over erase-page  then  program-chunk  pop ;

( Do the programming in chunks smaller than a whole page. Some target
  programming code - eg via BDM - pushes the bytes to be programmed onto
  the target stack, which may be quite small. Let's do it in 64 byte chunks.)

: flash-region  ( a len)
   40 /mod  ( r q)  swap push  for   40 program-row  next
                       pop  =if  ( rem) program-row  drop ^  then  2drop ;

( Where is the bootloader code?)
( NOTE: this is currently the same as what last-page? calculates, but only
  because the bootloader currently fits into the last page. If that
  changes, last-page will stay the same but this constant will change. Best
  to keep them separate.)

@flash #flash +  1 Ki 2/ -  constant @boot

( Which page of the Flash are the vectors on? NOTE: this is currently the
  same as @boot, but only because the bootloader currently fits into the
  last page. If that changes, @vector-page will stay the same but @boot will
  change. Best to keep them separate.)

@flash #flash +  1 Ki 2/ -  constant @vector-page

( Check to see if we're going to clobber the bootloader and complain if
  we're not executing from RAM.)

: ?clobbering-loader  ( a u - a u)
   2dup +  @boot  swap u< not  if ^ then  ( not touching bootloader - Ok)
   pc@  [ @ram #ram + #] u<  if ^ then  ( running in RAM - Ok)
   error" You need to be running a RAM-based version of the chat code in
order to re-flash it. Consult a local guru. ;-)" ;

( Prepare to do a comparison or computation between data read from the
  target into a buffer, and data in our memory image. Read a chunk from the
  target into buf, and set m to point to the beginning of buf.

  Be careful about setting m. Some chunked read implementations use it, so
  set it *after* doing the read.)

: setup-comparison  ( 'target len buf - 'target len)
   push  2dup  r@ t.ReadChunk  ( 'target len)  pop m ! ;

( On the S08, erasing the vectors means erasing the TRIM bytes, the secure
  bits, and the bootloader. So be careful about re-programming things, esp
  the TRIMs and the secure bits. Copy from ffac to ffaf.

  If we've put trims into the image, don't overwrite these with the values
  from the chip. Use bitwise AND to merge the chip and the image!)

: save-trims  ( save them from the wrecking ball)
   -- cr ." save-trims"
   0ffac 4 pad  setup-comparison
   for  dup image-c@ m* and  over image-c!  1+  next  drop ;

( Flash vectors, security bytes, & trims)
: flash-vectors
   cr ." flashing vectors, security bytes, and trims"
   0ffac 14  ( 0ffac - 0ffcf)  program-chunk  ( trims and security bytes)
   0ffc0 40  ( 0ffc0 - 0ffff)  program-chunk  ( vectors) ;

: flash-image
   h preserve  flash
   save-trims ( before erasing anything!)
   region ( a u)  ?clobbering-loader  flash-region
   @vector-page  \m here  u< if  flash-vectors  then ;

( Fast verify! Using chunked reads.)
: verify-chunk  ( 'target len - 'target+len)
   -- cr ." verify "  over u.  dup u.
   2dup + push
   ( 'target len) pad  setup-comparison
   for  dup image-c@ m* xor  if  dup u.  then  1+  next  drop
   pop ;

( Verify in chunks of 256 bytes. While the USB chat can now read really big
  chunks at a time - like 4 KiB - the serial chat uses a one byte count,
  and so is limited to 256 at a time.)

: verify-region
   100 /mod  ( r q)  swap push  for  100 verify-chunk  next
                        pop  =if  ( rem) verify-chunk  drop ^  then  2drop ;

: ?empty-region ( a u - a u)  =if ^ then
   cr ." WARNING: The flash region is empty. verify will always report no change." ;

.ifndef chat2
: ?skip-commit  ( a u - a u)  over @boot =  if  4 -4 v+  then ;
.else
: ?skip-commit ;
.then

: verify
   h preserve  flash
   region ( a len)  ?empty-region  ?skip-commit  verify-region  ( program image)
   @vector-page  \m here  u< if
      save-trims
      0ffac 54  ( 0ffac - 0ffff)  verify-region  ( trims, security bytes, vectors)
   then ;
