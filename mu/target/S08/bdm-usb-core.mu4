( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading S08 BDM-over-USB transport (core)

__meta

( Support for Freescale's S08 Background Debug Mode - or BDM.)

( This code will support talking to both S08 and ColdFire V1 cores via
  BDM over USB.

  Because we want to be independent of the USB byteloader code, we have to
  re-implement a lot of that code: the command dispatch table, and the
  basic handling of SETUP, IN, and OUT tokens. But code to enumerate the
  device, and the device descriptors, are *not* repeated here. We only
  implement the "vendor specific" requests required to do BDM.)

( This file also requires the S08 bit routines, found in bdm-bit-S08.mu4.)

hex

10 constant buflen0  ( buffer length, and hence max packet size, for endpoint 0)

1860 equ 'usb            ( USB RAM origin; buffer descriptors live here)
1880 equ 'usb-buffers    ( endpoint RAM from here to 195f)

__host

: >bufaddr  ( buffer - bufaddr)
   dup 0f and if  error" endpoint buffer must be on a 16-byte boundary"  then
   \eq 'usb -  2 >> ;

__meta

( Buffer descriptor control byte to match _any_ SETUP transaction, or an IN
  or OUT transaction with a DATA1 packet.)
0c8 equ match-data1

( USB buffer descriptors)
1860 equ in-control
1861 equ in-count
1862 equ in-bufaddr
1863 equ out-control
1864 equ out-count
1865 equ out-bufaddr

'usb-buffers            equ in-buffer
'usb-buffers buflen0 +  equ out-buffer

( Useful aliases for buffer addresses - for control requests.)
out-buffer 0 + equ bmRequestType
out-buffer 1 + equ bRequest
out-buffer 2 + equ wValue
out-buffer 3 + equ wValueHi
out-buffer 4 + equ wIndex
out-buffer 5 + equ wIndexHi
out-buffer 6 + equ wLength
out-buffer 7 + equ wLengthHi

label bdm-write-commands  ( all are control writes)
   .a decz? if  ( 24 BkgdLow)
      BdmDriveLow j
   then

   .a decz? if  ( 25 BkgdHiZ)
      BdmHiZ j
   then

   .a decz? if  ( 26 ResetLow)
      ResetDriveLow j
   then

   .a decz? if  ( 27 ResetHiZ)
      ResetHiZ j
   then

   .a decz? if  ( 28 Set4M)
      BdmRx1 # ldhx
      SetRx1_4M c
      SetTx1_4M j
   then

   .a decz? if  ( 29 Set8M)
      BdmRx1 # ldhx
      SetRx1_8M c
      SetTx1_8M j
   then

.labels. .contains SetRx1_16M .if
   .a decz? if  ( 2a Set16M)
      BdmRx1 # ldhx
      SetRx1_16M c
      SetTx1_16M j
   then
.then

   ( unknown, fall thru)

label stall
   EPCTL0 1 bset ( STALL)  rts  ;c

label toggle-data  ( HX points to EP buffer control byte)
   0 ,x lda  40 # and ( data0/1)  match-data1 # eor  0 ,x sta  rts  ;c

( This is a control read.)
label sync-pulse
   in-buffer # ldhx  ( point HX at start of IN buffer)
   SyncPulse c
   ( fall thru)

( read-result is only used to read the result of hybrid write/read
  commands, such as ReadByte, ReadByteWS, WriteByteWS, and WriteNextWS.

  The data to read has already been written to the IN buffer. We just need
  to ready the buffer descriptor. Assume that wLength is the correct read
  count. It will always be less than one packet.)

label read-result
   wLength ) lda
   ( fall thru)

( Enter with in-count in A)
label prepare-fixed-in
   in-count ) sta
   ( fall thru)

label prepare-in  ( in-count has already been set)
   ( toggle DATA0/1)  in-control # ldhx  toggle-data c  ( fall thru)

( Get ready to receive another SETUP token.)
label expect-setup-token
   match-data1 # lda  out-control ) sta
   ( fall thru)

( Jump here if out-control has already been toggled.)
label expect-out-token  ( expect OUT or SETUP, really)
   buflen0 # lda  out-count ) sta
   CTL 5 bclr ( TSUSPEND off - resume processing)
   rts  ;c

( Prepare to return status - a zero-length IN transaction. Also be ready to
  accept another SETUP even if it would mean abandoning the current
  transfer. This is what the USB spec says we have to do.)

label finish-control-write
   ( Setup IN status stage)
   .a clr  in-count ) sta  ( zero-length DATA1 transaction)
   match-data1 # lda  in-control ) sta
   expect-setup-token j  ;c

1 zvar bdm-cmd
1 zvar size
1 zvar expected

1 zvar total-count  ( loaded from wLength)

( The following parameters are passed in the SETUP packet:
  bdm-cmd  size  expected  wLength

  bdm-cmd is the one-byte command to send to the target; passed in wValue;

  size is the byte count to read or write per transaction; passed in
        wIndexLo;

  expected is 0 for reads, and for writes is the count of bytes we expect
        to see back from the target; only useful when size = wLength
        passed in wIndexHi;

  wLength is the length of the whole control request; could be more than
  one IN or OUT buffer full.
)

label save-command
   wLength ) lda  total-count ) sta
   wValue ) lda   bdm-cmd ) sta
   wIndex ) ldhx  size ) sthx
   rts  ;c

( After writing bytes via BDM, delay. For an S08 target we should delay
 16 target cycles; for a CFv1 target, 32 cycles. To satisfy both, we'll
 delay 32 cycles. Since we're running BDM at 24m on USB, we could be 6x
 faster than 4M target, so delay 32*6 of *our* cycles.)

( Macro? it's only 4 bytes. Putting into the code twice takes 8 bytes;
  putting in as a subr takes 5, plus 2*2 or 2*3 to call it...)

macro bdm-turn-delay
   #32 6 * 4 / # lda  begin .a decz? until  ( 4~ per loop)  ;m

( We need to read multiple bytes, both in bdm-read and in the OUT buffer
  handler -- to read the expected response. Enter with HX pointing to a
  buffer, and a count in A.)

label bdm-read-buf
   .a psh  begin  BdmRx c  0 ,s decz? until  .a pul  rts  ;c

( Since BDM rx and tx are buffer based, in order to send an arbitrary byte
  -- such as the BDM command code, which is now sent in the SETUP packet
  rather than the OUT buffer -- we have to put it somewhere and point to it
  with HX. bdm-send-a sends the value in A over BDM.)

label bdm-send-a
   pshhx  .a psh  tsx  BdmTx c  .a pul  pulhx  rts  ;c

( Handle a control read request involving a BDM command.
  
  We also handle a special case -- to make the host-side code easier to
  write and this code more foolproof: we test for repeated = 0, and simply
  set up zero-length IN if it is.)

label bdm-read
   save-command c
   ( fall thru)

( Read data from chip and copy into IN buffer.)
label prepare-next-in
   total-count ) lda  0!=  prepare-fixed-in  until
   buflen0 # cmp  u>= if  ( whole packet)  buflen0 # lda  then
   in-count ) sta
   in-buffer # ldhx
   .a psh  begin
      bdm-cmd ) lda  bdm-send-a c  ( write cmd byte)
      bdm-turn-delay  ( delay between write and read)
      size ) lda  bdm-read-buf c  ( read target response into buf at HX)
      0 ,s lda  size ) sub  0 ,s sta
   0= until  .a pul
   total-count ) lda  in-count ) sub  total-count ) sta
   prepare-in j  ;c

( Handle a general write request. There is a special case: if the wLength
  is zero, there is no data to write other than the command byte, so we can
  send the command right now and not wait for a later OUT packet ... which
  will never arrive.

  If size is non-zero, we save the contents of the SETUP packet so it's
  available when we get the data in OUT buffers.)

label bdm-write
   wLength ) lda  0= if  ( just send the bdm-command)
      wValue ) lda  ( load bdm-cmd from SETUP packet)
      bdm-send-a c  ( write cmd byte)
      finish-control-write j
   then

   ( Save cmd and other metadata for later handling.)
   save-command c
   expect-setup-token j  ( wait for OUT or new SETUP) ;c

( Return NAK on IN.)
label nak-in
   .a clr  in-control ) sta  rts  ;c

label setup-token
   nak-in c

( NOTE: Command numbers are all given in HEX.)
( assume vendor request)
   bRequest ) lda
   20 # sub   ( BDM commands start at 20 hex; anything below that, we exit)
   u< if  ( 00 - 1f Bye)  2 # ais  ( skip return from process-usb)  rts  then

   ( 20 Result)            0= if  read-result j  then
   ( 21 BdmRead)   .a dec  0!=    bdm-read       until
   ( 22 BdmWrite)  .a dec  0!=    bdm-write      until
   ( 23 Sync)      .a dec  0= if  sync-pulse j   then

   bdm-write-commands c  ( these are all control writes, so ...)
   finish-control-write j  ;c

label setup-or-out-token
   out-control ) lda  3c # and  34 # cmpne?  setup-token  until

   ( OUT token)
   ( If last OUT was zero-length, it was a status transaction for a
     control read, so get ready for a new SETUP.)
   out-count ) lda  0= if  expect-setup-token j  then

   ( Otherwise, we've got a data payload. Write bytes to target via BDM,
     delay, and then read target response.)

   ( Do several writes per control request! For each transaction, send the
     bdm-command, send size bytes. Keep doing this until we run out of bytes.
     We read the response only once, at the end.)

   out-buffer # ldhx
   .a psh  ( out-count)
   begin
      bdm-cmd ) lda  bdm-send-a c  ( write BDM cmd byte)
      size ) lda  .a psh ( write count)
      begin  BdmTx c  0 ,s decz? until  .a pul
      bdm-turn-delay  ( delay after write)
      0 ,s lda  size ) sub  0 ,s sta
   0= until  .a pul

   total-count ) lda  out-count ) sub  total-count ) sta

   ( If total-count zero, we've received all the data. Now read the
     target's response via BDM and copy it into the USB IN buffer, and then
     queue up a status IN token.)

   0= if
      expected ) lda  0!= if  in-buffer # ldhx  bdm-read-buf c  then

      ( All done! Queue up status IN token.)
      finish-control-write j
  then

   ( total-count non-zero; expect more data.)
   ( toggle DATA0/1)  out-control # ldhx  toggle-data c
   expect-out-token j  ;c

( An IN token is either part of a data stage of a control read, or it is
  the status stage of a control write. Status IN's are always zero bytes
  long; sometimes the last IN of the data stage is also zero bytes long -
  see copy-to-in for details.

  The upshot is that if the last packet wasn't full we should expect no
  more IN transactions.)

label in-token
   ( If last IN was a full packet, ready some more data.)
   in-count ) lda  buflen0 # cmp  0= if  prepare-next-in j  then
   ( fall thru)

label nak-in-expect-setup
   nak-in c  ( further IN's will return NAK)
   expect-setup-token j  ;c

( XXX To convert process-usb into an interrupt handler, jumps to
  setup-or-out-token, in-token, and nak-in-expect-setup should really be
  _calls_; we should handle all the flags that are set all at once, rather
  than only one per call. Also, interrupt flags - like TOKDNEF and STALLF -
  should be cleared after being handled.)

label process-usb
   INTSTAT 3 bset? if ( TOKDNEF)
      STAT ) lda  INTSTAT 3 bset  ( ack TOKDNEF)
      0f8 # and  setup-or-out-token 0!= until
       08 # cmpne?  in-token  until
      ( not EP0; ignore)  ( fall thru)
   then
   INTSTAT 7 bset? if ( STALLF)
      EPCTL0 1 bclr ( remove EPSTALL)
      INTSTAT 7 bset  ( ack STALL)
      nak-in-expect-setup j  ( get ready to receive SETUP)
   then
   rts  ;c

\m bdm-chat-loop resolve>>  ( jump at start of Flash points here)
label usb-bdm-loop
   BdmHiZ c  ResetHiZ c    ( make sure BKGD and RESET are high and tri-stated)
   finish-control-write c  ( ready status IN; also prepare for SETUP)
   begin  process-usb c  again  ;c
