( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Support common to all 908 and S08 interactions. Things like SWI stack
  frames, reading and writing memory using "indexed" reads and writes.)


loading S08 Interaction (common)

variable chatting
variable chat-vector

: chat-cmd   ( index - index+1)  dup cells  constant  1+
             does> @  chat-vector @ =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0  ( initial command index)

chat-cmd t.Hello
chat-cmd t.GetRegs      ( frame - sp)
chat-cmd t.SetRegs      ( frame)
chat-cmd t.Run          ( )
chat-cmd t.ReadChunk    ( target len buf)  ( XXX order??)
chat-cmd t.WriteChunk   ( target len buf)
chat-cmd t.FlashChunk   ( target len buf fcmd - status)

drop ( index)

-:  ( buf addr len)  rot t.ReadChunk ;
: >chat  [ #]      is |read
         ['] beh@  is |cell@
                   16 |addr !  ( size of addr in bits)
                    2 |cell !  ( size of cell in bytes) ;


( We keep a local copy of the target's registers in the same order as they
  appear in an exception frame.

  The order, low to high: H CC A X PCH PCL)

6 buffer chat-frame  ( local copy of SWI stack frame)
variable chat-sp     ( current value of target's SP)

: get-regs   chat-frame t.GetRegs  chat-sp ! ;
: set-regs   chat-frame t.SetRegs ;

( These index into our local chat-frame, _not_ into target memory!)
: reg  ( offset)  constant  does> @  chat-frame + ;  ( self-index)
00 reg .H
01 reg .CC
02 reg .A
03 reg .X
04 reg .PC
04 reg .PCH
05 reg .PCL

( These are handy.)
: pc!  .PC beh! ;
: pc@  .PC beh@ ;

: hx!   >lohi  .H c!  .X c! ;
: hx@          .H c@  .X c@  hilo> ;

: 4#  # # # # ;
: .bits8  binary  <#  4#  4#  #> type ;
: .h16       hex  <#  4#  #> type ;

: .b  ( a)  c@    .h8_ ;
: .w  ( a)  beh@  .h16  space ;

: .regs
   radix preserve
   cr  ." V--HINZC  A  H  X   SP   PC"
   cr  .CC c@ .bits8 space  .A .b  .H .b  .X .b  chat-sp @ .h16 space  .PC .w ;

: copy-chunk  ( 'target len - 'target+len)
   -- cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+  t.WriteChunk  pop ;

: copy-region  ( a len)
   -- cr ." copy-region "  2dup swap u. u.
   256 /mod ( r q)  swap push  for   256 copy-chunk  next
                        pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)

: copy-ram
   h preserve  ram
   ram-copied @  dup 0= if  drop  region drop  then
   \m here  over -  copy-region
   \m here  ram-copied ! ;

( t.Hello will copy the flash code to RAM.)
: hi   ram-copied off  chatting on  >chat  t.Hello  get-regs  .regs
       now __chatting is __meta  __meta ;

: chat-via   pop  chat-vector !  hi ;


forth
: run      copy-ram  set-regs  t.Run ;  ( don't wait for target)
: runwait  run  get-regs ;   ( wait for target)

: call  ( pc)  pc!  runwait .regs ;
: kick  ( pc)  pc!  run ;  ( when the code you're calling doesn't speak
                             the same protocol as running code)

: 'reset   \eq Vreset image-@ ;
: reset    'reset  call ;  ( MSP430 version has a delay between run and get-regs)
: go       'reset  kick ;


( NOTE: top cell of target stack is *scratch* - so allocate it but don't
  copy it back and forth.)

2 constant #scratch  ( number of "scratch" bytes on top of target stack)

meta
: sp0   [ @ram #ram +  #48 - #] ;
: sp!   #scratch -  hx! ;
: sp@               hx@  #scratch + ;
: depth  \m sp0  \m sp@ -  \m cell/ ;
forth

( stack> *first* builds a local image of the target stack - in the RAM
  image - and *then* copies it, in one chunk, to the target.)

: stack>  ( "push" stack to target)
   depth 0 max 8 min  ( more than that would be silly)
   \m sp0  over  \m cells -  dup \m sp! ( top of D stack)  image+  m !
   for  >lohi m& m&  next  ( copy each cell as a word to D stack)
   ( Now copy stack image to target)
   \m sp@  dup image+  m @ over - swap  t.WriteChunk ;

( stack< *first* copies the target stack, in one chunk, to the host's RAM
  image, and *then* pulls the values out and pushes them onto the host's stack.)

: stack<  ( "pop" stack from target)
   \m depth 0 max 8 min  ( more than that would be silly)  =if
   \m sp@ ( target)  over \m cells  ( len)  over image+  t.ReadChunk
   dup  ( depth)  \m sp@ image+  m ! ( do this after ReadChunk)
   for  m* m* hilo>  pop 2push  next  ( starting with top, push to R)
   for  2pop push  next  ( pop from R to reverse order)  ^  then  drop ;

: cont   stack>  runwait  stack<  .regs ;
-: ( cfa)  ( execute target word on stack)  pc!  cont ;  is remote


( Set |@ and |c@ to _some_ form of target fetch. Prefer to get bytes from
  target if we're connected. This word is useful so we can set an initial
  state for target's  du  and  dis  so that inspect won't crash when it
  runs |@ to get a default ea.)

: >target  chatting @ if  >chat ^  then  >image ;


( Define our own key bindings for memory dumping and disassembly. We'll
  default to host bindings if there isn't one in our array. This way we
  only have to define the "delta" between host and target behaviours.)

128 array hc08-seekeys

( Default key action is to run host key code)
host-seekeys hc08-seekeys  128 cells cmove

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes  ( set field width)
   >image   dup .addr  dup .hex-bytes
   chatting @ if
      -valid
      >chat   dup _addr  dup .hex-bytes
      -valid
   then
   drop ( a) ;

( So we can easily look at the signature embedded into the image.)
: 1dump-chars  ( a)
   hex-bytes
   >target
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   drop ;

hc08-seekeys  -1  du-mode dumping        >target  skip+  skip-  1dump        ( a - a')
hc08-seekeys  -1  du-mode dumping-chars  >target  skip+  skip-  1dump-chars  ( a - a')
hc08-seekeys  -1  du-mode disasming      >target  dis+   dis-   1dis         ( a - a')

hc08-seekeys 'seekeys !    ( switch over to our bindings)

key: d  ( a - a 0)   dumping        0 ;
key: C  ( a - a 0)   dumping-chars  0 ;  ( small c is "call")
key: i  ( a - a 0)   disasming      0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)
( make an alias so we can still get to host's du)
: _du  du ;

( Sometimes, when chatting, we want to dump or disassemble something that
  is in RAM. If we have just compiled it, and haven't yet run any code, the
  host RAM and target RAM are out of sync; and because we show the contents
  of the target RAM when chatting, we see garbage.

  To improve this situation, let's copy-ram - if we're chatting and trying
  to look at the ram - before doing a dis.)

: ?sync-ram  ( a - a)
   chatting @ if
      h preserve  ram
      dup  ram-copied @  \m here  within if  copy-ram  then
   then ;

: du  ( a - a')               dumping    inspect ;
: dis  ( a - a')   ?sync-ram  disasming  inspect ;
