( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Assembler for Freescale HC08/HCS08 microcontrollers.)

loading S08 assembler

forth

hex

: b,  \m c, ;
: w,  \m , ;

: ill   error" illegal addressing mode" ;

comment
===========================================================================
One operand addressing modes, by column
    30 direct - 8 bit absolute
    40 A reg
    50 X reg
    60 IX1 - indexed by HX, 8 bit offset
  9E60 SP1 - indexed by SP, 8 bit offset
    70 IX  - indexed by HX, no offset

Two operand addressing modes, by column
    A0 immediate
    B0 direct - 8 bit absolute
    C0 extended - 16 bit absolute
    D0 IX2 - indexed by HX, 16 bit offset
  9ED0 SP2 - indexed by SP, 16 bit offset
    E0 IX1 - indexed by HX, 8 bit offset
  9EE0 SP1 - indexed by SP, 8 bit offset
    F0 IX  - indexed by HX, no offset

We add the following "fake" column for instructions on H reg, of which
there are only three: clrh, pshh, pulh
For consistency we create an inherent ".h" mode.
To make my jump tables work
    60 H reg
===========================================================================

( Addressing modes)

( The indexing words by default create two-op values. The one-op code has
  to convert them and check for illegal addressing modes.)

a0 constant imm
b0 constant dir
c0 constant ext
d0 constant ix2  9ed0 constant sp2
e0 constant ix1  9ee0 constant sp1
f0 constant ix

: u8?  ( u - flag)  100 u< ;  ( if unsigned value fits in 8 bits)
: s8?  ( n - flag)  80 + u8? ;  ( if signed value fits in 8 bits)

assembler
: )   ( a - a op)  dup u8? if dir ^ then  ext ;
: #   ( n - n op)  imm ;
: ,s  ( offset - offset' op)
   ( adjusts offset by 1 since hardware stack is empty descending)
               1+  dup u8? if sp1 ^ then  sp2 ;
: ,x  ( offset - offset op)
   =if ( nonzero)  dup u8? if ix1 ^ then  ix2 ^ then  ( 0) ix ;

: ,x+   \a ,x ;

40 constant .a
50 constant .x
60 constant .h  ( fake column - contiguous with .a and .x to make clr easier)
forth

( Convert column to index. Leftmost is leftmost valid column.)
: col>  ( col leftmost - index)  -  dup 0< if ill then  4 u>>  0f and ;


forth
: inh  constant does> @ b, ; ( "inherent")
: stackop  constant does> @  ( reg op)  swap  \a .a col> 2* + b, ;
assembler
80 inh rti
81 inh rts
82 inh bgnd  ( S08 only)
83 inh swi
84 inh tap
85 inh tpa
86 stackop pul
87 stackop psh
( 88-8b also stack ops)
forth
8c inh _clrh  ( .h clr)
assembler
( 8d)
8e inh stop
8f inh wait

( 90-93 are bge/blt/bgt/ble)
94 inh txs
95 inh tsx
( 96)
97 inh tax
98 inh clc
99 inh sec
9a inh cli
9b inh sei
9c inh rsp  ( reset stack pointer to 00FF - for HC05 compat)
9d inh nop
( 9e - prebyte for SP indexing, and fancy indexed modes for S08 ld/st/cphx)
9f inh txa

( skip is lda imm, but without the immediate! It eats the following byte;
  good for skipping single-byte instructions under certain circumstances!
  And you have to be willing to sacrifice A. I could also define a skipx,
  but since we're using HX as the stack pointer, I bet its usefulness would
  be limited.)

0a6 inh skip


comment 1ops-and-2ops

  Addressing modes that actually address memory, rather than specify a
  register, are represented by the column number in the opcode - the high
  nybble.

  But not all modes that are allowed for 2ops are allowed for 1ops. So we
  have to check, convert it to the correct 1op column, and also dup it if
  necessary, so that after compiling the opcode we still have a reference
  to the address mode, so we can compile the correct bits - immediate or
  offset value - after it!

  Laying it all out in a jump table makes it more obvious what is going
  on.

  The valid 1op memory addressing modes - dir, ix1, and ix - are shifted
  from their 2op counterparts by 8 columns. Since by default the
  assembler's "addressing operators" - such as # and ) - generate column
  values for 2ops, we need to convert those valid modes to 1op modes, but
  also preserve the 2op mode for ea, so it can compile any immediate data
  or offset.

1ops-and-2ops

forth
: op,  dup u8? if b, ^ then  w, ;  ( output op, including pre-byte)
: ea,  ( n ea)  ( immed value or offset is underneath ea)
   imm col>  jump
   (  a0   b0   c0   d0   e0   f0
     imm  dir  ext  ix2  ix1   ix)
      b,   b,   w,   w,   b,  drop   ;

( Convert 2op to 1op and output op and ea.)
: cv,  ( op)  dup  80 - op,  ea, ;

: 1op  constant does> @  ( ea op)  or  dup  \a .a col>  jump
   ( 40   50   60   70   80   90   a0   b0   c0   d0   e0   f0
     .a   .x   .h   --   --   --  imm  dir  ext  ix2  ix1   ix)
    op,  op,  ill  ill  ill  ill  ill  cv,  ill  ill  cv,  cv,   ;

assembler
00 1op neg
forth
01 1op _cbeq  ( we handle .a imm and .x imm specially)
assembler
( 02 - mul, div, nsa, daa)
  42 inh mul
  52 inh div
  62 inh nsa  ( nybble swap accum)
  72 inh daa  ( decimal adjust accum)
03 1op com
04 1op lsr
( 05 - sthx, ldhx, cphx)
06 1op ror
07 1op asr
08 1op lsl
09 1op rol
0a 1op dec
0b 1op decz?  ( renamed from dbnz; works better with if/while/until)
0c 1op inc
0d 1op tst
( 0e - mov)
forth
0f 1op _clr  ( so we can deal with .h clr special case)
assembler


( 1ops with special cases.)

( cbeq is a funny instruction. It's encoded _mostly_ like a 1op, except
  that the cbeqa and cbeqx [inherent] variants are actually _immediate_
  instructions. Also, the ix and ix1 variants are _post-increment_. To make
  things still crazier, it is a conditional _branch_ instruction, and like
  all conditional branches we have to rename it, changing the sense of its
  condition, to work better with if/while/until.

  So we rename it in the following way:

     cbeq  -> <ea> cmpne?    -- <ea> one of: dir, ix1, ix, sp1
     cbeqa -> xx # cmpne?    -- immediate A
     cbeqx -> xx # cpxne?    -- immediate X, analogous to cmp/cpx

  We handle the immediate versions specially and then hand off to the 1op
  _cbeq to handle the other addressing modes.)

: cmpne?  ( cbeq, cbeqa)
   dup imm = if  drop  41 b, b, ^ then
   _cbeq ;

: cpxne?  ( cbeqx)
   dup imm = if  drop  51 b, b, ^ then
   ill ;

: clr  dup \a .h = if  drop _clrh ^ then  _clr ;

: ldhx   dup imm = if  drop  45 b, w, ^ then
         dup dir = if  drop  55 b, b, ^ then
         dup ext = if  drop  32 b, w, ^ then     ( S08 only)
         dup ix  = if 2drop  9eae w, ^ then      ( S08 only)
         dup ix1 = if  drop  9ece w, b, ^ then   ( S08 only)
         dup ix2 = if  drop  9ebe w, w, ^ then   ( S08 only)
         dup sp1 = if  drop  9efe w, b, ^ then   ( S08 only)
         ill ;

: sthx   dup dir = if  drop  35 b, b, ^ then
         dup ext = if  drop  96 b, w, ^ then     ( S08 only)
         dup sp1 = if  drop  9eff w, b, ^ then   ( S08 only)
         ill ;

: cphx   dup imm = if  drop  65 b, w, ^ then
         dup dir = if  drop  75 b, b, ^ then
         dup ext = if  drop  3e b, w, ^ then     ( S08 only)
         dup sp1 = if  drop  9ef3 w, b, ^ then   ( S08 only)
         ill ;

forth
: 2op  constant does> @  ( ea op)  or  dup op,  ea, ;
assembler
00 2op sub
01 2op cmp
02 2op sbc
03 2op cpx
04 2op and
05 2op bit
06 2op lda
07 2op sta  ( imm is ais)
08 2op eor
09 2op adc
0a 2op ora
0b 2op add
0c 2op jmp  ( no imm, no sp1 or sp2)  ( XXX check jmp & jsr for illegal ,s)
0d 2op jsr  ( bsr is imm, no sp1 or sp2)
0e 2op ldx
0f 2op stx  ( imm is aix)

forth
: ?imm  ( ea - imm)  dup imm = if ^ then  ill ;

assembler
: ais  ( n imm )  ?imm  \a sta ;
: aix  ( n imm )  ?imm  \a stx ;

( Instructions that break the nice patterns in the opcode map.)
: mov  ( n src m dest)  swap push ( n src dest; R: m)
   over dir = if  ( src is dir)
      dup dir = if  ( dest is dir)
         2drop ( src dest)  4e b,  b, ( src)  pop b, ( dest) ^ then
      ix = if  ( dest is ix+)
         drop ( src)  5e b,  b, ( src)  pop drop  ^ then  ill then
   dir = if ( dest is dir)
      dup imm = if  ( src is imm)
         drop ( src)  6e b,  b, ( imm)  pop b,  ( dest) ^ then
      ix = if  ( src is ix+)
         drop ( n)  7e b,  pop b, ( dest)  ^ then  then  ill ;

forth
( XXX - these take a dir address, but don't expect the dir col on the
  stack. Is this wrong?)

: bit  constant does> @  ( dir bit op)
   swap 2* or  b, ( p)  dup u8? if  b, ( dir)  ^ then
   error" address not in zero page" ;

( Note: These are _hex_ instruction values! The sets are even;
  the clrs are odd.)

assembler
10 bit bset  ( XXX: all these bitops should _require_ a dir parameter)
11 bit bclr

( Note: these two are _branches_; they compile their opcode and
  memory address but not the branch offset. if, while, or until finishes.
  Also, because we are using these with control structure words, their
  senses have to be complemented.)

01 bit bset?  ( renamed! these need to make sense with if/while/until)
00 bit bclr?

forth
comment
==========================================================================
Discursus on condition codes, conditional branches, and control structures

In many traditional computer architectures, the condition codes are in a
status register, and there are usually four of them: N V C Z. That's
Negative, oVerflow, Carry, and Zero.

How are these used and what do they mean?

First, let's define how condition code flags represent the results of a
signed subtract (or compare). If we execute X - Y, where both are _signed_
values, then the N (negative), V (overflow) and Z (zero) bits are set as
follows:

Let S = N xor V. Then

  (LT)  X < Y  ==   S
  (GE)  X >= Y ==  !S
  (GT)  X > Y  ==  !S and !Z
               == !(S or   Z)  (deMorgan's law)
  (LE)  X <= Y ==   S or   Z

I've written on the left the traditional "conditional branch" names for
each relation.

So, what happens when we subtract or compare _unsigned_ values? Before
discussing that we have to understand what the carry bit represents.  Since
the natural way of doing subtraction to _add_ the two's complement of the
subtrahend - ie:

  X - Y == X + (-Y)

and since two's complement is the one's complement plus one:

  -Y == ~Y + 1

we can write subtract as

  X - Y == X + ~Y + 1

and subtract with a _borrow_ as

  X - Y - 1 == X + ~Y

Note something odd here: the carry in is complemented: we carry in a one
when there is no borrow and carry in a zero when there _is_ a borrow. So,
carry = ~borrow. I call this a "natural" borrow.

There are only two architectures that I know of that represent borrow this
way: ARM and 6502. All others use a "synthetic" borrow, where carry =
borrow. Since the HC08 is one of these latter, in the following we'll
understand C = 1 to mean borrow, and C = 0 to mean no borrow.

So let's define how X - Y affects the condition codes, if X and Y are
_unsigned_.

  (LO)  X < Y   ==   C
  (HS)  X >= Y  ==  !C
  (HI)  X > Y   ==  !C and !Z
                == !(C or   Z)   (deMorgan's law)
  (LS)  X <= Y  ==   C or   Z

Again I've written traditional conditional branch names for these
conditions. LO == lower; HS == higher or same; HI == higher; LS == lower or
same.

I define Forth words to represent each condition. Those words actually
compile the opcode, and the following "if" or "until" leaves room for the
offset, which is fixed up later. I did it this way because the brset and
brclr instructions (branch if bit set or clear, resp.) are also conditional
branches, but their code takes up two bytes: an opcode and direct memory
address. So having conditionals simply leave the value of a branch
instruction on the stack wouldn't work.
==========================================================================

( 2cond defines both a condition and its complement.)
: 2cond  ( op)  dup 1 xor ( complement condition)  inh  inh ;
assembler
22 2cond u>  u<=  ( bhi bls  - unsigned higher - C or Z clear/set)
25 2cond u<  u>=  ( blo bhs  - unsigned lower)
25 2cond CS  CC   ( bcs bcc  - C set/clear)
27 2cond 0=  0!=  ( beq bne  - Z set/clear)
2b 2cond 0<  0>=  ( bmi bpl  - N set/clear)
91 2cond <   >=   ( blt bge  - N xor V set/clear)
92 2cond >   <=   ( bgt ble  - Z or [N xor V] clear/set)
( The next few are for testing status bits and IRQ pin.)
29 2cond HCS HCC  ( bhcs bhcc  - HC set - half carry )
2d 2cond MS  MC   ( bms  bmc   - I set - interrupt mask)
2f 2cond IH  IL   ( bih  bil   - irq pin high)

( Control structures.)

( Branch offsets are relative to the _following_ instruction, which starts
  right after the offset, which is always the last byte. When compiled,
  branches leave a fixup offset pointing just _past_ the byte to be fixed
  up.)

assembler
: >resolve  ( src dest)
   over -  dup s8? not if . error" relative branch out of range" then
   swap 1-  image-c! ;

( XXX should compile a long branch if necessary; in case of conditionals,
  compile a short branch with the inverse condition _over_ the long branch
  backward.)

: <resolve  ( dest src)  swap  \a >resolve ;

: if      ( - src)  0 b, ( offset)  \m here ;
: then    ( src)  \m here  \a >resolve ;
: else    ( src1 - src2)  20 b, ( bra)  \a if  swap  \a then ;

: begin   ( - dest)       \m here ;
: until   ( bit dest)                   \a if  \a <resolve ;
: again   ( dest)         20 b, ( bra)  \a until ;
: while   ( bit dest - src dest)     \a if  swap ;
: repeat  ( src dest)                \a again  \a then ;

( Special case: short branch to subroutine; looks just like a short branch.)
( XXX DEPRECATED bsr should be replaced by j )
: bsr  ( dest)  0ad b, ( bsr)  \a until ;

( Smart jump and call.)
forth
: rel8?  ( dest - offset flag)
   \m here 2 + ( just past 2 byte branch)  -  dup s8? ;

: rel,  ( dest offset op)  b, b, drop ;

assembler
: j  ( dest)  ( compile a jump as efficiently as possible)
   dup rel8? if   20 ( bra)  rel, ^  then  drop  \a ) \a jmp ;

: c  ( dest)  ( compile a call as efficiently as possible)
   dup rel8? if  0ad ( bsr)  rel, ^  then  drop  \a ) \a jsr ;

forth
