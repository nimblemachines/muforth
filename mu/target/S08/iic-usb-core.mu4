( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading IIC over USB (core)

__meta

hex

( Support for chatting with slave devices over IIC, using my JS16 as a
  USB-based IIC master. This code exports very low-level aspects of the
  communication, allowing the host to script sending and receiving of bits
  and bytes with a lot of control. It's very inefficient, though. It's
  intended for experimentation.)


.ifndef S08JS
   z" This code will currently only work on an S08JS device."  abort
.then

( Because we want to be independent of the USB byteloader code, we have to
  re-implement a lot of that code: the command dispatch table, and the
  basic handling of SETUP, IN, and OUT tokens. But code to enumerate the
  device, and the device descriptors, are *not* repeated here. We only
  implement the "vendor specific" requests required to do BDM.)

10 constant buflen0  ( buffer length, and hence max packet size, for endpoint 0)

1860 equ 'usb            ( USB RAM origin; buffer descriptors live here)
1880 equ 'usb-buffers    ( endpoint RAM from here to 195f)

__host

: >bufaddr  ( buffer - bufaddr)
   dup 0f and if  error" endpoint buffer must be on a 16-byte boundary"  then
   \eq 'usb -  2 >> ;

__meta

( Buffer descriptor control byte to match _any_ SETUP transaction, or an IN
  or OUT transaction with a DATA1 packet.)
0c8 equ match-data1

( USB buffer descriptors)
1860 equ in-control
1861 equ in-count
1862 equ in-bufaddr
1863 equ out-control
1864 equ out-count
1865 equ out-bufaddr

'usb-buffers            equ in-buffer
'usb-buffers buflen0 +  equ out-buffer

( Useful aliases for buffer addresses - for control requests.)
out-buffer 0 + equ bmRequestType
out-buffer 1 + equ bRequest
out-buffer 2 + equ wValue
out-buffer 3 + equ wValueHi
out-buffer 4 + equ wIndex
out-buffer 5 + equ wIndexHi
out-buffer 6 + equ wLength
out-buffer 7 + equ wLengthHi

( Create a forward jump at the start of the flash sector.)
forward-jmp iic-loop


( Port pins.)

( SCL is connected to PTA7/TxD, pin 20.
  SDA is connected to PTA6/RxD, pin 19.

  Neither pin is ever driven high. They are either driven low, or
  tri-stated. So we can set the value to 0, and use the direction bits as
  drive or not. Note that a DD bit of 1 drives low, and 0 lets line float
  high. So for sending a byte of data, we want to complement it.)

label init-pins
   .a clr  PTAD ) sta  PTADD ) sta  ( set value and drive to 0)
   0c0 # lda  PTADS ) sta  ( set high drive on the pins)  rts  ;c

( The building blocks.)
label half-cycle-delay
   here 2 + c  ( fall thru)

.ifdef 400k-iic  1 .else  ( 100k)  #11  .then   constant delay-count

label quarter-cycle-delay
   delay-count # ldx
   begin  .x decz? until  rts  ;c

( Since the slave can hold SCL low to give it more processing time, we need
  to be careful when letting SCL go high. We should only start our delay
  after it has risen.)

label c-rising
   PTADD 7 bclr   begin  PTAD 7 bset? until  rts  ;c  ( clobbers C)

( Now for some spiffy macros that let us define the bit send and receive
  words so that they look like timing diagrams!)

macro Q   quarter-cycle-delay c  ;m
macro H   half-cycle-delay c     ;m

macro D/  PTADD 6 bclr   ;m
macro D\  PTADD 6 bset   ;m
macro C/  c-rising c     ;m
macro C\  PTADD 7 bset   ;m

label drive-d  ( drive value of C onto bus)
   CS if  D/  rts  then
          D\  rts  ;c

macro D@  PTAD 6 bset? if then  ( sets C with pin value!)  ;m
macro D!  drive-d c    ;m

label stop-bit      Q  D\  Q  C/     H      D/   rts  ( line now idle)  ;c
label send-bit      Q  D!  Q  C/     H      C\   rts  ;c
label recv-bit      Q  D/  Q  C/  Q  D@  Q  C\   rts  ;c
label restart-bit   Q  D/  Q  C/                 ( fall thru)
label start-bit                      H      D\    H    C\  rts  ;c


( XXX no-ops - but could set a count register for the bit delays.)
label SlowClock
label FastClock
      rts  ;c

label iic-write-commands  ( all are control writes)
   ( 32) start-bit    .a dec  0!=  until
   ( 33) restart-bit  .a dec  0!=  until
   ( 34) stop-bit     .a dec  0!=  until

   ( 35) SlowClock ( 100k)  .a dec  0!= until
   ( 36) FastClock ( 400k)  .a dec  0!= until

   ( unknown, fall thru)

label stall
   EPCTL0 1 bset ( STALL)  rts  ;c

label read-one-byte
   1 # lda
   ( fall thru)

( Enter with in-count in A)
label prepare-in
   in-count ) sta
   match-data1 # lda  in-control ) sta
   ( fall thru)

( Get ready to receive another SETUP token.)
label expect-setup-token  ( expect OUT or SETUP, really)
   match-data1 # lda  out-control ) sta
   buflen0 # lda  out-count ) sta
   CTL 5 bclr ( TSUSPEND off - resume processing)
   rts  ;c

( Prepare to return status - a zero-length IN transaction. Also be ready to
  accept another SETUP even if it would mean abandoning the current
  transfer. This is what the USB spec says we have to do.)

label finish-control-write
   ( Setup IN status stage)
   .a clr  ( zero-length DATA1 transaction)
   prepare-in j  ;c

( Byte to send in wValue. Send MSB first. Return ACK bit in IN buffer.)
label send-byte
   8 # lda  .a psh  wValue ) lda
   begin  .a rol  send-bit c  0 ,s decz? until  .a pul
   recv-bit c  .a clr  .a rol ( ACK into LSB)  in-buffer ) sta
   read-one-byte j  ;c

( Read byte from slave into IN buffer; use wValue - lsb - as ACK value.)
label recv-byte
   8 # lda  .a psh
   begin  recv-bit c  .a rol  0 ,s decz? until  in-buffer ) sta
   .a pul  wValue ) lda  .a ror ( LSB -> C)  send-bit c
   read-one-byte j  ;c

( Return NAK on IN.)
label nak-in
   .a clr  in-control ) sta  rts  ;c

label setup-token
   nak-in c

( assume vendor request)
   bRequest ) lda
   30 # sub   ( BDM commands start at 20 hex; anything below that, we exit)
   u< if  ( 00 - 2f Bye)  2 # ais  ( skip return from process-usb)  rts  then

   ( Control reads)
   ( 30) recv-byte          0!=  until
   ( 31) send-byte  .a dec  0!=  until

   iic-write-commands c  ( these are all control writes, so ...)
   finish-control-write j  ;c

label setup-or-out-token
   out-control ) lda  3c # and  34 # cmpne?  setup-token  until

   ( OUT token)
   ( We're not using data buffers, so any OUTs are status transactions for
     control reads. The only thing to do is to get ready for a new SETUP.) 
   expect-setup-token j  ;c

( An IN token is either part of a data stage of a control read, or it is
  the status stage of a control write. Status IN's are always zero bytes
  long. In this case, we only ever read one buffer, so simply get ready for
  another SETUP.)

label in-token
   ( fall thru)

label nak-in-expect-setup
   nak-in c  ( further IN's will return NAK)
   expect-setup-token j  ;c

( XXX To convert process-usb into an interrupt handler, jumps to
  setup-or-out-token, in-token, and nak-in-expect-setup should really be
  _calls_; we should handle all the flags that are set all at once, rather
  than only one per call. Also, interrupt flags - like TOKDNEF and STALLF -
  should be cleared after being handled.)

label process-usb
   INTSTAT 3 bset? if ( TOKDNEF)
      STAT ) lda  INTSTAT 3 bset  ( ack TOKDNEF)
      0f8 # and  setup-or-out-token 0!= until
       08 # cmpne?  in-token  until
      ( not EP0; ignore)  ( fall thru)
   then
   INTSTAT 7 bset? if ( STALLF)
      EPCTL0 1 bclr ( remove EPSTALL)
      INTSTAT 7 bset  ( ack STALL)
      nak-in-expect-setup j  ( get ready to receive SETUP)
   then
   rts  ;c

\m iic-loop resolve>>  ( jump at start of Flash points here)
label main-loop
   init-pins c    ( setup IIC bitbang interface)
   finish-control-write c  ( ready status IN; also prepare for SETUP)
   begin  process-usb c  again  ;c
