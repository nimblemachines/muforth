( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading S08 Forth kernel (threaded)

__meta

target

( Fundamentals of threading.)

macro inc-ip  ip ) ldhx  2 # aix  ;m  ( IP is _pre_incremented!!)

code lit
   inc-ip
   ip ) sthx
   0 ,x ldhx  pshhx  ( fall thru)  ;c

label _next
   inc-ip
label next-ip
   ip ) sthx
   0 ,x ldhx  0 ,x jmp  ;c

label nest
   rp ) ldhx  ( post-decrement)
   ip    ) lda ( hi)  0 ,x sta
   ip 1+ ) lda ( lo)  1 ,x sta
   -2 # aix  rp ) sthx
   pulhx  ( new IP on D stack)  next-ip j  ;c

code branch
   ip ) ldhx
   2 ,x ldhx  next-ip j  ;c

code unnest ( aka ^ aka exit)
   rp ) ldhx  2 # aix  rp ) sthx  ( pre-increment)
   0 ,x ldhx  next-ip j  ;c

macro next  _next j  ;m


ram

( Trampoline for running code.)
label run-forth
   tsx  s0 ) sthx  ( save caller's SP; this will get us back to chat)
   sp ) ldhx  txs  ( host has set this)  next  ;c

code chat  ( return to chatting with target)
   tsx  sp ) sthx  ( capture current SP)
   s0 ) ldhx  txs  ( restore saved SP)  rts  ;c

flash


( Stack ops.)
macro _drop  2 # ais  ;m

code dup  ( a - a a)
   tsx
   tl lda  .a psh  th lda
label apush
           .a psh  next  ;c

code over  ( a b - a b a)
   tsx
   sh lda  .a psh  sl lda  apush j  ;c

code nip  ( a b - b)
   tsx
   .a pul  sh sta  .a pul  sl sta  ( top -> sec)  next  ;c

code drop
   _drop  next  ;c

code swap  ( a b - b a)
   tsx
   th lda  .a psh  sh lda  th sta  .a pul  sh sta
   tl lda  .a psh  sl lda  tl sta  .a pul  sl sta  next  ;c

( Return stack ops.)
code >r
   rp ) ldhx
   .a pul ( hi)  0 ,x sta  .a pul ( lo)  1 ,x sta
   -2 # aix  rp ) sthx  next  ;c

code r@
   rp ) ldhx  2 # aix  ( empty descending)
label r_
   1 ,x lda  .a psh  0 ,x lda  apush j  ;c

code r>
   rp ) ldhx  2 # aix  rp ) sthx  r_ j  ;c

( Memory access.)
code c@  ( a - byte)                          ( XXX apush j ??)
   pulhx  0 ,x lda  .a psh ( lo)    .a clr  .a psh ( hi)  next  ;c

code @  ( a - word)
   pulhx  1 ,x lda  .a psh ( lo)  0 ,x lda  .a psh ( hi)  next  ;c

code c!  ( byte a)
   pulhx  .a pul ( hi)            .a pul ( lo)  0 ,x sta  next  ;c

code !  ( word a)
   pulhx  .a pul ( hi)  0 ,x sta  .a pul ( lo)  1 ,x sta  next  ;c

( Unary operations.)
code invert
   tsx
   tl com  th com  next  ;c

code negate
   tsx
   tl neg  begin  .a clr  th sbc  th sta  next  ;c

code dnegate
   tsx
   sl neg         .a clr  sh sbc  sh sta
                  .a clr  tl sbc  tl sta  again  ;c

( Binary ops.)

( XXX - consider little-endian data stack; then I can .a pul as I go.)
code +
   tsx
   tl lda  sl add  sl sta
   th lda  sh adc  sh sta
   ' drop j  ;c

( XXX Can't do nifty hack of "negate +" as efficiently in threaded land, so
  let's define "-" as well as "+".)

code -
   tsx
   sl lda  tl sub  sl sta
   sh lda  th sbc  sh sta
   ' drop j  ;c

code and
   tsx
   .a pul  sh and  sh sta
   .a pul  sl and  sl sta
   next  ;c

code or
   tsx
   .a pul  sh ora  sh sta
   .a pul  sl ora  sl sta
   next  ;c

code xor
   tsx
   .a pul  sh eor  sh sta
   .a pul  sl eor  sl sta
   next  ;c

( Basic double-length - 32-bit - support.)

( XXX - consider little-endian data stack; then I can .a pul as I go.)
code d+
   tsx
   dt0 lda  ds0 add  ds0 sta
   dt1 lda  ds1 adc  ds1 sta
   dt2 lda  ds2 adc  ds2 sta
   dt3 lda  ds3 adc  ds3 sta
   4 # ais  next  ;c

( Flags and tests.)
( XXX if makeflag always pushed one byte, the other words could .a pul one
  of their bytes.. and u< and < could do 3 # ais instead of 2.)

code 0=
   tsx
   tl lda  th ora  1 # sub ( Z -> C)  ( fall thru)

label makeflag  ( C -> -1, NC -> 0)
   .a clr  0 # sbc  tl sta  th sta  next  ;c

code 0<
   tsx
   th lsl ( N -> C)  makeflag j  ;c

label compare  ( subtract top from second, but don't save the result)
   sl lda  tl sub  sh lda  th sbc  rts  ;c

code u<
   tsx
   compare c  2 # ais  makeflag j  ;c

code <
   tsx
   compare c  2 # ais  < if  sec  makeflag j  ( true)  then
                             clc  makeflag j  ( false)  ;c

( Shifts.)
code 2*
   tsx
   tl lsl  th rol  next  ;c

code 2/
   tsx
   th asr  tl ror  next  ;c

code u2/
   tsx
   th lsr  tl ror  next  ;c


( do, loop, +loop)

( do/loop stack frame on R:
  
     |       |       |
     +-------+-------+
  4  |  ixh  |  ixl  |  5   index == start-limit to 0
     +-------+-------+
  2  |  lih  |  lil  |  3   limit
     +-------+-------+
  0  |     empty     |  1
     +-------+-------+  <---- RP
)

( XXX Another word that would benefit from little-endian data stack!)
code (do)   ( limit start)
   rp ) ldhx  -4 # aix  rp ) sthx
     .a pul             0 ,x sta  ( save start_hi)
     .a pul   1 ,s sub  5 ,x sta  ( index_lo = start_lo - limit_lo)
     .a pul             2 ,x sta  ( limit_hi)
   0 ,x lda   2 ,x sbc  4 ,x sta  ( index_hi = start_hi - limit_hi)
     .a pul             3 ,x sta  ( limit_lo)  next  ;c

code i
   ( Push index + limit of inner do loop.)
   rp ) ldhx
   3 ,x lda  5 ,x add  .a psh  2 ,x lda  4 ,x adc  apush j  ;c

code j
   ( Push index + limit of second enclosing do loop.)
   7 ,x lda  9 ,x add  .a psh  6 ,x lda  8 ,x adc  apush j  ;c

( XXX little-endian data stack FTW!!)
code (+loop)  ( incr)
   ( Add incr to index; if sign changes, we've crossed threshold)
   rp ) ldhx
     .a pul ( hi)  0 ,x sta
     .a pul ( lo)  5 ,x add  5 ,x sta
   0 ,x lda ( hi)  4 ,x adc  4 ,x sta
   0 ,x eor  0< if  4 # aix
label skip-branch
      rp ) sthx  ( de-allocate loop frame)
      ip ) ldhx  4 # aix  next-ip j  then  ( skip branch; do next)
                         ' branch j        ( otherwise, branch)  ;c

code (loop)
   ( Add one to index; if sign changes, we've crossed threshold)
   1 # lda .a psh  .a clr  .a psh ( push constant 1)
   ' (+loop) j  ;c

( for, next)
-- code (for)  ( this is just >r, right?)

code (next)
   ( Decrement count on R stack.)
   rp ) ldhx
   3 ,x lda  1 # sub  3 ,x sta
   2 ,x lda  0 # sbc  2 ,x sta
   3 ,x ora  1 # sub ( Z -> C)
   CS if  2 # aix  skip-branch j  then
                      ' branch j  ;c


decimal

( Correct version)
code um*  ( umer umcand - uprodlo uprodhi)
   ( Move multiplicand to S and zero accumulator)
   16 # lda ( loop count)  .a psh
   tl lda  .a psh  th lda  .a psh  tl clr  th clr
   sl lda ( multiplier)
   begin
      .a lsr ( lo bit into C)  .a clr
      CS if  1 ,s lda ( mcand lo)        tl add ( accum lo)  tl sta
             0 ,s lda ( mcand hi)  then  th adc ( accum hi)

      ( Now shift right, carry, accum, and mer, high to low)
      .a ror  th sta  tl ror  sh ror  sl lda  .a ror  sl sta
   2 ,s decz? until  3 # ais  rts  ;c

( Also correct!)
code um*2  ( umer umcand - uprodlo uprodhi)
   ( Move multiplicand to S and zero accumulator)
   17 # lda ( loop count)  .a psh
   tl lda  .a psh  th lda  .a psh  tl clr  th clr
   begin
      sh ror  sl ror ( rotate mer right 1 bit into C)
   2 ,s decz? if  3 # ais  rts  then
      .a clr
      CS if  1 ,s lda ( mcand lo)        tl add ( accum lo)  tl sta
             0 ,s lda ( mcand hi)  then  th adc ( accum hi)

      ( Now shift carry & accum right 1 bit, high to low)
      .a ror  th sta  tl ror
   again  ;c

( Works, and only takes one jump per loop instead of two.)
code um*3  ( umer umcand - uprodlo uprodhi)
   ( Move multiplicand to S and zero accumulator)
   17 # lda ( loop count)  .a psh
   tl lda  .a psh  th lda  .a psh  tl clr  th clr
forward-jmp prime-pump
   begin
      .a clr
      CS if  1 ,s lda ( mcand lo)        tl add ( accum lo)  tl sta
             0 ,s lda ( mcand hi)  then  th adc ( accum hi)

      ( Now shift carry & accum right 1 bit, high to low)
      .a ror  th sta  tl ror
prime-pump resolve>>
      sh ror  sl ror ( rotate mer right 1 bit into C)
   2 ,s decz? until  3 # ais  rts  ;c

( What about using the chip? The above routines clock in at about 760~!
  Ouch. How fast can we go using the chip's 8x8 multiply?

  Unfortunately it uses the X register, so we can't do this on the X stack.
  We have to move everything to S or zram, do the multiply, and then move
  back. Even so, can it be worse that the - arguably simple and elegant -
  loop above?

  Stack layout:)

macro s_sl   8 ,s  ;m -- sl
macro s_sh   7 ,s  ;m -- sh
macro s_tl   6 ,s  ;m -- tl
macro s_th   5 ,s  ;m -- th
macro s_p0   4 ,s  ;m -- prod0 - lsb
macro s_p1   3 ,s  ;m -- prod1
macro s_p2   2 ,s  ;m -- prod2
macro s_p3   1 ,s  ;m -- prod3 - msb
        --   0 ,s  ;m -- saved X

code um*4  ( umer umcand - uprodlo uprodhi)
   ( Move everything to S)
   sl lda  .a psh  sh lda  .a psh  tl lda  .a psh  th lda  .a psh
   ( Room for result - on S)  -4 # ais
   ( We need it for mul, so push X)  .x psh
             s_sh ldx  mul ( th*sh)  s_p2 sta  s_p3 stx
   s_tl lda  s_sl ldx  mul ( tl*sl)  s_p0 sta  s_p1 stx
   s_tl lda  s_sh ldx  mul ( tl*sh)
   s_p1 add  s_p1 sta  txa  s_p2 adc  s_p2 sta  CS if  s_p3 inc  then
   s_th lda  s_sl ldx  mul ( th*sl)
   s_p1 add  s_p1 sta  txa  s_p2 adc  s_p2 sta
                               .x pul  .a pul ( s_p3)  0 # adc
   ( Move result back to X stack)
   th sta  .a pul  tl sta  .a pul  sh sta  .a pul  sl sta
   4 # ais  rts  ;c

( Another version using mov ,x+ to move values between X stack and zram
  scratch space. For every ",s" in the above code we save a byte and a
  cycle by switching to zram - direct - accesses.

  Scratch space layout - low to high memory, unlike stack picture above:)

1 zvar x_p3   -- prod3 - msb
1 zvar x_p2   -- prod2
1 zvar x_p1   -- prod1
1 zvar x_p0   -- prod0 - lsb
1 zvar x_th   -- th
1 zvar x_tl   -- tl
1 zvar x_sh   -- sh
1 zvar x_sl   -- sl

code um*5  ( umer umcand - uprodlo uprodhi)
   ( Move everything to zpage and push X)
   #scratch # aix  ( so HX points _at_ th)
   ( We need it for mul, so push X - when it points to tl)
   0 ,x  x_th ) mov  .x psh  0 ,x  x_tl ) mov
   0 ,x  x_sh ) mov          0 ,x  x_sl ) mov

   x_th ) lda  x_sh ) ldx  mul ( th*sh)  x_p2 ) sta  x_p3 ) stx
   x_tl ) lda  x_sl ) ldx  mul ( tl*sl)  x_p0 ) sta  x_p1 ) stx
   x_tl ) lda  x_sh ) ldx  mul ( tl*sh)
   x_p1 ) add  x_p1 ) sta  txa  x_p2 ) adc  x_p2 ) sta  CS if  x_p3 ) inc  then
   x_th ) lda  x_sl ) ldx  mul ( th*sl)
   x_p1 ) add  x_p1 ) sta  txa  x_p2 ) adc  x_p2 ) sta  x_p3 ) lda  0 # adc

   ( Move result back to X stack)
   .x pul  ( points to tl)
   x_p2 ) 0 ,x mov  x_p1 ) 0 ,x mov  x_p0 ) 0 ,x mov
   #scratch 4 + negate # aix  th sta  rts  ;c

( "Short" multiply: 16x16->16. Much faster and still useful.)
code *
   ( Move everything to zpage and push X)
   #scratch # aix  ( so HX points _at_ th)
   ( We need it for mul, so push X - when it points to sl)
   0 ,x  x_th ) mov          0 ,x  x_tl ) mov
   0 ,x  x_sh ) mov  .x psh  0 ,x  x_sl ) mov

   x_tl ) lda  x_sl ) ldx  mul ( tl*sl)  x_p0 ) sta  x_p1 ) stx
   x_tl ) lda  x_sh ) ldx  mul ( tl*sh)  x_p1 ) add  x_p1 ) sta
   x_th ) lda  x_sl ) ldx  mul ( th*sl)  x_p1 ) add

   ( Move result back to X stack)
   .x pul  ( points to sl)  x_p0 ) 0 ,x mov
   #scratch 2 + negate # aix  th sta  rts  ;c


( Now, to tackle _divide_.)

( First, the bit-by-bit shift-and-subtract method.

  This is essentially the reverse of the multipy's add-and-shift - as you
  would expect. However, with multiply we get lucky: for every one bit in
  the multiplier, we add the multiplicand into an accumulator, and then
  immediately shift both the accumulator and the multiplier together, one
  bit to the right. Our add produces 17-bits but we immediately shift the
  generated carry in at the left, so we don't have to save it.

  With divide we don't get so lucky. We first shift _left_, creating a
  17-bit value - including the carry bit. We then test to see if
  subtracting the divisor causes underflow; if it does _not_, we actually
  do the subtract, put a 1 into the space that shifting created [in the
  lowest bit of the quotient] and then shift left again. The trouble is
  that we do the shift from low to high, generating a carry - which we have
  to save somewhere - and then do the compare, again starting with the less
  significant byte. So we con't optimise the way we can with multiply, and
  the code is clumsier than I would like.)

( NOTE 1: Unlike the published fig-FORTH code for u/, which calculates the
  division of a 31-bit unsigned dividend by a 16-bit unsigned divisor, I
  want to do a full 32-bit division. Leaving off that high-order bit allows
  an optimisation: they only have to subtract from 16 bits instead of 17,
  so things can be simpler.)

( NOTE 2: the order of the results is _opposite_ that of fig-FORTH and
  FORTH-83! I think I understand why they want to have the quotient on
  top - it's "more significant" - but in the shift-and-subtract method the
  quotient naturally ends up in the _lower_ half of the result.

  In the 6502 assembler source for fig-FORTH's u/ the high and low halves
  of the dividend are swapped before entering the loop. This is how they
  end up with quot and rem in the right order at the end.)

( Dividend is in sh:sl:s3:s2
  Divisor  is in th:tl)

code um/mod  ( ud u - uquot urem)
   16 # lda  .a psh ( loop count)
   begin
      ds2 lsl  ds3 rol  sl rol  sh rol  .a clr  .a rol ( C -> A)  .a psh ( save)
       sl lda   tl sub  sh lda  th sbc  .a pul  0 # sbc  ( compare)
      u>= if ( no borrow: do subtract, shift 1 bit into lsb)
        ds2 inc ( shift in 1)
         sl lda  tl sub  sl sta
         sh lda  th sbc  sh sta  then
   0 ,s decz? until  .a pul
   2 # aix  rts  ;c
