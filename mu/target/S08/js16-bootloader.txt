Notes on RAM memory usage.

80: flags: bit0 = set address pending
           bit3 = program command underway
81: ??
82-83: read pointer when returning descriptors
84: count of bytes to read
85: count of bytes read so far
86: byte offset into USB buffer (read & write)
87: command status byte

88-89: flash address pointer
8a-8b: last flash address pointer
8c: count of bytes to program

1860: ep0 IN buffer descriptor (3 bytes)
1860: ep0_IN_control
1861: ep0_IN_byte_count
1862: ep0_IN_buf_address

1863: ep0 OUT buffer descriptor (3 bytes)
1863: ep0_OUT_control
1864: ep0_OUT_byte_count
1865: ep0_OUT_buf_address

1880 - 18bf: ep0 IN buffer (64 bytes - but firmware only uses 32!)
18c0 - 1900: ep0 OUT buffer (64 bytes - but firmware only uses 32!)

1848: Undocumented flash register; used to differentiate between JS8 and JS16
      On my JS16, its value is 47h

The code!
2160 lda 1800		SRS
2163 and #80		POR
2165 bne 217d		if POR -> 217d (power on reset)
2167 lda 180f		if SIGNATURE = 0c3
216a cmp #c3
216c beq 219e		-> 219e
216e mov #04 40
2171 mov #40 41
2174 mov #01 44
2177 ldhx fffe		jump thru reset vector
217a jmp ,x
217b bra 217b
217d lda 1802		test BLMS pin
2180 and #04
2182 bne 219e
2184 lda ffba		load crc check flag
2187 beq 216e		if 00, jump to reset vector
2189 cmp #ff
218b bne 219e

218d lda #55		watchdog
218f sta 1800
2192 coma
2193 sta 1800

2196 jsr 2515
2199 jsr 247c		calc CRC - only feed dog once!
219c beq 216e

219e lda #55		watchdog
21a0 sta 1800
21a3 coma
21a4 sta 1800

21a7 lda #c3		set SIGNATURE to c3
21a9 sta 180f
21ac ldhx #027d		what lives between 27d and 280?
21af txs
21b0 sei
21b1 jsr 2524
21b4 clrh		HX = 000d
21b5 ldx #0d
21b7 clr 7f,x		clr 80 - 8c
21b9 dbnzx 21b7
21bb lda #4e
21bd sta 1820		FCDIV: set to 8 * 14 (24M/8/15 == 200k)
21c0 mov #80 50		USBCTL0: set USBRESET
21c3 lda #00
21c5 sta 1860
21c8 sta 1861
21cb lda #08
21cd sta 1862
21d0 lda #88
21d2 sta 1863
21d5 lda #20
21d7 sta 1864
21da lda #18
21dc sta 1865
21df mov #01 65		CTL: set USBEN
21e2 lda 1848		!! undocumented register 
21e5 and #44		USBPU or USBVREN
21e7 sta 50		USBCTL0
21e9 bset0 50		USBCTL0: set USBPHYEN

21eb lda #55		watchdog
21ed sta 1800
21f0 coma
21f1 sta 1800

21f4 brclr0 60 21eb	INTSTAT: wait till USBRSTF=1
21f7 mov #ff 62		ERRSTAT: clear all flags
21fa mov #bf 60		INTSTAT: clear all flags
21fd mov #bf 63		ERRENB: enable all error interrupts (?!)
2200 clr 61		INTENB: disable all interrupts sources (including ERROR!)
2202 clr 66		clr ADDR
2204 mov #0d 6d		EPCTL0: enable control endpt 0

Disable flash protection; see JS16 manual
2207 lda #55
2209 sta 180e		FPROTD
220c lda #aa
220e sta 180e
2211 lda #01
2213 sta 1824		FPROT: set FPDIS: disable flash protection!

USB-loop
2216 lda #55		watchdog
2218 sta 1800
221b coma
221c sta 1800

221f brclr3 60 2242	if TOKDNEF
2222 lda 64		STAT
2224 and #f8		ENDP or IN
2226 cbeqa #08 223d	endp0 in?
2229 bne 2240		not ep0? ack TOKDNEF and ignore

SETUP or OUT token on ep0
222b lda 1863		ep0 OUT control
222e and #3c		mask PID
2230 cmp #34		SETUP? (1101)
2232 bne 2238		no, must be OUT

process SETUP token
2234 bsr 224b
2236 bra 2240

process OUT token
2238 jsr 23bc
223b bra 2240

IN token on ep0
223d jsr 2387
2240 bset3 60		INTSTAT: ack TOKDNEF

skip here if TOKDNEF unset
2242 brclr7 60 2249	INTSTAT: if STALLF
2245 bclr1 6d		  EPCTL0: clear EPSTALL
2247 bset7 60		  INTSTAT: ack STALLF
2249 bra 2216		then; goto USB-loop

do SETUP token
224b lda 18c0		ep0 OUT buffer: bmRequestType
224e and #60		mask type bits
2250 cbeqa #00 2262	standard request
2253 cbeqa #40 22b1	vendor request

stall ep0
2256 bset1 6d		unimplemented: stall ep0
2258 lda #88
225a sta 1863		prepare for new SETUP token
225d clr 81		clear control transfer stage flags
225f jmp 2354

Process standard USB request
2262 lda 18c1		bRequest
2265 cbeqa #00 229d	get_status
2268 cbeqa #05 22ac	set_address
226b cbeqa #06 2273	get_descriptor
226e cbeqa #09 22ae	set_configuration
2271 bra 2256		unimplemented: STALL endpoint

get_descriptor
2273 lda 18c3		descriptor type:
2276 cbeqa #01 2281	device
2279 cbeqa #02 228c	configuration
227c cbeqa #03 2297	string
227f bra 2256		unimplemented: STALL

get device descriptor
2281 ldhx #2854		device descriptor
2284 sthx 82		source string ptr - for sending descriptors?
2286 mov #12 84		source string length
2289 jmp 2327

get configuration descriptor
228c ldhx #2866		configuration descriptor
228f sthx 82
2291 mov #19 84
2294 jmp 2327

get string descriptor
2297 jsr 241a
229a jmp 2334

get_status
229d clra
229e sta 1880		send two zeroes
22a1 sta 1881
22a4 lda #02
22a6 sta 1861		byte count for IN
22a9 jmp 2334

set_address
22ac bset0 80		flags: set address pending; can't actually do it until after
			the status stage of the control transfer!

set_configuration	no-op!
22ae jmp 233e

Process vendor (bootloader) request
22b1 lda 18c1		load bootloader command byte:
22b4 cbeqa #68 22c8	Reset
22b7 cbeqa #61 22e5	Program - start addr, end addr, length, data;
				01 = success; f4 = fail
22ba cbeqa #63 2302	Mass erase; 01 = success, f0 = fail
22bd cbeqa #64 2307	Partial (page-by-page) erase; 01 = success, f1 = fail
22c0 cbeqa #69 2316	CRC check; 01 = success, f5 = fail
22c3 cbeqa #6f 231b	Get result
22c6 bra 2256		unimplemented: STALL

reset command
22c8 clra
22c9 sta 180f		clear SIGNATURE semaphore
22cc sta 1861		zero length pkt -- status stage of control transfer
22cf lda #c8		OWN + DATA1 + DTS -- always DATA1
22d1 sta 1860		ep0 IN BD
22d4 bclr5 65		clr TSUSPEND - resume processing (SETUP token sets this)
22d6 clrh		clear 80 to 8c (inclusive)
22d7 ldx #0d
22d9 clr 7f,x
22db dbnzx 22d9
22dd lda 1860
22e0 bmi 22dd		wait till OWN=0 -- till IN packet sent
22e2 jmp 28a1		jmp to 8d instruction - illegal op - causes ILOP reset

program command
22e5 bset3 80		flags: bit3 is program command underway
22e7 lda 18c3		start_addr_hi
22ea sta 88
22ec lda 18c2		start_addr_lo
22ef sta 89
22f1 lda 18c5		end_addr_hi
22f4 sta 8a
22f6 lda 18c4		end_addr_lo
22f9 sta 8b
22fb lda 18c6		wLength_lo
22fe sta 8c
2300 bra 233e

mass erase command
2302 jsr 281a
2305 bra 233e

Partial (page-by-page) erase command
2307 lda ffbe		flash partial erase semaphore: program to 00 to enable
230a beq 2311		partial erase command in bootloader
230c mov #f1 87
230f bra 233e

do partial erase command
2311 jsr 27b1
2314 bra 233e

CRC check command
2316 jsr 24bd		calc crc, being careful about watchdog
2319 bra 233e

Get result command
231b lda 87		command status byte
231d sta 1880		0 IN buffer
2320 lda #01
2322 sta 1861		byte count: send one byte
2325 bra 2334

2327 lda 18c6		wLength_lo
232a cmp 84
232c bcc 2330		if wLength_lo u< count_to_send
232e sta 84		  use wLength_lo as count_to_send
2330 clr 85
2332 bsr 2361

finish control read request - setup IN (data stage)
2334 mov #01 81		control read
2337 lda #80		OWN - match DATA0 and DATA1 (DTS not set)
2339 sta 1863		ep0 OUT control
233c bra 234a

finish control write request - setup IN (status stage)
233e mov #02 81		control write
2341 clra
2342 sta 1861		ep0 IN count = 0 -- status return?
2345 lda #c8		OWN + DATA1 + DTS
2347 sta 1863		ep0 OUT BD

Prepare either first transaction of IN data stage, or IN status stage for a
control write. In both cases we want to send a DATA1 packet.
234a lda #c8		OWN + DATA1 + DTS
234c sta 1860		ep0 IN BD
234f lda #08
2351 sta 1862		ep0 IN buffer @ 1860 + 20 = 1880

reset OUT buffer address and count; resume processing of tokens
2354 lda #20
2356 sta 1864		ep0 OUT data len = 20
2359 lda #18
235b sta 1865		ep0 OUT buffer @ 1860 + 60 = 18c0
235e bclr5 65		clr TSUSPEND - resume processing (SETUP token sets this)
2360 rts

copy (part of) string into IN buffer
2361 clrh
2362 clr 86		byte offset into USB buffer
2364 lda 85		count of bytes sent so far
2366 cbeq 84 2381	number of bytes we need to send
2369 ldx 86
236b cbeqx #20 2381	buffer full? (32 bytes)
236e ldhx 82		flash read_addr
2370 lda ,x
2371 aix #01
2373 sthx 82		read from flash, incr ptr, save ptr
2375 clrh
2376 ldx 86
2378 sta 1880,x		store into IN buffer
237b inc 85		incr count of bytes sent
237d inc 86		incr IN buffer pointer
237f bra 2364
2381 lda 86		byte offset becomes...
2383 sta 1861		length to send
2386 rts

do IN token
2387 brclr0 80 2391	80 bit0: set_address pending
238a lda 18c2		wValue_lo
238d sta 66		set ADDR register!
238f bclr0 80		clear pending flag
2391 brclr0 81 23a8	81 bit0 is set for IN data stage
2394 bsr 2361		get next piece of string to return
2396 lda 1860
2399 bit #40		test for DATA0/1
239b bne 23a1
239d lda #c8		OWN + DATA1 + DTS
239f bra 23a3
23a1 lda #88		OWN + DATA0 + DTS
23a3 sta 1860		ep0 IN BD
23a6 bra 23aa

last IN was status stage
23a8 bsr 23ab
23aa rts

no more IN tokens expected
23ab clr 81		no IN data or status stage
23ad lda #20
23af sta 1864		ep0 OUT length = 20
23b2 lda #88		accept SETUP or OUT(DATA0): OWN + DATA0 + DTS
23b4 sta 1863		ep0 OUT BD
23b7 clra
23b8 sta 1860		IN will return NAK
23bb rts

do OUT token
23bc brclr1 81 2417	81 bit1 is set for IN status
23bf brclr3 80 2405	program command underway?
23c2 lda 1864		length received
23c5 cmp 8c		does it match count of bytes to program?
23c7 bne 2405
23c9 lda 1848		?? undocumented - diff between JS8 and JS16?
23cc and #03
23ce cbeqa #02 23eb	JS8
23d1 cbeqa #03 23db	JS16
23d4 mov #f2 87
23d7 bclr3 80		program command finished
23d9 bra 2405
23db ldhx 88
23dd cphx #c000
23e0 bcs 23f9
23e2 ldhx 8a		if last_addr u< c000 (8k)
23e4 cphx #c000
23e7 bcs 23f9			return f3
23e9 bra 2400
23eb ldhx 88
23ed cphx #e000
23f0 bcs 23f9
23f2 ldhx 8a		if last_addr u< e000 (8k)
23f4 cphx #e000
23f7 bcc 2400
23f9 mov #f3 87			return f3
23fc bclr3 80		program command finished
23fe bra 2405
2400 jsr 2759		flash buffer
2403 bclr3 80		program command finished
2405 lda 1863
2408 bit #40		data toggle bit (OUT)
240a bne 2410
240c lda #c8
240e bra 2412
2410 lda #88
2412 sta 1863
2415 bra 2419

2417 bsr 23ab
2419 rts

find string descriptor
241a lda 18c2		wValue_lo: string descriptor index
241d cbeqa #00 2426	descr 0: 09 04 (lang ids?)
2420 cbeqa #01 2432	descr 1: Freescale
2423 cbeqa #02 243e	descr 2: JS

(default to sending descr 0)
2426 ldhx #287f
2429 sthx 82
242b lda 287f
242e sta 84
2430 bra 2448

2432 ldhx #2883		string descriptor "Freescale"
2435 sthx 82
2437 lda 2883		descr length
243a sta 84
243c bra 2448

243e ldhx #2897		string desc "JS  "
2441 sthx 82
2443 lda 2897		length
2446 sta 84

return string descriptor
2448 lda 18c6		wLength_lo (request)
244b cmp 84		compare to read_count
244d bcc 2451		if wLength_lo u< count_to_send
244f sta 84		  use wLength_lo as count_to_send
2451 clr 85		count of bytes sent (total)
2453 jsr 2361
2456 lda 18c2
2459 cmp #02		Are we returning string descriptor 2?
245b bne 247b		no, done
245d lda 1848		yes, append 8 or 16 depending on chip!
2460 and #03
2462 cbeqa #02 246a	JS8
2465 cbeqa #03 2471	JS16
2468 bra 247b
246a lda #38		append '8'
246c sta 1886
246f bra 247b
2471 lda #31		append '1' and then
2473 sta 1886
2476 lda #36
2478 sta 1888		append '6'
247b rts

Calculate CRC and compare to value saved at ffb8/9; return 0 if matched, ff if
didn't. This version only feeds the dog between calc'ing the main body of the
flash and calc'ing the vectors. Is it unused?? No! Called from first 32 bytes
of ROM!

247c lda 1848		?? undocumented - diff between JS8 and JS16?
247f and #03
2481 cbeqa #03 248e	JS16
2484 cbeqa #02 2489	JS8
2487 bra 24b8
2489 ldhx #e400		start @e400 for 8k device (JS8)
248c bra 2491
248e ldhx #c400		start @c400 for 16k device (JS16)
2491 mov #8d 0c		seed CRC with 8d9d
2494 mov #9d 0d
2497 mov ,x+ 0d
2499 cphx #ffae		calc from start to ffad, inclusive
249c bne 2497

249e lda #55		watchdog
24a0 sta 1800
24a3 coma
24a4 sta 1800

24a7 ldhx #ffc0		also calc ffc0 - ffff inclusive
24aa mov ,x+ 0d
24ac cphx #0000
24af bne 24aa
24b1 ldhx 0c		load calc'ed crc
24b3 cphx ffb8		compare with saved crc
24b6 beq 24bb
24b8 lda #ff		return ff if not equal
24ba rts

24bb clra
24bc rts		return 0 if equal

Calculate CRC and compare to value saved at ffb8/9; if match, set 87 to 01; if
didn't match, set 87 to f5. Be careful to feed the dog after calc'ing each
byte of CRC.

24bd lda 1848		?? undocumented - diff between JS8 and JS16?
24c0 and #03
24c2 cbeqa #03 24d1	JS16
24c5 cbeqa #02 24cc	JS8
24c8 mov #f2 87
24cb rts

24cc ldhx #e400		start @e400 for 8k device (JS8)
24cf bra 24d4
24d1 ldhx #c400		start @c400 for 16k device (JS16)
24d4 mov #8d 0c		CRCH:
24d7 mov #9d 0d		CRCL: set seed to 8d9d

24da lda #55		watchdog
24dc sta 1800
24df coma
24e0 sta 1800

24e3 mov ,x+ 0d
24e5 cphx #ffae		calc from start to ffad, inclusive
24e8 bne 24da

24ea lda #55		watchdog
24ec sta 1800
24ef coma
24f0 sta 1800

24f3 ldhx #ffc0		also calc ffc0 - ffff inclusive

24f6 lda #55		watchdog
24f8 sta 1800
24fb coma
24fc sta 1800

24ff mov ,x+ 0d
2501 cphx #0000
2504 bne 24f6
2506 ldhx 0c		load calc'ed crc
2508 cphx ffb8		compare with saved
250b beq 2511
250d mov #f5 87		didn't match, return f5
2510 rts

2511 mov #01 87		matched, return 01
2514 rts

2515 lda 180d		load TRIM from high registers
2518 sta 42		store into MCGTRM
251a mov #04 40
251d mov #32 41		MCGC2: RANGE=1, HGO=1, EREFS=0, ERCLKEN=1
2520 mov #00 44
2523 rts

2524 bsr 2515
2526 bra 253b
2528 mov #36 41		MCGC2: RANGE=1, HGO=1, EREFS=1, ERCLKEN=1
252b clr 10
252d clr 48

252f lda #55		watchdog
2531 sta 1800
2534 coma
2535 sta 1800

2538 brclr1 43 252f	MCGSC: wait till OSCINIT=1

253b lda #55		watchdog
253d sta 1800
2540 coma
2541 sta 1800

2544 mov #a8 48
2547 mov #b9 4a
254a ldhx #2710
254d sthx 13
254f mov #0c 10

2552 lda #55		watchdog
2554 sta 1800
2557 coma
2558 sta 1800

255b brclr7 10 2552
255e brset7 48 256b
2561 lda 49
2563 beq 2528
2565 cmp #8c
2567 bcs 25c5
2569 bra 257b
256b mov #80 48
256e clr 10

2570 lda #55		watchdog
2572 sta 1800
2575 coma
2576 sta 1800

2579 bra 2570
257b mov #36 41		MCGC2: RANGE=1, HGO=1, EREFS=1, ERCLKEN=1

257e lda #55		watchdog
2580 sta 1800
2583 coma
2584 sta 1800

2587 brclr1 43 257e
258a mov #98 40		MCGC1: CLKS=10, RDIV=011 (/8)

258d lda #55		watchdog
258f sta 1800
2592 coma
2593 sta 1800

2596 lda 43
2598 and #1c
259a cmp #08
259c bne 258d
259e mov #46 44

25a1 lda #55		watchdog
25a3 sta 1800
25a6 coma
25a7 sta 1800

25aa brclr6 43 25a1
25ad brclr5 43 25a1	MCGSC: wait for LOCK & PLLST set
25b0 mov #18 40		MCGC1: CLKS=00, RDIV=011 (/8)

25b3 lda #55		watchdog
25b5 sta 1800
25b8 coma
25b9 sta 1800

25bc brclr2 43 25b3
25bf brclr3 43 25b3	MCGSC: wait for CLKST=11 (PLL)
25c2 jmp 274a
25c5 cmp #64
25c7 bcs 2613
25c9 mov #36 41		MCGC2: RANGE=1, HGO=1, EREFS=1, ERCLKEN=1

25cc lda #55		watchdog
25ce sta 1800
25d1 coma
25d2 sta 1800

25d5 brclr1 43 25cc	MCGSC: wait till OSCINIT=1
25d8 mov #98 40		MCGC1: CLKS=10, RDIV=011 (/8)

25db lda #55		watchdog
25dd sta 1800
25e0 coma
25e1 sta 1800

25e4 lda 43
25e6 and #1c
25e8 cmp #08
25ea bne 25db
25ec mov #48 44

25ef lda #55		watchdog
25f1 sta 1800
25f4 coma
25f5 sta 1800

25f8 brclr6 43 25ef
25fb brclr5 43 25ef	MCGSC: wait for LOCK & PLLST set
25fe mov #18 40		MCGC1: CLKS=00, RDIV=011 (/8)

2601 lda #55		watchdog
2603 sta 1800
2606 coma
2607 sta 1800

260a brclr2 43 2601
260d brclr3 43 2601	MCGSC: wait till CLKST=11 (PLL)
2610 jmp 274a
2613 cmp #46
2615 bcs 2661
2617 mov #36 41		MCGC2: RANGE=1, HGO=1, EREFS=1, ERCLKEN=1

261a lda #55		watchdog
261c sta 1800
261f coma
2620 sta 1800

2623 brclr1 43 261a	MCGSC: wait till OSCINIT=1
2626 mov #90 40		MCGC1: CLKS=10, RDIV=010 (/4)

2629 lda #55		watchdog
262b sta 1800
262e coma
262f sta 1800

2632 lda 43
2634 and #1c
2636 cmp #08
2638 bne 2629
263a mov #46 44

263d lda #55		watchdog
263f sta 1800
2642 coma
2643 sta 1800

2646 brclr6 43 263d
2649 brclr5 43 263d	MCGSC: wait for LOCK & PLLST set
264c mov #10 40		MCGC1: CLKS=00, RDIV=010 (/4)

264f lda #55		watchdog
2651 sta 1800
2654 coma
2655 sta 1800

2658 brclr2 43 264f
265b brclr3 43 264f	MCGSC: wait till CLKST=11 (PLL)
265e jmp 274a
2661 cmp #32
2663 bcs 26af
2665 mov #36 41		MCGC2: RANGE=1, HGO=1, EREFS=1, ERCLKEN=1

2668 lda #55		watchdog
266a sta 1800
266d coma
266e sta 1800

2671 brclr1 43 2668	MCGSC: wait till OSCINIT=1
2674 mov #90 40		MCGC1: CLKS=10, RDIV=010 (/4)

2677 lda #55		watchdog
2679 sta 1800
267c coma
267d sta 1800

2680 lda 43
2682 and #1c
2684 cmp #08
2686 bne 2677
2688 mov #48 44

268b lda #55		watchdog
268d sta 1800
2690 coma
2691 sta 1800

2694 brclr6 43 268b
2697 brclr5 43 268b	MCGSC: wait for LOCK & PLLST set
269a mov #10 40		MCGC1: CLKS=00, RDIV=010 (/4)

269d lda #55		watchdog
269f sta 1800
26a2 coma
26a3 sta 1800

26a6 brclr2 43 269d
26a9 brclr3 43 269d	MCGSC: wait till CLKST=11 (PLL)
26ac jmp 274a
26af cmp #1e
26b1 bcs 26ff
26b3 mov #36 41		MCGC2: RANGE=1, HGO=1, EREFS=1, ERCLKEN=1

26b6 lda #55		watchdog
26b8 sta 1800
26bb coma
26bc sta 1800

26bf brclr1 43 26b6	MCGSC: wait till OSCINIT=1
26c2 mov #88 40		MCGC1: CLKS=10, RDIV=001 (/2)

26c5 lda #55		watchdog
26c7 sta 1800
26ca coma
26cb sta 1800

26ce lda 43
26d0 and #1c
26d2 cmp #08
26d4 bne 26c5
26d6 mov #46 44

26d9 lda #55		watchdog
26db sta 1800
26de coma
26df sta 1800

26e2 brclr6 43 26d9
26e5 brclr5 43 26d9	MCGSC: wait for LOCK & PLLST set
26e8 mov #08 40		MCGC1: CLKS=00, RDIV=001 (/2)

26eb lda #55		watchdog
26ed sta 1800
26f0 coma
26f1 sta 1800

26f4 brclr2 43 26eb
26f7 brclr3 43 26eb	MCGSC: wait till CLKST=11 (PLL)
26fa bra 274a
26fc jmp 256b
26ff cmp #0c
2701 bcs 26fc
2703 mov #36 41		MCGC2: RANGE=1, HGO=1, EREFS=1, ERCLKEN=1

2706 lda #55		watchdog
2708 sta 1800
270b coma
270c sta 1800

270f brclr1 43 2706	MCGSC: wait till OSCINIT=1
2712 mov #80 40		MCGC1: CLKS=10 (ext ref), RDIV=0, IREFS=0

2715 lda #55		watchdog
2717 sta 1800
271a coma
271b sta 1800

271e lda 43		MCGSC
2720 and #1c		IREFST and CLKST
2722 cmp #08		IREFST=0 & CLKST=10 (ext ref)
2724 bne 2715
2726 mov #46 44		MCGC3: PLLS=1, VDIV=6

2729 lda #55		watchdog
272b sta 1800
272e coma
272f sta 1800

2732 brclr6 43 2729	MCGSC: wait for LOCK
2735 brclr5 43 2729	MCGSC: wait for PLLST
2738 mov #00 40		MCGC1: CLKS=00 (FLL or PLL), RDIV=0

273b lda #55		watchdog
273d sta 1800
2740 coma
2741 sta 1800

2744 brclr2 43 273b	MCGSC: wait for CLKST=11 (PLL)
2747 brclr3 43 273b

274a lda #55		watchdog
274c sta 1800
274f coma
2750 sta 1800

2753 mov #80 48
2756 clr 10
2758 rts

2759 lda #30		clear errors by writing 30 to FSTAT
275b sta 1825
275e clr 86
2760 clrh
2761 ldx 86		offset into usb ep0 OUT buffer
2763 lda 18c0,x		get byte
2766 ldhx 88		flash pointer
2768 sta ,x
2769 lda #20		mByteProgram command
276b sta 1826		FCMD register
276e lda #80		write 80 to
2770 sta 1825		FSTAT to start flash process

2773 lda #55		watchdog
2775 sta 1800
2778 coma
2779 sta 1800

277c lda 1825		check for flash errors
277f and #30
2781 beq 2788
2783 mov #f4 87		error: 0f4 87 c! ^ ( program error)
2786 bra 27b0

2788 lda #55		watchdog
278a sta 1800
278d coma
278e sta 1800

2791 lda 1825		wait for FCCF
2794 lsla
2795 bpl 2788
2797 clrh
2798 ldx 86		86 is offset into USB buffer
279a lda 18c0,x		get byte again
279d ldhx 88
279f cmp ,x		compare with flash
27a0 bne 2783		error -> 2783
27a2 incx		inc flash ptr
27a3 sthx 88
27a5 inc 86		inc usb ptr
27a7 lda 8c		load end offset
27a9 cmp 86		done?
27ab bne 2760		no, flash next byte
27ad mov #01 87		yes, all ok, 01 87 c! ^
27b0 rts

27b1 lda #30		clear flash errors
27b3 sta 1825
27b6 lda 1848		?? undocumented - diff between JS8 and JS16?
27b9 and #03
27bb cbeqa #03 27cb	erase by page from 0c400 - fe00 (JS16)
27be cbeqa #02 27c6	erase by page from 0e400 - fe00 (JS8)
27c1 mov #f2 87
27c4 bra 27eb
27c6 ldhx #e400
27c9 bra 27ce
27cb ldhx #c400
27ce sthx 88
27d0 bsr 27ec		flash page erase
27d2 beq 27d9		ok -> 27d9
27d4 mov #f1 87		bad: 0f1 87 c! return (page erase error)
27d7 bra 27eb
27d9 ldhx 88		flash pointer
27db cphx #fe00
27de beq 27e8		done
27e0 pshh
27e1 pula
27e2 add #02		add 200 (page) to HX
27e4 psha
27e5 pulh
27e6 bra 27ce
27e8 mov #01 87		done, success: 01 87 c! return
27eb rts

27ec sta ,x		Write to flash; HX has page address
27ed lda #40		page erase command
27ef sta 1826		FCMD c!
27f2 lda #80
27f4 sta 1825		start command

27f7 lda #55		watchdog
27f9 sta 1800
27fc coma
27fd sta 1800

2800 lda 1825		check for errors
2803 and #30
2805 beq 2809
2807 bra 2819		if error, return A != 0, Z clear

2809 lda #55		watchdog
280b sta 1800
280e coma
280f sta 1800

2812 lda 1825		wait for FCCF (flash command complete)
2815 lsla
2816 bpl 2809
2818 clra		erase ok: return A = 0, Z set
2819 rts

281a lda #30		30 FSTAT c! ( clear flash errors)
281c sta 1825
281f sta f000		Write to flash
2822 lda #41		mass erase command
2824 sta 1826		FCMD c!
2827 lda #80		80 FSTAT c! ( to start command)
2829 sta 1825

282c lda #55		watchdog
282e sta 1800
2831 coma
2832 sta 1800

2835 lda 1825		FSTAT c@ 30 and ( check for errors)
2838 and #30
283a beq 2841
283c mov #f0 87		flash mass erase error: 0f0 87 c! return
283f bra 2853

2841 lda #55		watchdog
2843 sta 1800
2846 coma
2847 sta 1800

284a lda 1825		wait for FCCF (command complete)
284d lsla
284e bpl 2841
2850 mov #01 87		flash erase ok: 01 87 c!
2853 rts

2854 bset1 01
2856 brset0 02 2859
2859 brset0 00 287c
285c sbc #15
285e lsl 00
2860 brset0 01 2864
2863 brset1 00 2867
2866 brclr4 02 2882
2869 brset0 01 286d
286c brset0 80 28a1
286f brclr4 04 2872
2872 brset0 01 2874
2875 brset0 ff 2878
2878 brclr3 05 27fc
287b brclr1 40 287e
287e stx ,x
287f brset2 03 288b
2882 brset2 14 2888
2885 rora
2886 brset0 72 2889
2889 cphx #0065
288c brset0 73 288f
288f com 00,x
2891 cbeq 00,x+ 2900
2894 brset0 65 2897
2897 brset5 03 28e4
289a brset0 53 289d
289d bra 289f
289f bra 28a1
28a1 ---

( And here is the memory dump, with characters.)

       ?        ?      &     ?         ?  ?   '  0  n    
2160  c6 18 00 a4  80 26 16 c6  18 0f a1 c3  27 30 6e 04 
       @  n  @  A   n     D  2   ?  ?  ?      ?  ?       
2170  40 6e 40 41  6e 01 44 32  ff fe fc 20  fe c6 18 02 
       ?     &      ?  ?  ?  '   ?  ?  ?  &      ?  U  ? 
2180  a4 04 26 1a  c6 ff ba 27  e5 a1 ff 26  11 a6 55 c7 
             C  ?         ?  %      ?  $  |   '  ?  ?  U 
2190  18 00 43 c7  18 00 cd 25  15 cd 24 7c  27 d0 a6 55 
       ?        C   ?        ?   ?  ?         E     }    
21a0  c7 18 00 43  c7 18 00 a6  c3 c7 18 0f  45 02 7d 94 
          ?  %  $      ?     o      [  ?  ?   N  ?       
21b0  9b cd 25 24  8c ae 0d 6f  7f 5b fc a6  4e c7 18 20 
       n     P  ?      ?     `   ?     a  ?      ?     b 
21c0  6e 80 50 a6  00 c7 18 60  c7 18 61 a6  08 c7 18 62 
       ?     ?      c  ?     ?      d  ?      ?     e  n 
21d0  a6 88 c7 18  63 a6 20 c7  18 64 a6 18  c7 18 65 6e 
          e  ?      H  ?  D  ?   P     P  ?   U  ?       
21e0  01 65 c6 18  48 a4 44 b7  50 10 50 a6  55 c7 18 00 
       C  ?            `  ?  n   ?  b  n  ?   `  n  ?  c 
21f0  43 c7 18 00  01 60 f4 6e  ff 62 6e bf  60 6e bf 63 
       ?  a  ?  f   n     m  ?   U  ?         ?  ?  ?    
2200  3f 61 3f 66  6e 0d 6d a6  55 c7 18 0e  a6 aa c7 18 
          ?     ?      $  ?  U   ?        C   ?          
2210  0e a6 01 c7  18 24 a6 55  c7 18 00 43  c7 18 00 07 
       `     ?  d   ?  ?  A         &     ?      c  ?  < 
2220  60 20 b6 64  a4 f8 41 08  14 26 15 c6  18 63 a4 3c 
       ?  4  &      ?            ?  #  ?         ?  #    
2230  a1 34 26 04  ad 15 20 08  cd 23 bc 20  03 cd 23 87 
          `     `         m      `     ?  ?      ?  ?  ` 
2240  16 60 0f 60  04 13 6d 1e  60 20 cb c6  18 c0 a4 60 
       A        A   @  [     m   ?     ?      c  ?     ? 
2250  41 00 0f 41  40 5b 12 6d  a6 88 c7 18  63 3f 81 cc 
       #  T  ?      ?  A     5   A     A  A         A    
2260  23 54 c6 18  c1 41 00 35  41 05 41 41  06 05 41 09 
       =     ?  ?      ?  A         A         A          
2270  3d 20 e3 c6  18 c3 41 01  08 41 02 10  41 03 18 20 
       ?  E  (  T   5     n         ?  #  '   E  (  f  5 
2280  d5 45 28 54  35 82 6e 12  84 cc 23 27  45 28 66 35 
          n         ?  #  '  ?   $     ?  #   4  O  ?    
2290  82 6e 19 84  cc 23 27 cd  24 1a cc 23  34 4f c7 18 
          ?         ?     ?      a  ?  #  4         ?  # 
22a0  80 c7 18 81  a6 02 c7 18  61 cc 23 34  10 80 cc 23 
       >  ?     ?   A  h     A   a  +  A  c   E  A  d  G 
22b0  3e c6 18 c1  41 68 11 41  61 2b 41 63  45 41 64 47 
       A  i  S  A   o  U         O  ?         ?     a  ? 
22c0  41 69 53 41  6f 55 20 8e  4f c7 18 0f  c7 18 61 a6 
       ?  ?     `      e     ?      o     [   ?  ?     ` 
22d0  c8 c7 18 60  1b 65 8c ae  0d 6f 7f 5b  fc c6 18 60 
       +  ?  ?  (   ?        ?      ?  ?      ?     ?  ? 
22e0  2b fb cc 28  a1 16 80 c6  18 c3 b7 88  c6 18 c2 b7 
          ?     ?   ?     ?      ?  ?     ?      ?  ?    
22f0  89 c6 18 c5  b7 8a c6 18  c4 b7 8b c6  18 c6 b7 8c 
          <  ?  (         7  ?   ?  ?  '      n  ?       
2300  20 3c cd 28  1a 20 37 c6  ff be 27 05  6e f1 87 20 
       -  ?  '  ?      (  ?  $   ?     #  ?      ?       
2310  2d cd 27 b1  20 28 cd 24  bd 20 23 b6  87 c7 18 80 
       ?     ?      a        ?      ?  ?      $     ?    
2320  a6 01 c7 18  61 20 0d c6  18 c6 b1 84  24 02 b7 84 
       ?     ?  -   n        ?      ?     c         n    
2330  3f 85 ad 2d  6e 01 81 a6  80 c7 18 63  20 0c 6e 02 
          O  ?      a  ?  ?  ?      c  ?  ?   ?     `  ? 
2340  81 4f c7 18  61 a6 c8 c7  18 63 a6 c8  c7 18 60 a6 
          ?     b   ?     ?      d  ?     ?      e     e 
2350  08 c7 18 62  a6 20 c7 18  64 a6 18 c7  18 65 1b 65 
             ?      ?     1         ?     Q         U    
2360  81 8c 3f 86  b6 85 31 84  18 be 86 51  20 13 55 82 
       ?  ?     5         ?      ?        <      <       
2370  f6 af 01 35  82 8c be 86  d7 18 80 3c  85 3c 86 20 
       ?  ?     ?      a               ?      ?  ?  f    
2380  e3 b6 86 c7  18 61 81 01  80 07 c6 18  c2 b7 66 11 
                    ?  ?  ?      `  ?  @  &      ?  ?    
2390  80 01 81 14  ad cb c6 18  60 a5 40 26  04 a6 c8 20 
          ?     ?      `         ?        ?      ?     ? 
23a0  02 a6 88 c7  18 60 20 02  ad 01 81 3f  81 a6 20 c7 
          d  ?      ?     c  O   ?     `            X    
23b0  18 64 a6 88  c7 18 63 4f  c7 18 60 81  03 81 58 07 
          C  ?      d  ?     &   <  ?     H   ?     A    
23c0  80 43 c6 18  64 b1 8c 26  3c c6 18 48  a4 03 41 02 
          A         n  ?               *  U      e  ?    
23d0  1a 41 03 07  6e f2 87 17  80 20 2a 55  88 65 c0 00 
       %     U      e  ?     %            U      e  ?    
23e0  25 17 55 8a  65 c0 00 25  10 20 15 55  88 65 e0 00 
       %     U      e  ?     $      n  ?                 
23f0  25 07 55 8a  65 e0 00 24  07 6e f3 87  17 80 20 05 
       ?  '  Y         ?     c   ?  @  &      ?  ?       
2400  cd 27 59 17  80 c6 18 63  a5 40 26 04  a6 c8 20 02 
       ?     ?      c        ?         ?      ?  A       
2410  a6 88 c7 18  63 20 02 ad  92 81 c6 18  c2 41 00 06 
       A        A         E  (      5     ?   (     ?    
2420  41 01 0f 41  02 18 45 28  7f 35 82 c6  28 7f b7 84 
             E  (      5     ?   (     ?            E  ( 
2430  20 16 45 28  83 35 82 c6  28 83 b7 84  20 0a 45 28 
          5     ?   (     ?      ?     ?  ?      $     ? 
2440  97 35 82 c6  28 97 b7 84  c6 18 c6 b1  84 24 02 b7 
          ?     ?   #  a  ?      ?  ?     &      ?     H 
2450  84 3f 85 cd  23 61 c6 18  c2 a1 02 26  1e c6 18 48 
       ?     A         A               ?  8   ?          
2460  a4 03 41 02  05 41 03 09  20 11 a6 38  c7 18 86 20 
          ?  1  ?         ?  6   ?            ?     H  ? 
2470  0a a6 31 c7  18 86 a6 36  c7 18 88 81  c6 18 48 a4 
          A         A            /  E  ?            E  ? 
2480  03 41 03 0a  41 02 02 20  2f 45 e4 00  20 03 45 c4 
          n         n        ~      e  ?  ?   &  ?  ?  U 
2490  00 6e 8d 0c  6e 9d 0d 7e  0d 65 ff ae  26 f9 a6 55 
       ?        C   ?        E   ?  ?  ~      e        & 
24a0  c7 18 00 43  c7 18 00 45  ff c0 7e 0d  65 00 00 26 
       ?  U     >   ?  ?  '      ?  ?     O      ?     H 
24b0  f9 55 0c 3e  ff b8 27 03  a6 ff 81 4f  81 c6 18 48 
       ?     A         A         n  ?         E  ?       
24c0  a4 03 41 03  0c 41 02 04  6e f2 87 81  45 e4 00 20 
          E  ?      n        n         ?  U   ?        C 
24d0  03 45 c4 00  6e 8d 0c 6e  9d 0d a6 55  c7 18 00 43 
       ?        ~      e  ?  ?   &  ?  ?  U   ?        C 
24e0  c7 18 00 7e  0d 65 ff ae  26 f0 a6 55  c7 18 00 43 
       ?        E   ?  ?  ?  U   ?        C   ?        ~ 
24f0  c7 18 00 45  ff c0 a6 55  c7 18 00 43  c7 18 00 7e 
          e         &  ?  U      >  ?  ?  '      n  ?    
2500  0d 65 00 00  26 f0 55 0c  3e ff b8 27  04 6e f5 87 
          n            ?         ?  B  n      @  n  2  A 
2510  81 6e 01 87  81 c6 18 0d  b7 42 6e 04  40 6e 32 41 
       n     D      ?  ?         n  6  A  ?      ?  H  ? 
2520  6e 00 44 81  ad ef 20 13  6e 36 41 3f  10 3f 48 a6 
       U  ?         C  ?            C  ?  ?   U  ?       
2530  55 c7 18 00  43 c7 18 00  03 43 f4 a6  55 c7 18 00 
       C  ?         n  ?  H  n   ?  J  E  '      5     n 
2540  43 c7 18 00  6e a8 48 6e  b9 4a 45 27  10 35 13 6e 
             ?  U   ?        C   ?               ?     H 
2550  0c 10 a6 55  c7 18 00 43  c7 18 00 0f  10 f4 0e 48 
          ?  I  '   ?  ?     %   \        n      H  ?    
2560  0a b6 49 27  c3 a1 8c 25  5c 20 10 6e  80 48 3f 10 
       ?  U  ?         C  ?            ?  n   6  A  ?  U 
2570  a6 55 c7 18  00 43 c7 18  00 20 f5 6e  36 41 a6 55 
       ?        C   ?            C  ?  n      @  ?  U  ? 
2580  c7 18 00 43  c7 18 00 03  43 f4 6e 98  40 a6 55 c7 
             C  ?         ?  C   ?     ?      &  ?  n  F 
2590  18 00 43 c7  18 00 b6 43  a4 1c a1 08  26 ef 6e 46 
       D  ?  U  ?         C  ?            C   ?     C  ? 
25a0  44 a6 55 c7  18 00 43 c7  18 00 0d 43  f4 0b 43 f1 
       n     @  ?   U  ?         C  ?            C  ?    
25b0  6e 18 40 a6  55 c7 18 00  43 c7 18 00  05 43 f4 07 
       C  ?  ?  '   J  ?  d  %   J  n  6  A   ?  U  ?    
25c0  43 f1 cc 27  4a a1 64 25  4a 6e 36 41  a6 55 c7 18 
          C  ?            C  ?   n     @  ?   U  ?       
25d0  00 43 c7 18  00 03 43 f4  6e 98 40 a6  55 c7 18 00 
       C  ?         ?  C  ?      ?     &  ?   n  H  D  ? 
25e0  43 c7 18 00  b6 43 a4 1c  a1 08 26 ef  6e 48 44 a6 
       U  ?         C  ?            C  ?      C  ?  n    
25f0  55 c7 18 00  43 c7 18 00  0d 43 f4 0b  43 f1 6e 18 
       @  ?  U  ?         C  ?            C   ?     C  ? 
2600  40 a6 55 c7  18 00 43 c7  18 00 05 43  f4 07 43 f1 
       ?  '  J  ?   F  %  J  n   6  A  ?  U   ?        C 
2610  cc 27 4a a1  46 25 4a 6e  36 41 a6 55  c7 18 00 43 
       ?            C  ?  n      @  ?  U  ?         C  ? 
2620  c7 18 00 03  43 f4 6e 90  40 a6 55 c7  18 00 43 c7 
             ?  C   ?     ?      &  ?  n  F   D  ?  U  ? 
2630  18 00 b6 43  a4 1c a1 08  26 ef 6e 46  44 a6 55 c7 
             C  ?            C   ?     C  ?   n     @  ? 
2640  18 00 43 c7  18 00 0d 43  f4 0b 43 f1  6e 10 40 a6 
       U  ?         C  ?            C  ?      C  ?  ?  ' 
2650  55 c7 18 00  43 c7 18 00  05 43 f4 07  43 f1 cc 27 
       J  ?  2  %   J  n  6  A   ?  U  ?         C  ?    
2660  4a a1 32 25  4a 6e 36 41  a6 55 c7 18  00 43 c7 18 
             C  ?   n     @  ?   U  ?         C  ?       
2670  00 03 43 f4  6e 90 40 a6  55 c7 18 00  43 c7 18 00 
       ?  C  ?      ?     &  ?   n  H  D  ?   U  ?       
2680  b6 43 a4 1c  a1 08 26 ef  6e 48 44 a6  55 c7 18 00 
       C  ?            C  ?      C  ?  n      @  ?  U  ? 
2690  43 c7 18 00  0d 43 f4 0b  43 f1 6e 10  40 a6 55 c7 
             C  ?            C   ?     C  ?   ?  '  J  ? 
26a0  18 00 43 c7  18 00 05 43  f4 07 43 f1  cc 27 4a a1 
          %  L  n   6  A  ?  U   ?        C   ?          
26b0  1e 25 4c 6e  36 41 a6 55  c7 18 00 43  c7 18 00 03 
       C  ?  n      @  ?  U  ?         C  ?         ?  C 
26c0  43 f4 6e 88  40 a6 55 c7  18 00 43 c7  18 00 b6 43 
       ?     ?      &  ?  n  F   D  ?  U  ?         C  ? 
26d0  a4 1c a1 08  26 ef 6e 46  44 a6 55 c7  18 00 43 c7 
                C   ?     C  ?   n     @  ?   U  ?       
26e0  18 00 0d 43  f4 0b 43 f1  6e 08 40 a6  55 c7 18 00 
       C  ?            C  ?      C  ?     N   ?  %  k  ? 
26f0  43 c7 18 00  05 43 f4 07  43 f1 20 4e  cc 25 6b a1 
          %  ?  n   6  A  ?  U   ?        C   ?          
2700  0c 25 f9 6e  36 41 a6 55  c7 18 00 43  c7 18 00 03 
       C  ?  n      @  ?  U  ?         C  ?         ?  C 
2710  43 f4 6e 80  40 a6 55 c7  18 00 43 c7  18 00 b6 43 
       ?     ?      &  ?  n  F   D  ?  U  ?         C  ? 
2720  a4 1c a1 08  26 ef 6e 46  44 a6 55 c7  18 00 43 c7 
                C   ?     C  ?   n     @  ?   U  ?       
2730  18 00 0d 43  f4 0b 43 f1  6e 00 40 a6  55 c7 18 00 
       C  ?            C  ?      C  ?  ?  U   ?        C 
2740  43 c7 18 00  05 43 f4 07  43 f1 a6 55  c7 18 00 43 
       ?        n      H  ?         ?  0  ?      %  ?    
2750  c7 18 00 6e  80 48 3f 10  81 a6 30 c7  18 25 3f 86 
          ?     ?      ?  U      ?  ?     ?      &  ?    
2760  8c be 86 d6  18 c0 55 88  f7 a6 20 c7  18 26 a6 80 
       ?     %  ?   U  ?         C  ?         ?     %  ? 
2770  c7 18 25 a6  55 c7 18 00  43 c7 18 00  c6 18 25 a4 
       0  '     n   ?        (   ?  U  ?         C  ?    
2780  30 27 05 6e  f4 87 20 28  a6 55 c7 18  00 43 c7 18 
          ?     %   H  *  ?      ?     ?      ?  U     ? 
2790  00 c6 18 25  48 2a f1 8c  be 86 d6 18  c0 55 88 f1 
       &  ?  \  5      <     ?      ?     &   ?  n       
27a0  26 e1 5c 35  88 3c 86 b6  8c b1 86 26  b3 6e 01 87 
          ?  0  ?      %  ?      H  ?     A         A    
27b0  81 a6 30 c7  18 25 c6 18  48 a4 03 41  03 0d 41 02 
          n  ?         %  E  ?            E   ?     5    
27c0  05 6e f2 87  20 25 45 e4  00 20 03 45  c4 00 35 88 
       ?     '      n  ?            U     e   ?     '    
27d0  ad 1a 27 05  6e f1 87 20  12 55 88 65  fe 00 27 08 
             ?               ?   n            ?  ?  @  ? 
27e0  8b 86 ab 02  87 8a 20 e6  6e 01 87 81  f7 a6 40 c7 
          &  ?      ?     %  ?   U  ?         C  ?       
27f0  18 26 a6 80  c7 18 25 a6  55 c7 18 00  43 c7 18 00 
       ?     %  ?   0  '            ?  U  ?         C  ? 
2800  c6 18 25 a4  30 27 02 20  10 a6 55 c7  18 00 43 c7 
             ?      %  H  *  ?   O     ?  0   ?     %  ? 
2810  18 00 c6 18  25 48 2a f1  4f 81 a6 30  c7 18 25 c7 
       ?     ?  A   ?     &  ?      ?     %   ?  U  ?    
2820  f0 00 a6 41  c7 18 26 a6  80 c7 18 25  a6 55 c7 18 
          C  ?         ?     %   ?  0  '      n  ?       
2830  00 43 c7 18  00 c6 18 25  a4 30 27 05  6e f0 87 20 
          ?  U  ?         C  ?         ?      %  H  *  ? 
2840  12 a6 55 c7  18 00 43 c7  18 00 c6 18  25 48 2a f1 
       n                                      ?     8    
2850  6e 01 87 81  12 01 00 02  00 00 00 20  a2 15 38 00 
                                                    2    
2860  00 01 01 02  00 01 09 02  19 00 01 01  00 80 32 09 
                    ?     ?                   @     ?    
2870  04 00 00 01  ff 00 ff 00  07 05 81 03  40 00 ff 04 
                       F     r      e     e      s     c 
2880  03 09 04 14  03 46 00 72  00 65 00 65  00 73 00 63 
          a     l      e            J     S              
2890  00 61 00 6c  00 65 00 0a  03 4a 00 53  00 20 00 20 
             ?  ?   ?  ?  ?  ?   ?  ?  ?  ?   ?  ?  ?  ? 
28a0  00 8d ff ff  ff ff ff ff  ff ff ff ff  ff ff ff ff 
