( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading Serial expect/send

( Simple target serial expect/send code.)

: target-raw  ( fd)  ( This is tailored for target interaction)
    dup  here get-termios  drop
         here set-termios-target-raw
  ( fd)  here set-termios  ( set to raw!) ;

variable fd-target

( tty-target returns fd of tty connected to target. If not yet opened,
  opens it, and sets it to target-raw.)

: tty-target  fd-target @  =if ^ then ( already opened!)  drop
   z" serial-target" open-file-rw  ( this should be a symlink to device)
   dup fd-target !  dup target-raw  ( fd) ;


( We want to have several easy-to-use words that read, modify, and
  write back tty-target's termios, so let's make that easy.)

: using-tty-target
   tty-target here get-termios drop
              here pop @execute  ( execute the following word)
   tty-target here set-termios ;

: bps   ( speed)    using-tty-target  set-termios-speed          ;
: ignore-parity     using-tty-target  set-termios-ignore-parity  ;
: even-parity       using-tty-target  set-termios-even-parity    ;
: odd-parity        using-tty-target  set-termios-odd-parity     ;


( Recv from, send to target.)
: _send  tty-target  >emit ;
: _recv  tty-target  <key ;

( flush throws away bytes in the input queue; drain waits until all bytes
  in the output queue have been transmitted.)

: flush  tty-target  tty-iflush ;
: drain  tty-target  tty-drain ;

: icount  ( - chars-waiting)  tty-target  tty-icount ;

( Spying on the protocol.)
variable spy  spy off
: send          spy @ if ." >"  dup .h8_ then  _send ;
: recv   _recv  spy @ if ." <"  dup .h8_ then ;

( Wait for target command loop to announce itself, and compare to what we
  expect.)

: await  ( a u)
   m preserve
   swap m !  for  m* recv  xor if  error" Wrong firmware"  then  next ;
