( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Common code for architectures - for example the HC08/S08 and MSP430 -
  that use a single, small, flat address space that contains flash, ram,
  and i/o.)

( Before loading this, define #addrbits to be the number of bits needed to
  address all the bytes in the memory image. We'll allocate an image to match.

  Also define either big-endian or little-endian, and either aligned-words
  or unaligned-words.)

( Represent the entire address space. This way we don't worry about any
  translation issues - like forcing target address fc00 to refer to first
  byte of the image buffer.)

1 #addrbits <<  constant #image
#image buffer image

: wrap   [ #image 1- #] and ;
: +a  ( a1 a2 - sum)  +  wrap ;  ( add and wrap to image size)

: image+  ( target - host)  wrap  image + ;
: image-  ( host - target)        image -  wrap ;


( DEBUG: Define show-! to show writes to image.)
.ifdef show-!
: .debug-c!   cr  ( byte addr)  2dup .hcell_  .h8 ;
: .debug-w!   cr  ( word addr)  2dup .hcell_  .hcell ;
.else
: .debug-c! ;
: .debug-w! ;
.then

: image-c@             image+ c@ ;
: image-c!  .debug-c!  image+ c! ;


.ifdef little-endian

: image-@  ( a - w)             image+  leh@ ;
: image-!  ( w a)    .debug-w!  image+  leh! ;

-: ( buf a u)  swap image+ -rot  cmove ;
: >image
   [ #]      is |read    ( read from image buffer)
   ['] leh@  is |cell@
      #addrbits |addr !  ( size of addr in bits)
              2 |cell !  ( size of cell in bytes) ;

.else .ifdef big-endian

: image-@  ( a - w)             image+  beh@ ;
: image-!  ( w a)    .debug-w!  image+  beh! ;

-: ( buf a u)  swap image+ -rot  cmove ;
: >image
   [ #]      is |read    ( read from image buffer)
   ['] beh@  is |cell@
      #addrbits |addr !  ( size of addr in bits)
              2 |cell !  ( size of cell in bytes) ;

.else  z" You must define either big-endian or little-endian."  abort
.then .then

>image


( Dictionary operators.)
variable h   ( image dictionary pointer pointer)
: image-region   create  ( origin)  dup , ,  does>  h ! ;

( Dictionary pointer.)
: dp   h @ ;

: region!  ( a)        dup  dp 2!  ( set pointer and origin) ;
: region@  ( - origin ptr)  dp 2@  ( get pointer and origin) ;

( return the origin & number of bytes in current region)
: region   ( - a u)  region@  ( origin ptr)  over - ;

meta
2 constant cell
: cells  2* ;
: cell/  2/ ;
: cell+  \m cell + ;
: cell-  \m cell - ;

( In several other muforth target compilers I've called this word "org".
  But I never liked the name. It started life as an assembler "directive"
  in the 1960s or 1970s. It wasn't clear what it meant back then, and it is
  no clearer now.)

: goto   ( a)    dp  ! ;  ( set the "here" pointer; ie, go to some address)

: here   ( - a)  dp  @ ;
: allot  ( n)    dp +! ;

: c,        ( b)              \m here image-c!        1  \m allot ;
: align,    ( b)   \m here 1 and  if  \m c,  ^  then  drop ;

: align     0  \m align, ;

.ifdef aligned-words
: ,         ( w)    \m align  \m here image-!   \m cell  \m allot ;
.else .ifdef unaligned-words
: ,         ( w)              \m here image-!   \m cell  \m allot ;
.else  z" You must define either aligned-words or unaligned-words."  abort
.then .then

forth
( Initialization.)
: wipe   image  #image  ( erase)   "ff  fill ;
