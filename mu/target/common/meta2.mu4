( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( we can either do this with lots of deferred words or we can have the
  machine-dependent bits compiled first, then this file last.)

machine
defer literal  ( target compile a literal) ;
defer number   ( convert host number to target format) ;
defer number,  ( convert to target, make target literal)
    ( \o number  if  \o 2literal  ^  then  \o literal  ; )
defer compile, ( compile an execution token on target) ;
defer >data    ( get address of data of target item) ;
defer remote   ( execute target word on remote target)

inside
: char   \f char  \m literal ;
: (      \f ( ;

forth
( All the different search-execute-compile routines for different modes,
  and their associated prompts.

  Note the similarities in structure, esp now that Randy Thelen made me
  have find return true if found! Now things are much more perspicuous.)

comment %in-the-kernel%  Shown here for comparison's sake.
: _[   ( interpret one token)
      .forth. find  if  execute ^ then  number ;

: _]   ( compile one token)
   .compiler. find  if  execute ^ then
      .forth. find  if  compile, ^ then  number, ;  %in-the-kernel%

-:  ."  (assembling)"  ;
-:      .asm. find  if  execute ^ then
    .outside. find  if  execute ^ then
     .target. find  if  \m >data ^ then  ( not found)  \m number ^ ;
mode meta-asm

( Comparing meta-outside and target is interesting. The question basically
  is this: do you want a hybrid environment or not? meta-outside is a
  hybrid; it's designed for doing _both_ unconnected [untethered]
  meta-compilation, but also for doing connected [tethered] target
  execution. But being able to switch seamlessly brings the possibility of
  error and confusion; in particular, there might be some state of the
  meta-compiler that you'd like to query. Really the best mode for doing
  that is "normal" host forth mode, but using escapes such as \o to get to
  the meta words that you're interested in.

  Another issue is that of numbers. If, as is likely, the host and target
  have different number formats - differences in endianness or word length,
  e.g. - you'd like to not confuse the two. Since numbers are pushed onto
  the stack - in interactive mode - and compiled as literals - in compile
  modes - you need to be sure, at the time that the parser encounters your
  digits in the input stream, that you're in the right mode. If you are
  going to be changing a value that affects the machinery of the host's
  meta compiler, then you need to be executing the host's number or number,
  works. If your bits are destined for the target - either thru remote
  execution or a target literal - then you'd likewise better be executing
  \m number or \m number, .

  I'm not sure I like the definition of meta-outside here. I'd almost
  prefer that it be a "pure" meta with no searching of the target. Then
  target mode can be used to interact with the [tethered] target.)

-:  ."  (meta)"  ;
-:  .outside. find  if  execute ^ then
     .target. find  if  \m remote ^ then  \m number ;
mode meta-outside

-:  ."  (meta-compiling)"  ;
-:  .inside. find  if  execute ^ then
    .target. find  if  \m compile, ^ then  \m number, ;
mode meta-inside

-:  ."  (target)"  ;
-:  .target. find  if  \m remote ^ then  \m number ;
mode target

assembler
: comment   comment ;
: label   create  |here  does>  \a pc)  ;
: c;   meta-interpret  ( \o [ )  ;  ( exit assembler, back to outside)

( Assembler needs some arithmetic and a few other useful things.)
: +  +  ;
: -  -  ;
: *  *  ;
: /  /  ;
( and, or, xor?)


forth
: >assembler   assemble  \a false \a |if  ;

outside
( ...and should take us to the assembler)
: label   \a label  >assembler  ;
: equ           constant ( in outside)  ;
: code   ( xxx) >assembler ;

comment %%%
: _code
   \o NAME  \o SHOW  |here  \o ,  assemble  ;  ( ITC)
: CODES  ( code)   \o NAME  \o SHOW         \o ,  ;   ( for aliasing)
: RESOLVES     forth chain'  !  ;  ( for setting primitive pointers)
: IMPLEMENTS   |here  \o RESOLVES  assemble  ;
                         ( for code fragments - does, evokes)

outside
( Dictionary name entries.)
( NAME creates a head that needs show to make it findable. There is a
  subtle issue here: If one of these target names is executed, it will
  compile, into the target image, a reference to itself. Under normal
  circumstances this will never happen, since the meta-compile and
  meta-interpret loops -never- execute target words directly, instead
  executing remotely or compiling depending on the current mode. This
  means, though, that we can define helper words in the target - like `BPS'
  in the kernel - that compile target words.)

( We want to create a target dictionary with heads in it. This entails some
  complexity. If the target's dictionary structure were exactly the same as
  the host's, we could link the actual target heads into the host's
  dictionary, and unlink them when we're done metacompiling. This is what
  cmFORTH does. Or we could, when we want a target head for a definition,
  link it onto one of several chains unique to the target - compiler and
  forth, e.g. Thus we need to duplicate, in the meta-compiler, some of
  dictionary chaining machinery in the host.)

variable head?
: |  ( compile headless)  head? off ;

: |token,  ( - 'link)  token  here  scrabble>  allot  ;
: |link,   ( here)  |current @ |chain  dup @ ,  last-link 2!  ;
: head,   token,  link,  ;

: |name      |head,  ;
: noname   0 align,  ;

: name
   target  |name  outside
   0 |align,  \o HERE 2 + , ( pfa)
   does> @ ( target pfa)  \o ,  ;

: show   show ;

( Control structures)
machine
defer resolve    ( src dest)  ( resolve branch)
defer =0branch   ( - src)  ( compile target's non-destructive branch on zero)
defer 0branch    ( - src)  ( compile target's branch on zero)
defer branch     ( - src)  ( compile target's unconditional branch)
defer for        ( - dest) ( compile target's for primitive)
defer ?for       ( - src dest)  ( compile target's ?for primitive)
defer next       ( - src)  ( compile target's next primitive)

( mark dest of forward jump as not tail-call convertible)
: -tail   0 \o last ! ;
: resolve>  ( src dest)  resolve -tail ;
: <resolve  ( dest src)  swap resolve ;

inside
: =if   ( - src)  \m =0branch ;  ( keeps tested value on stack)
: if    ( - src)  \m  0branch ;
: then  ( src)    \o here  \m resolve> ;

: begin   ( - dest)  \o here ;
: =until  ( dest)     \i =if  \m <resolve ;
: until   ( dest)      \i if  \m <resolve ;
: again   ( dest)  \m branch  \m <resolve ;
: =while  ( dest - src dest)  \i =if  swap ;
: while   ( dest - src dest)   \i if  swap ;
: repeat  ( src dest)    \i again  \i then ;

( n for .. next         goes n times; _lots_ if n=0 )
( n ?for .. next then   goes n times; 0 if n=0 )

: for     ( - dest)      \m for ;
: ?for    ( - src dest)  \m ?for ;
: next    ( dest)        \m next  \m <resolve ;

( Compiler and interpreter.)
inside
: [    meta-outside ;
: -]   meta-inside  ;
: ;    \i ^  \i [  ;

outside
: :   \m name  \i -] ;  ( XXX: can this be made totally generic?)

forth

: -code  \o here  assemble  ;
: codes  \a c;  ( exit assembler)  dup |+ @  constant  |h !  does>  \o ,  ;
-code  4 r )+ pc ldr  codes _unnest
-code  4 r )+ lr ldr  codes _tail
: bl>b  ( convert BL to B, compensate for change of address)
   1-  ( it moved)  "00ffffff and ( isolate offset)  "ea000000 xor  ;

( if compile, is only ever used to compile BLs, then this will work.)
: ^  ( tail-optimizing)
   \o here \o last-word @ xor  if  unnest,  ^  then
   \o here |+ \o cell- push  r@ @  _tail  pop !  bl>b \o ,  ;

   here last-word @ xor if  lit unnest compile, ^ then

	.long	d4_here,d4_last_word,d4_fetch	# here last-word @
	.long	d4_xor,d4_0br,1f		# xor if
	.long	d4_lit,d4_unnest,d4_tail(d4_compile_comma)
1:	.long	d4_minus_cell,d4_allot		# -cell allot
	.long	d4_here,d4_fetch		# here @
	.long	d4_lit,d4__tail,d4_compile_comma	# compile tail
	.long	d4_tail(d4_compile_comma)	# compile, ;

: ;    'exit @ \o ,  \i -;  ;

forth
: }   \i [  ;  ( return to meta interpreter)

outside
: #]   \o literal  meta-compile  ;


( Conditional compilation.)
: define     define  ;
: .if     \ .if  ;
: .else   \ .else  ;
: .then   ;
: .ifdef   \ .ifdef ;
: .ifndef  \ .ifndef ;
: .def     \ .def ;

inside
: .if     \ .if  ;
: .else   \ .else  ;
: .then   ;
: .ifdef   \ .ifdef ;
: .ifndef  \ .ifndef ;
: .def     \ .def ;


( DOES>, ;CODE and other magic.)
forth
: >patch    pop @  last-code @  cell+  @ ( target word)
	    >+  ( image)  2 -  >!  ;
: <;code>   \o SHOW   lit >patch compile,   |here ,  ;

( This <does> is tricky.  Since code and words are separate, we cannot
  simply insert a `call do_does' into the sequence of addresses.  Instead
  we assemble the `call do_does' into code space followed by the ip to
  start executing.)

( 15-apr-2000. This way of doing DOES> - a CALL dodoes followed by new ip -
  takes 41 + 2w cycles on the V25. A MOV #new_ip, AX; JMP dodoes takes only
  20 cycles, and only one byte more. Let's do it.)
0 .if
: <does>   ( offset)
   <;code>  <asm  ) CALL,  asm>  \o HERE  |, ( ip)  target-]  ;
.then

: <does>   ( offset)
   <;code>  \o HERE  ( ip)  <asm  # AX MOV,  ) JMP,  asm>  meta-compile  ;

( Definers. Words to create target defining words.)
outside
: :D   ( outside)  :  definer-compile  ;  ( definer words)
: :O   ( outside)  :  ( host-compile)  ;  ( helper words)
: :I      inside   :  outside  ;

( Note: The subtle difference here is that the :D compiler searches only
  `definer' and `outside'. `\f' can be used to escape to Forth. This is
  intended for creating defining words, like the meta VARIABLE and : and
  such. :O is an alias for the host compiler, except that, like :D, the
  word is defined in the outside vocab. There are a few obscure cases in
  the V25 kernel when this is helpful - like to imitate the behavior of
  SERIAL while compiling.)

compiler
: ;O   \ ;  ( outside)  \i [  ;
: ;I   \ ;O  ;

definer
: ;CODE    <;code>  assemble  ;
: DOES>    'does @    <does>  ;  ( readonly)
: EVOKES>  'evokes @  <does>  ;  ( volatile)
: ;D   \ ;O  ;
: !   \ >+  \ >!  ;  ( common idiom)
: @   \ >+  \ >@  ;  ( ditto)
: (    \f (  ;  ( comments are useful!)

( This is a little bit subtle. We want access to `forth' words, which we
  want to COMPILE, and to `compiler' words, which we want to EXECUTE.)
: \   compiler -' if  forth -"find  huh?  compile,  ^  then  execute ;


( Assembler helpers.)
( Labels should have pc-relative `type'...)
( Signatures)
forth
: "sign   ( a #)  "here "+ swap  ( a to #)  dup "h +! ( allot)  cmove  ;
           ( for putting signature in kernel)

outside
: signature"      char " parse  "sign  ;
: sign"   \o signature"  ;  ( ?which?)

( Timestamping with creation date.)
: created-on   s" Created: " "sign   epoch time"  "sign  ;

( variable stamped  stamped off)


( Memory mismanagement)
forth
variable r    ( ram allocation pointer)
variable #u   ( user variable allocator)

: canonical!    is canonical  canonical ;
   ( reset the vector that resets to interpret state, and execute once)

outside
: ALLOT     r +!  ;  ( advance ram allocation pointer)
: RAM       r @   ;  ( next available ram)
: UALLOT   #u +!  ;  ( analogous to ram, allot)
: #USER    #u @   ;

( Switch to host forth.)
-: forth   \o {  ;
: host   [lit]  canonical!  ;

( Finish up after compiling.)
: ]target  \o host  ;

forth
-: outside   }  ;  ( start meta interpreter)
: meta   [lit]  canonical!  ;

: target[
   wipe  ( reset pointers, fill code with nops, word with zeroes)
   r off ( start ram allocation at 0)
   #u off  ( reset count of user area)
   meta  ;

: .bytes   5 u.r  ."  bytes."  ;

: report   ( word-seg)
   radix preserve
   cr ." Boot address is "  hex  |boot @ u.
   cr ." word-seg is "                   u.  decimal
   cr ." RAM usage: "  \o RAM    .bytes
   cr ." User area: "  \o #USER  .bytes  cr
   cr ." Signature: "  "here  dup .bytes
   cr ." Code     : "  |here  dup .bytes
   cr ." Words    : "  >here  dup .bytes
   cr ." Total    : "        + +  .bytes  ;

: timed   ( jiffies)
   jiffies  swap-   cr ." Compilation took "  u.  ." jiffies."  ;


( Phew!  That wasn't so bad...)

%%%

