( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Simple terminal that talks to serial port.)

( Keymaps)
-: ( self)  emit  0 ;  256 defarray+ term-keys
   ( nop)       ' 0    256 defarray+ term-esc-keys
-: drop ( ESC)  key term-esc-keys @execute ;  #ESC term-keys !
: esc:  -:  \f char  term-esc-keys ! ;

variable fdmax
: new-fd-set   create  here fd-reset ( sizeof)  aligned allot ;
new-fd-set fds

: te-select  ( fd0 .. fdn n)
   fds fd-reset drop  fdmax off
   for  fds over fd-set   fdmax @ max  fdmax !  next
   fdmax @ 1+  fds  0  0  0  select  drop  ;

( Serial input to screen, keyboard input to serial.)

: serial->screen
   fds tty-target fd-in-set? if
      tty-target reads  tty writes  typing type
   then ;

: keyboard->serial  ( - done?)
   fds tty fd-in-set? if
      tty reads  tty-target writes  key dup term-keys @execute ^
   then  0 ;

: te-stream
   begin  tty tty-target 2 te-select
      serial->screen  keyboard->serial  until  tty writes  ;

: <drain  begin  tty-target 1 te-select  serial->screen  until
   tty-target writes  ;

: te  ( terminal)
   115200 bps  ( default to hi speed)
   radix preserve  tty user-raw   tty on-exit cooked
   te-stream ;

( Special keys.)

( Echo ESC [ back to serial port, followed by the rest of the chars in the
  keyboard buffer. This makes AEB-1 autobauding - which works by sending
  `ESC [5n' - status query - and the Linux console answers with `ESC [0n' -
  terminal Ok. By echoing the ESC and [ that were eaten by our ESC-dispatch
  mechanism, we cause the AEB-1 autobaud feature to magically work.

  This only sort of "works". While the Linux console obliges - as do rxvt
  and xterm - the FreeBSD syscons driver does _not_. [I have no idea what
  the NetBSD wscons driver will do.] So rather than be at the mercy of an
  environment that we cannot control, we handle this ourselves, right
  here.)

: CSI  ( handle ESC [ )
  #ESC emit  char [ emit
  key dup char 5 = if
    key dup char n = if  ( got ESC [5n, so answer accordingly)
      nip  char 0
    then swap emit
  then emit ;

esc: [  ( vt10x)  CSI  0 ;

-: drop  #BS emit  0 ;   #DEL term-keys !  ( DEL sends BS)

esc: q  ( quit)  -1 ;

00 .if

( Test code.)
: kb  raw  begin  key  dup <ESC> xor while  u.  repeat  cooked  ;
: wr  ( a #)  tty-target -rot write drop  ;
: kb-test
   if  tty keyboard-in 1 read   tty keyboard-in 1 write  2drop  then  ;

: kb    fds fd-reset drop  fds tty fd-set  raw
   begin  te-select drop  kb-test  again  [

.then
