| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading Core flash programming

decimal

| Since we use the chunk size as a divisor, let's make sure it's non-zero
| even if we haven't started chatting (which is how it gets set).

256 /chunk !

| -------------------------------------------------------------------------
| Verifying that host and target images are the same.
| -------------------------------------------------------------------------
( Let's do verify first. That way flash-image can also verify.)

variable noisy-verify?  ( Whether to print differences.)
variable image-offset   ( offset to apply to host address to get target address)

| This sets up *two* pointers on the stack, ha (host address) and pad.
| Other implementations have used *one* pointer on the stack, and m for the
| other.

: setup-comparison  ( a u - ha pad u)
   push  pad over r@ t.read
   dup image+ tuck -  image-offset !
   pad pop ;

variable #grain   | granularity of verify comparisons
defer    grain@+  | fetch a grain and increment

( Words to choose the granularity that you want.)
: verify-1  1 #grain !  [']   c@+ is grain@+ ;  verify-1  ( default)
: verify-2  2 #grain !  ['] leh@+ is grain@+ ;
: verify-4  4 #grain !  ['] lew@+ is grain@+ ;

defer .diff-addr  ( a)

( By default, just print the entire differing address.)
-: ( a)  u. ;  is .diff-addr

| If there was a difference in the last "grain" (byte, halfword, word) that
| we compared, print the address. Combine the most recent difference (xor)
| with the running difference (diff), and return the new running difference
| (diff').

: ?differs  ( diff xor ha+ - diff')
   over if  noisy-verify? @ if
      #grain @ - image-offset @ +  dup .diff-addr  then then  drop  or ;

: verify-chunk  ( diff a u - diff' a+u)
   2dup + push
   setup-comparison
   #grain @ / for  grain@+ push  swap grain@+ push  xor  r@ ?differs  pop pop  next
   2drop pop ;

| Verify using the same chunk size that we used for flashing; the variable
| /chunk - which is set by the interact code based on a value received from
| the debug interface - tells us how big each chunk should be.

: verify-region  ( - diff)
   noisy-verify? @ if
      cr ." Verifying " .region space
   then
   0  ( diff)  region  /chunk @  /mod  ( r q)  swap push
   for  /chunk @  verify-chunk  next  pop
      =if  ( rem) verify-chunk  drop ^  then  2drop ;

defer verify-regions  ( - diff)

: do-verify  ( - diff)  h preserve  verify-regions ;

| Report whether region is empty, or, if non-empty, if it matched or
| mismatched host region.

: .region-message  ( z")
   warning-text  cr .region space  count type  normal-text ;

: report  ( diff - diff)
   region nip if  ( non-empty)
      =if  z" DIFFERS"  else  z" MATCHES"  then  .region-message ^
   then
   noisy-verify? @ if  ( only mention the EMPTY regions when being verbose)
      z" EMPTY"  .region-message
   then ;

: verify
   radix preserve hex  ( print mis-matched addresses in hex)
   noisy-verify? on  do-verify drop ;

| Called when we connect to the target to make sure that the host's and
| target's flash regions are the same.

-: noisy-verify? off  do-verify drop ;  is verify-quietly

| Here is a default version of verify-regions for targets with a single
| flash region.

( Verify and then report.)
-: flash verify-region  report ;  is verify-regions


| -------------------------------------------------------------------------
| Erasing and programing the flash
| -------------------------------------------------------------------------

: program-chunk  ( 'target len)
   cr ."    program "  over u.  dup u.
   over image+ -rot  ( buf 'target len)  t.program ;

defer erase-program-chunk  ( 'target len - 'target+len)

.ifdef /page  ( devices that erase based on a page *address*)

: erase-page  ( 'target)
   cr ."    erase   "  dup u.
   t.erase ;

| Before programming the *first* byte of a page, we erase the page.
: erase?  ( 'target - erase?)  [ /page 1- #] and  0= ;

: ?erase  ( 'target)
   dup erase? if  erase-page ^  then  drop ;

-: ( 'target len - 'target+len)
   2dup + push  over ?erase  program-chunk  pop ;  is erase-program-chunk

.then  ( def /page)

| We do the flash programming in chunks; the variable /chunk - which is set
| by the interact code based on a value received from the debug interface
| - tells us how big each chunk should be, but we have to be careful before
| using it for flashing: if the chunk is bigger than the smallest erase
| size, or does not divide the erase size evenly, we will miss some page
| boundaries, and we won't properly erase the chip.
|
| Most chips supported by muforth have a uniform page size and erase pages
| based on the address of the first byte of the page. These chips define
| /page to be the bytes per flash page, and this is the "smallest" erase
| size, because it's the *only* erase size!
|
| A number of STM32 chips use a page *index* rather than an *address* to
| specify which page to erase. To my knowledge, the first STM32 family to
| do this was the F4; in addition to using an index, the pages were
| different sizes! (Because they were much bigger than the usual STM32 page
| size (often 1 or 2 KiB) and because of their non-uniform sizes, ST called
| them *sectors* rather than *pages*).
|
| In muforth, the F4 chips do *not* define /page; instead, they define
| a function that takes a candidate address (a multiple of the chunk size)
| and tests it to see if it is the first byte of a (non-uniform) page
| (again, ST called these sectors). If it is, it returns true and the page
| index.
|
| Newer ST families - G0, G4, C0, and H5 (among others, but these are the
| ones that I have researched) use a page *index* for erasure, but the
| pages are, once again, of uniform size (often 2 or 8 KiB).
|
| If /page is defined, we can use it as the "smallest" erase size. If it
| isn't defined, do we require every chip family to define a smallest erase
| size?
|
| Of the chips supported by muforth, the only ones that do not define
| /page are made by ST, and since the smallest page size used by any of the
| "erase by index" families is 2 KiB, we can use that as the smallest erase
| size if /page is not defined.
|
| On every target, the chunk size *must be* carefully chosen to be equal to
| or smaller than the smallest erase size, and to divide it evenly. Before
| flashing anything we check to make sure!

: ?chunk-size
.ifdef /page /page  .else  2 Ki ( see above)  .then   | smallest erase size
   /chunk @ /mod ( r q)
   0= if  drop  error" Chunk size is larger than erase size."  ^  then
   if  error" Chunk size does not evenly divide erase size."  ^  then
   ( chunk size is ok) ;

: flash-region
   cr ." Programming " .region
   region  /chunk @  /mod  ( r q)  swap push
   for  /chunk @  erase-program-chunk  next  pop
      =if  ( rem) erase-program-chunk  drop ^  then  2drop ;

defer ?flash-check    now nope is ?flash-check  ( default is do nothing)
defer flash-regions
defer after-flashing  ( diff)

: flash-image
   h preserve  radix preserve hex  ( print messages in hex)
   ?chunk-size  ?flash-check  t.flash-begin  flash-regions  t.flash-end
   noisy-verify? on  verify-regions after-flashing ;

| Here is a default version of flash-regions for targets with a single
| flash region.

-: flash flash-region ;  is flash-regions  ( very simple!)

( And a default for the post-flashing, post-verify action.)
-: drop ;                is after-flashing  ( diff)


( XXX The following code probably needs to be moved. But whither?)

| The image reading and writing code expects a von Neumann memory model - a
| single address space. Let's only load this code if the ram and flash
| regions belong to the same aspace.

| Since not all targets are using the generic memory code that defines
| 'aspace, let's make sure to treat that case as well!

.ifdef 'aspace

: von-neumann?
   h preserve  ram 'aspace  flash 'aspace = ;

.else

( Not using the aspace code, so by definition the target is von Neumann!)
-1 constant von-neumann?

.then

von-neumann? .if

( Read an image from the target into the host image.)
: read-chunk  ( a u - a+u)
   | cr ." read-chunk "  over u.  dup u.
   2dup + push
   over image+ -rot  t.read
   pop ;

: read-region  ( a u)
   /chunk @  /mod  ( r q)  swap push  for  /chunk @  read-chunk  next
                                    pop  =if  ( rem) read-chunk  drop ^  then  2drop ;

| If last 16 bytes contain "muforth@" followed by a starting target
| address, use that address rather than @flash.

: image-origin  ( a u - a u start)
   2dup +  cell- cell-  @+ @ swap
   [ token muforth@ drop @ #] = if
      ( valid signature) [ -2 cells #] u+ ^ then
   drop  @flash ( default to @flash) ;

| Read image from target. Leaves user in ram or flash depending on target
| address.

: read-image  ( target len)
   2dup read-region  over choose-image  over +  ( start end)  region! ;

| Load image from a file. Leaves user in ram or flash depending on image
| start address. If image does not contain a start address, leaves user in
| flash.

: load-image
   token, r/o open-file? ?abort  ( fd)  dup read-file  ( a u)  rot close-file
   image-origin  dup choose-image
   2dup swap over +  ( start end)  region!
   ( a u start) image+ swap  cmove ;

| Save image to a file. Saves the current region. To make sure you are
| saving the flash region, do "flash save-image <name>".

: save-image
   token, create-file  ( fd)  push
   r@  region  swap image+ swap  write
   r@ " muforth@" write  r@ 'region cell+ ( 'origin) cell write ( start)
   pop close-file ;

.then  ( von-neumann)
