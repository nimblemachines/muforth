( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( memory.mu4 -- basic memory management for target compilers)

loading Common memory management

decimal
( 2002-nov-20. Randy and David started the job of splitting out code
  common to multiple architectures.)

( 2002-mar-27. Converted to work with muforth.)

( 13-sep-1998.  When the target and host have different word sizes, and
  possibly different endianesses, we really need special words for target
  dictionary work.  Chuck Moore's `space switching' will not work for us.)

( 14-sep-1998.  More changes!  We have separate spaces -- in the 80x86 world
  -- for code and `words'.  We need separate [but equal] dictionary words for
  the two spaces.)

( 24-sep-1998.  Changed to be hopefully simpler.  Instead of having the
  clients of this module worry about relative and absolute we're going to
  change things around a little.  Now `>here' and `|here' return relative
  rather than absolute values.  The `comma' words will work as advertised.
  The only thing that this changes, other than making for fewer `|#' and
  `>+' and other un-readables, is that >c! and >! must have their address
  converted to absolute, in code or word space.)

( 6-apr-1999. Modified for ARM. No segments! I like the `|' prefix, so I'll
  use that for target words. We only need one space for the ARM, so I got
  rid of `>' words. See the file target/ARM/NOTES for comments about
  endianness and other issues.)

( 26-apr-1999. Using the new dump in startup.d4. So we need to define arm|@
  and arm|c@ and init the deferred words.)

( 2004.jun.28 Here is our memory model. There are four separate spaces -
  code, data, name and ram - and each one has a size, and a target origin
  address; also, all but ram has a host-resident buffer containing a memory
  image of the space, and therefore also has a host address - the address
  of the first byte of this buffer. The naming convention is as follows,
  using code as an example:

  #code  is the size of the code space;
  @code  is the target origin address;
  'code  is the address of the buffer on the host.

  Of course, a given meta compiler doesn't have to use all 4 spaces, or use
  them in any particular way. It's just that we expect there to be several
  common cases, and we're defining them here for convenience.

  The ram space is for _initialized_ data. For targets that will refer to
  an uninitialized data space, and want tools for that, we define them
  here. Note that thes usages in a meta context seem different from that of
  a host muforth context, but really aren't. For the host muforth, C's text
  and data sections play the roles of code and data, and ram and name are
  both, at initial run time, uninitialized spaces.

  Before loading this code, the "client" meta compiler needs to define the
  following:

  #code #data #name #ram    [sizes]
  @code @data @name @ram    [target origin addresses])

( First define the image spaces. )
#code buffer 'code  ( is the address of buffer on host)
#data buffer 'data  ( ditto)
#name buffer 'name  ( ditto)

( Since we can't assume we're in a segmented mode, we need to define
  non-zero origins, esp. for ROMed code.)

: >code  [ 'code @code - #] + ;  ( convert target address to host image address)
: >data  [ 'data @data - #] + ;  ( ditto, for data space)
: >name  [ 'name @name - #] + ;  ( ditto, for name space)
( Since there is no host-side image of ram space, we don't have a conversion.)

( Dictionary operators.)
outside

variable h    @code \o h !  ( code pointer)
variable d    @data \o d !  ( data pointer)
variable n    @name \o n !  ( name pointer)
variable r     @ram \o r !  ( ram pointer)

: here      \o h @  ;  ( next available code space)
: allot     \o r +! ;  ( advance ram allocation pointer)
: ram       \o r @  ;  ( next available ram)

( Note: We don't define here how to allocate or use data or name space. We
  don't know how the particular client meta-compiler will use these spaces.
  We're just creating common infrastructure.

  Also: we could/should put in bounds checks - like ram > #ram.)


( Memory inspection operators. Eventually these will also be able to talk to
  the target, rather than only reading from the image.)
2variable limits  ( for checking mem accesses)
\ ram constant bogus   "deadc0de dup , ,
: inside  ( a - a)
   dup  \o limits 2@  within  if  |+ ^  then   3 and  \o bogus  +  ;

( Initialization.)
: wipe  o= 'code o= #code erase  o= 'data o= #data erase
        o= @code o= h !  o= @data o= d !  o= @ram o= r ! ;

: org   ( buffer len org)
   tuck tuck + ( buf org org org+len)  \o limits 2!  dup \o h !  -  dA !  ;

( `org' allows us to read or write an arbitrary buffer - a memory-mapped
  file, 'image, whatever.)

( That's it for now!)

