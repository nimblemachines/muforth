( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading Hitachi HD44780 LCD

__meta
hex

( For now, and for simplicity of wiring it up, let's assume we're
| connecting in 4-bit mode, which means d4 to d7 are connected, and d0 to
| d3 are left unconnected.
|
| E strobes control lines - RS and R/nW - on its rising edge, and data -
| read or write - on its falling edge. The datasheet says that at 5v the
| interface can run with a 500ns cycle time, but at 3v, it slows to 1000ns.
| Let's assume the slower cycle time.
|
| For future reference, here is the command set:
|
| RS  R/nW   D7  D6  D5  D4   D3  D2  D1  D0   Operation
| ==  ====   ===============================   =========
|  1    0    <data>                            Write data
|  1    1    <data>                            Read data
|  0    0    <command>                         Write command
|  0    1    BF  A6  A5  A4   A3  A2  A1  A0   Read address and busy flag
|
| Here are the commands, broken out into binary.
|
| D7  D6  D5  D4   D3  D2  D1  D0
| ===============================
|  0   0   0   0    0   0   0   1    Display clear and return home
|  0   0   0   0    0   0   1   *    Return home
|  0   0   0   0    0   1  ID   S    Entry mode set
|  0   0   0   0    1   D   C   B    Display on/off control
|  0   0   0   1   SC   RL  *   *    Cursor or display shift
|  0   0   1  DL    N   F   *   *    Function set
|  0   1  C5  C4   C3  C2  C1  C0    Set character generator address
|  1  A6  A5  A4   A3  A2  A1  A0    Set display memory address
|
| Legend:
|
|    * = don't care bit
|
|   ID = increment/decrement; 1 = increment
|    S = shift; 1 = shift
|
|    D = display;  1 = on
|    C = cursor;   1 = on
|    B = blinking; 1 = on
|
|   SC = shift or cursor; 1 = shift display, 0 = move cursor
|   RL = right/left; 1 = right
|
|   DL = data length; 1 = 8 bits, 0 = 4 bits
|    N = lines; 1 = 2 lines, 0 = 1 line
|    F = font; 1 = 5x11, 0 = 5x8
|
| For status read, BF = 1 means chip is busy with last command.
|
| Curiously, though, when reading or writing data, the internal address is
| updated _after_ BF returns to 0. So it's necessary to continue to poll
| until the address changes, before reading or writing another character.
| Weird.
|
| Display memory addresses are a bit odd too. There is a maximum of 40
| characters per line - 28 hex. The following addresses are in hex:
|
|  First line: 00 to 27
| Second line: 40 to 67
|
| According to the 44780U datasheet, if the power-up reset occurs
| successfully, the following commands are executed internally:
|
| 1. Display clear
|
| 2. Function set:
|     DL = 1; 8-bit interface
|      N = 0; 1 line display
|      F = 0; 5x8 character font
|
| 3. Display on/off control
|     D = 0; display off
|     C = 0; cursor off
|     B = 0; blink off
|
| 4. Entry mode set
|    ID = 1; increment by 1
|     S = 0; no shift
)


( Need to define these two primitives before loading the common driver
| code: cmd, data. Each takes a byte and strobes it in two nybbles to the
| display. RS is driven low for a command byte, and high for a data byte.)

: at     ( addr)  80 or  cmd ;  ( set an address in display RAM)
: cgram  ( addr)  40 or  cmd ;  ( set an address in character generator RAM)
: clear            1     cmd  5ms ;
: home             2     cmd  5ms ;
: cr    ( line#)  =if  drop 40  then  at ;

( String display.)
: count   ( a - a+1 u)  c@+ swap ;
: aligned   cell+ 1- [ cell negate #] and ;
: (")   ( - a u)  r>  count  2dup + aligned  >r ;

meta: cstring,  ( a u)  ( compile a counted string - with prefix length byte)
   dup c, ( count)  string,  0 align, ;

( For interactive use. Copies the string into target ram.)
meta: "   ( - a u)  ( leaves a target address!)
   h preserve  ram
   char " parse  here over 2push  string,  0 align,  2pop ;

compiler: "
   \t (") target-compile,  char " parse  cstring, ;

variable 'preprocess
: emit   'preprocess @execute  data ;

: type    ( a u)  for  count emit  next  drop ;

: +cursor   %0000_1110 cmd  ( display on; cursor on; blink off) ;
: -cursor   %0000_1100 cmd  ( display on; cursor off; blink off) ;

: 1line     %0010_0100 cmd  ( 4 bit interface; 1 line; 5x11 font) ;
: 2lines    %0010_1000 cmd  ( 4 bit interface; 2 lines; 5x8 font) ;

( Useful two line display using 5x8 character boxes. Characters with
| descenders look very ugly.)

: ugly
   2lines  ['] nope 'preprocess !
   clear ;

: lcd-init
   lcd-port-init  ( implicitly sets E, RS, and R/nW to 0)
   %0011_0000  dup wr4 5ms  dup wr4 5ms  wr4 100us  ( do power-up init; see table 23 in datasheet)
   %0010_0000 wr4  ( 4 bit interface)  100us
   ugly  +cursor ( display and cursor on) ;

: in?  ( char a u - f)  ( if char in string, return true)
   over + swap  do  dup i c@ = if
      ( found, return true)  drop -1 undo^  then
   loop  drop 0 ( not found, return false) ;

: +descender  80 + ;  ( Convert an ASCII character to its descender version)
: ?descender  ( char - char')  dup  " gjpqy" in?  if  +descender  then ;

( Set a one line mode with room for descenders, and set up emit to choose
| the descender versions of g j p q and y.
|
| Cf ugly, above.)

: fancy
  1line  ['] ?descender 'preprocess !
  clear ;

( Examples.)

( text consumes an LCD position from the stack, creates a new named target
| word, consumes the next token as a delimiter character, and then parses
| the following string into the body of the newly-created target word. When
| executed, the new word jumps to the LCD location and prints itself.
|
| See examples at the end of the file.)

meta: text
   create  ( at)  c,  \f char parse  cstring,
   does>  count at  count type ;

comment %%silly%%  ( change "comment" to "uncomment" to include this code)
|
|  0 text hi     " Hallo, Reginald! "
| 4c text beer   ) beer)
| 4c text beef   } beef}
| 40 text where  " Where's the beef? "
|
| %%silly%%
