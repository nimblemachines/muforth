| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading AVR memory

decimal

( Define the basics of the target's memory.)
 2 constant bytes/cell
         -d little-endian

ld target/common/memory.mu4   ( generic memory image support)

| Three memory aspaces: flash, data (ram + i/o), eeprom.
|
| Currently every aspace only has one memory image. We use the default of
| "drop" as our choose-image: since there is only one image per aspace,
| choose-image is a no-op.

16 make-aspace  ( flash)
#flash make-image
   dup make-region flash
       make-region boot

| Since ram starts at a non-zero offset into data space - specifically, at
| @ram - we want to make sure that the ram region - from @ram to @ram #ram +
| - fits into the ram image, which needs to be a power of 2 in size.
|
| The easiest way to do this is to take the larger of @ram and #ram - we
| assume they are both powers of 2! - and double it.

16 make-aspace  ( data: ram + i/o)
@ram #ram max 2* make-image  ( ensure that [@ram #ram +] is within the ram image)
   make-region ram

16 make-aspace  ( eeprom)
#eeprom make-image
   make-region eeprom


| Using the bootloader space in AVR parts is awkward. Each part has a
| *maximum* boot space, which we define as #boot in the equates. By setting
| bootsz to a value betwee 0 and 3 we can make the boot space *smaller* by
| shifting it right by bootsz. We put bootsz into the fuses to tell the chip
| how big a boot space we want.
|
| The trouble is, what if know how much space we need ahead of time? Then
| we need to calculate bootsz based on #boot and our *desired* boot space
| size.

.ifdef #boot
   .def #boot-desired  .ndef bootsz  .and .if
      #boot log_2 drop ( exp)  #boot-desired log_2 drop ( exp) -
      3 min constant bootsz
   .then
   ( calculate start of boot space)
   #flash  #boot  .ifdef bootsz  bootsz >>  .then  -  constant @boot
.else
   warn"
The selected device doesn't support a separate bootloader memory space.
Setting @boot to the end of flash."
   #flash  constant @boot  ( not used - set it to past end of flash)
.then


( Compatibility shims for existing AVR code.)
: +a  ( a1 a2 - sum)  +  wrap ;  ( add and wrap to image boundary)
: image-  ( host - target)  'image -  wrap ;

| Quick hack to generate Intel hex files for flashing via avrdude or
| similar command-line tools. Using the shell, redirect the output of
| muforth to a file.

: ihex-region   region  over image+ -rot  ihwchunks ;
: gen-ihex   flash ihex-region  boot ihex-region  ihwend ;
