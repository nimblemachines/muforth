( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading AVR memory image

( Space for compiling into. AVRs can get big; for now let's limit ourselves
  to 128k address space. Since the program space is word-addressed, this
  means 64k words.

  XXX: We should really define this in a device/xxx file that gets loaded
  _before_ this one.)

( Memory images should be stored in the dictionary like strings: prefixed
  by their length. When we push an image, we push the address of its first
  byte, but the previous cell countains the count, if we want to do bounds
  checking or address wrapping.)

variable image  ( image buffer pointer; points to either flash- or eeprom-image)

: make-image  create  ( #bytes)  aligned  dup ,  allot
              does>  cell+ ( skip count)  image ! ;

( Two real images)
128 Ki make-image  flash-image
  4 Ki make-image  eeprom-image

( And two dummy images)
 8 make-image  ram-image   ( to capture accidental c, or , to ram)
16 make-image  data-image  ( so "da" when not chatting will show something)


: #image  image @  cell- @  ( get byte count) ;
: 'image  image @           ( get address) ;

: wrap   #image 1-  and ;
: +a  ( a1 a2 - sum)  +  wrap ;  ( add and wrap to image boundary)

: image+  ( target - host)  wrap  'image + ;
: image-  ( host - target)        'image -  wrap ;


( DEBUG: Define show-comma to show code as it's compiled.)
.ifdef show-comma
: .debug-comma  dup  .h8_ ;
.else
: .debug-comma ;
.then

( DEBUG: Define show-c! to show writes to image.)
.ifdef show-c!
: .debug-c!   cr  ( byte addr)  2dup .hcell_  .h8 ;
: .debug-w!   cr  ( word addr)  2dup .hcell_  .hcell ;
.else
: .debug-c! ;
: .debug-w! ;
.then

: image-c@             image+ c@ ;
: image-c!  .debug-c!  image+ c! ;

( AVRs are little-endian.)
: image-@  ( a - w)           image+  leh@ ;
: image-!  ( w a)  .debug-w!  image+  leh! ;


defer >prog ( dump program memory)
defer >data ( dump data memory)
defer >ee   ( dump eeprom memory)

: log2  ( n - #bits)
   0 swap  begin  dup 1 and 0= while  1 u+  u2/  repeat  drop ;

: addrbits  ( size)  log2  |addr ! ;

-: ( buf a u)  swap image+ -rot  cmove ;
: >image-read   [ #]  is |read ;  ( read from current image buffer)

: >image-prog   >image-read   flash-image   #flash addrbits ;
: >image-data   >image-read    data-image  #ram 2* addrbits ;  ( #ram 100 +)
: >image-ee     >image-read  eeprom-image  #eeprom addrbits ;

: >image
   ['] leh@  is |cell@
              2 |cell !  ( size of cell in bytes)

   ['] >image-prog  is >prog
   ['] >image-data  is >data
   ['] >image-ee    is >ee

   >prog  ( default) ;

>image

( Dictionary operators.)
variable 'h   ( image dictionary pointer pointer; points to one of:)
   2variable 'ram     ( ram pointer, origin)
   2variable 'app     ( application flash pointer, origin)
   2variable 'boot    ( bootloader flash pointer, origin)
   2variable 'ee      ( eeprom pointer, origin)
   2variable 'sig     ( signature pointer, origin)

: ram     'ram     'h !   ram-image    ;
: app     'app     'h !   flash-image  ;
: boot    'boot    'h !   flash-image  ;
: signature  'sig  'h !   flash-image  ;
: eeprom  'ee      'h !   eeprom-image ;

: h   'h @ ;  ( get _address_ of current dictionary pointer)


( XXX A better name for this? I want origin to return the origin of a
  space, not set the current space pointer to something...)

: org    ( a) ( set dict pointer)  h ! ;

meta
( XXX alignment policy? Should , always align? Should allot? Should we even
  have two spaces? We will never, in this architecture, want to , or c,
  into ram; we will only need "ram here" and "ram allot".)

: here    ( - a)  h        @ ;
: origin  ( - a)  h cell+  @ ;

: aligned  1+  -2 and ;
: align    \m here \m aligned  org ;
: allot ( n)    h +! ;
: c,    ( ch)   .debug-comma  \m here image-c!  1 \m allot ;
: ,     ( w)    ( \m align)  >hilo  \m c, ( lo)  \m c, ( hi) ;

forth
( return the origin & number of bytes in current region)
: region  ( - a u)  h 2@  ( origin ptr)  over - ;

( Initialization.)
: erase  'image #image "ff fill ;  ( erases _current_ image)
: wipe
   ram-image erase
   data-image  "d0d0_dead_d0d0_dead dup  'image 2!
   eeprom-image erase
   flash-image erase ;  ( leaves flash-image as _current_ image)

: ram!      ( ram-origin)  dup 'ram   2!  ( set ptr and origin to origin) ;
: app!      ( app-origin)  dup 'app   2!  ( set ptr and origin to origin) ;
: boot!    ( boot-origin)  dup 'boot  2!  ( set ptr and origin to origin) ;
: ee!    ( eeprom-origin)  dup 'ee    2!  ( set ptr and origin to origin) ;
: sig!      ( sig-origin)  dup 'sig   2!  ( set ptr and origin to origin) ;
