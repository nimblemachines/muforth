| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading AVR serial (uart) chat (core)

__meta
hex

| comment register-use
|
|   r0/r1              is used for writing flash (via SPM instruction)
|   r26/27 - aka x - is used for status and data bytes
|   r30/31 - aka z - is used to point to memory
|
|   These are registers that are considered "scratch" by the meta-compiler's
|   conventions.
|
| register-use

.ifdef megax4  ( megax4 device: 164, 324, 644, or 1284)
   ( Let's use UART1 for chat, leaving UART0 for the application.)
   aka UDR1    equ UDR
   aka UBRR1H  equ UBRH
   aka UBRR1L  equ UBRL
   aka UCSR1A  equ UCSRA
   aka UCSR1B  equ UCSRB
.else  ( megax8 device: 88, 168, or 328)
   ( We only have UART0, so use it for chat.)
   aka UDR0    equ UDR
   aka UBRR0H  equ UBRH
   aka UBRR0L  equ UBRL
   aka UCSR0A  equ UCSRA
   aka UCSR0B  equ UCSRB
.then

| If we use U2X mode - which divides f_cpu by 8 rather than 16 - we can get
| close enough that 115,200 bps will work with a 16M f_cpu.
|
| The 8M RC internal oscillator doesn't seem to be accurate enough to
| manage 57,600 bps, however, so in that case we'll settle for 38,400 bps,
| which has a divisor with very little error (0.16%).
|
| In U2X mode, Baud rate divisor = f_cpu/bps/8 - 1.

label serial-init
.ifdef cksel
   ( assume 16M clock)           #16,000,000  #115,200
.else
   ( using internal 8M RC clock)  #8,000,000   #38,400
.then
   /  4 /  1+ 2/ ( round)  1- xl ldi  UBRL xl out
   ( UBRH resets to zero; we can just leave it alone)
   %0000_0010 xl ldi  UCSRA xl out  ( enable U2X mode)
   %0001_1000 xl ldi  UCSRB xl out  ( enable RX and TX)
   ( chip defaults to 8bits, 1stop, no parity at reset)
   ret  ;c

( Host uses send and recv. Let's do the same here.)

| For both recv-byte and send-byte we want to yield while we are waiting
| for a byte to go out or to come in.

( Save and restore chat registers around the call to yield.)
label chat-yield
   z pushw  yield rcall  z popw  ret  ;c

( Could clobber xh.)
label recv-command-byte  ( For chat dispatch loop.)
label recv-byte
   ( Wait for RXC - receive complete)
   begin  chat-yield rcall  UCSRA xl in  7 ( RXC) xl sbrs  again
   UDR xl in  ret  ;c

( Could clobber xh.)
label send-byte
   xl push  ( XXX maybe should be saved by yield?)
   ( Wait for UDRE - data register empty)
   begin  chat-yield rcall  UCSRA xl in  5 ( UDRE) xl sbrs  again
   xl pop  UDR xl out  ret  ;c

label recv-word
   recv-byte rcall  xl push
   recv-byte rcall  xl xh mov  xl pop  ret  ;c

label send-word
   xh push  ( send-byte might clobber it)
   send-byte rcall  xl pop  send-byte rjmp  ;c

( EEPROM read/write.)
ld target/AVR/eeprom.mu4

( Flash self-programming support.)
ld target/AVR/flash-self-prog.mu4

( Command routines.)
label read-data-cmd  ( read a byte from data space)
   z+ xl ld  send-byte rjmp  ;c

label read-eeprom-cmd  ( read a byte from eeprom space)
   read-eeprom-byte rcall  1 z adiw  send-byte rjmp  ;c

| NOTE: We have to push and pop g0 around the call to send-byte, which calls
| yield! Otherwise g0 could be clobbered by another task.

label read-flash-cmd  ( streaming read from flash space)
   recv-byte rcall  xl g0 mov
   begin  pmz+ xl ld  g0 push  send-byte rcall  g0 pop  g0 dec  0= until
   ret  ;c

label write-data-cmd
   recv-byte rcall  z+ xl st  ret  ;c

| The following two commands take several ms to complete; each one sends a
| byte to the host to signal completion.

label write-eeprom-cmd
   recv-byte rcall  write-eeprom-byte rcall
   1 z adiw  send-byte rjmp  ;c

| Recv a word and a byte command from host; write word and cmd to flash;
| return contents of SPMCSR as flash status.

label write-flash-cmd
   recv-word rcall  x pushw  recv-byte rcall ( cmd)  0 popw  do-spm rcall
   2 z adiw  SPMCSR xl in  send-byte rjmp  ;c

( Load chat entry and command loop.)
ld target/AVR/chat-loop.mu4
