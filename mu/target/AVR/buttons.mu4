| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading AVR debounced buttons example

| Testing out using multiple samples of the pin state to generate debounced
| button events.

| We are going to use PA0 and PA1 as our two button inputs. We turn the
| pullups on, and assume that our switch pulls them to ground. The built-in
| pullups are about 35Kohm. Maybe a larger external resistor will help. We'll
| see.
|
| The timer task will wake our button tasks at intervals; each button task
| accumulates pin states until it gets 8 consecutive matching values. It will
| first wait for 8 consecutive zeros (waiting for switch to close), and then
| wait for 8 consecutive ones (waiting for switch to open).

__meta
hex

( Count of times each button has been pushed.)
1 var #button0
1 var #button1

label button-incr
   x@ g0 ld  g0 inc  x@ g0 st  ( incr button push count)  ret  ;c

( The following check exists because Port A only exists on megax4 devices.)
.equates. .contains PINA .if

| Wait for one wakeup, then make room in h1 for another pin sample.
label make-room
   h1 push  nap rcall  h1 pop  h1 lsl  ret  ;c

label sample-button0
   make-room rcall  0 PINA sbic  1 h1 ori  ( sample button input)  ret  ;c

label sample-button1
   make-room rcall  1 PINA sbic  1 h1 ori  ( sample button input)  ret  ;c

| The wake frequency for the button tasks is set in the timer interrupt;
| see target/AVR/heart.mu4.

label button0-task
   g0 clr  #button0 g0 sts  ( clear button count)
   0 PORTA sbi  ( enable pullup on PA0)
   1 DDRB sbi  ( PB1 output)
   begin
      1 PORTB sbi  ( LED PB1 off)
      0ff h1 ldi  ( this is our collection of pin samples)
      begin  sample-button0 rcall  0= until  ( until 8 consecutive zeros)
      1 PORTB cbi  ( LED PB1 on)
      #button0 x ldiw  button-incr rcall  ( incr pushed count)
      ( h1 is zero)
      begin  sample-button0 rcall  0ff h1 cpi  0= until  ( until 8 consecutive ones)
   again  ;c

label button1-task
   g0 clr  #button1 g0 sts  ( clear button count)
   1 PORTA sbi  ( enable pullup on PA1)
   2 DDRB sbi  ( PB2 output)
   begin
      2 PORTB sbi  ( LED PB2 off)
      0ff h1 ldi  ( this is our collection of pin samples)
      begin  sample-button1 rcall  0= until  ( until 8 consecutive zeros)
      2 PORTB cbi  ( LED PB2 on)
      #button1 x ldiw  button-incr rcall  ( incr pushed count)
      ( h1 is zero)
      begin  sample-button1 rcall  0ff h1 cpi  0= until  ( until 8 consecutive ones)
   again  ;c

.else

| Fake it. We don't have a PORTA. Have the button tasks increment their
| counts and then go back to sleep after the timer wakes them.

label button0-task
   g0 clr  #button0 g0 sts  ( clear button count)
   begin  nap rcall  #button0 x ldiw  button-incr rcall  again  ;c

label button1-task
   g0 clr  #button1 g0 sts  ( clear button count)
   begin  nap rcall  #button1 x ldiw  button-incr rcall  again  ;c

.then  ( PINA exists)
