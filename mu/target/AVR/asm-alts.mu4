( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Make it easy to use -- in both the assembler and disassembler -- both the
  "factory" -- ie, manufacturer -- and alternate opcode names.)

( In the assembler, define opcodes with opname rather than create or
  constant.)

( Compile factory ops with opname)
: opname  ( const)  constant  0 , ( alt pointer) ;

( Compile alternate ops with alt, directly after the factory name -- alt
  names find the factory definition by following their link pointer.)
: >factory  ( 'alt-code - 'factory-code)  >link @  link> ;
: factory>  ( 'factory-code - 'alt-code)  >body  cell+  @ ;
: alt
   last-created @  ip> ( 'factory-code)  >body cell+  ( alt slot)
   create  here body>  ( 'alt-code)  swap !
   does>  body> >factory  execute ;

( In the disassembler, use .op to print the following opcode name. The
  variable alt-names specifies use of the alternate, if there is one.)

variable alt-names
: (.op)  pop @+ push  ( fetch following cfa)
   alt-names @ if  factory>  then  >name type space ;

compiler
: .op   compile (.op)  .assembler. \chain  ( should be factory op) ;

forth
