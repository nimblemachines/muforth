| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading AVR register context trampoline

__meta
hex

| Return to chat after pushing registers.
label register-return  ( - w x z h1:sreg)
   w dpushw  x dpushw  z dpushw
   SREG h0 in  ( get SREG)  h0 dpushw  ( pushes h1 too: could be useful)
   y z movw  ( dp -> mem ptr)  ret  ;c

label register-trampoline  ( w x z ra)
   ( push continuation, big endian!)
   register-return >ra h0 ldiw  h0 pushw

   z y movw  ( mem ptr -> dp)
   g0 dpopw  ( PC in ra form)
   g0 pushw  ( push onto machine's return stack; this is the code to call)
   z dpopw  x dpopw  w dpopw  ( pop register context)
   ret ( pop pushed ra and execute! it will return to register-return)  ;c

__host

: .sreg  .b8  2sp ;

-- 005f reg  SREG     | I       T       H       S       V       N       Z       C
: .rxregs  ( h1:sreg)
   radix preserve  >hilo  ( h1 sreg)
   cr  ." ITHS_VNZC  H1    DP"
       (  0000_1111  3a  0123)
   cr     .sreg  .h8 2sp  dp@ .w ;

| rx is short for "remote execution"
: rx  ( w x z addr - w' x' z')  ( execute target non-forth word)
   \m >ra  stack>  \l register-trampoline runwait  stack<
   .rxregs ;


.ifdef testing

( This code was useful when ironing out the bugs!)

__meta

label test-1   c0de z ldiw  ret  ;c
label test-2   d0d0 z ldiw  ret  ;c
label test-3   beef z ldiw  ret  ;c

label test-2-trampoline
   ( push continuation, big endian!)
   test-2 >ra h0 ldiw  h0 pushw  ret  ;c

| Z has PC in ra form. Testing pushing it onto machine's R stack and
| "returning" to it as a way to call code.

label test-3-trampoline
   z pushw  ( push onto machine's return stack; this is the code to call)
   ret ( pop pushed PC and execute!)  ;c

__host

: call  runwait .regs ;

( Test three ways of calling a piece of code.)
: xx1  \l test-1 call ;
: xx2  \l test-2-trampoline call ;
: xx3  \l test-3 \m >ra \m sp!  \l test-3-trampoline call ;

.then
