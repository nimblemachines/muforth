| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading AVR meta-compiler (chains)

forth  decimal

( Metacompiler vocabs)

| .meta. is where meta-compiler specific words go - esp if they would
| otherwise shadow a host word of the same name. @ is a good example - the
| meta version writes into the target image, using a local, image-relative
| address. .meta. contains special versions of : to compile macros (though
| I'm thinking of deprecating or removing this) and to define new defining
| words during target compilation. It will also, once the kernel starts
| loading, contain a : that compiles target colon words!
|
| .assembler. contains definitions of instructions, registers, addressing
| modes, and words to build control structures. It is searched when
| building code words, and also when compiling macros.
|
| .equates. contains chip equates and any other constants that should be
| visible to the target compiler. When used interactively, or in the
| assembler, these push their value. When used in a target colon word, these
| compile literals.
|
| Labels - like temporary locations defined in assembler that do not
| represent target words - are in .meta., and are invisible to the target
| compiler.
|
| Also in .meta. are a handful of variables that refer to key pieces of
| target infrastructure that won't get defined until the kernel is loaded.
| Having these as forward-reference variables allows us to write the
| metacompiler using variable references; compilation of the kernel will
| patch these with actual addresses of target code.
|
| .meta-compiler. is like .compiler. but for the -target- colon compiler.
| This will contain target versions of [ ; if then begin while etc. It is
| sealed since we don't want to get any host words by accident.

sealed .meta.           ( the `meta' version of .forth.)
sealed .meta-compiler.  ( the `meta' version of .compiler.)
sealed .assembler.      ( the host-resident target assembler)
sealed .equates.        ( chip equates and other constants for target)
sealed .labels.         ( labels of assembly code)
sealed .lex.            ( comments and conditional interpretation)
sealed .target.         ( the target words - like `forth' on the host)

: meta                        .meta. definitions ;
: meta-compiler      .meta-compiler. definitions ;
: assembler              .assembler. definitions ;
: equates                  .equates. definitions ;
: lex                          .lex. definitions ;
: target                    .target. definitions ;

compiler
: \m   ( compile from meta)                        .meta. \chain ;
: \mc  ( compile from meta-compiler)      .meta-compiler. \chain ;
: \a   ( compile from assembler)              .assembler. \chain ;
: \eq  ( compile from equates)                  .equates. \chain ;
: \l   ( compile from labels)                    .labels. \chain ;
: \t   ( compile from target)                    .target. \chain ;
forth

meta
: \f               ' execute ;  ( execute a forth word from meta)
forth
: \a  .assembler. chain' execute ;  ( execute an assembler word from forth)
: \m       .meta. chain' execute ;  ( execute a meta word from forth)
: \eq   .equates. chain' execute ;  ( execute an equates word from forth)

lex
( Comments are nice to have!)
: (     \ ( ;
: |    \ | ;

( And conditional intepretation is nice to have too.)
: .if     \ .if ;
: .else   \ .else ;
: .then   \ .then ;

: .def     \ .def ;
: .ndef    \ .ndef ;
: .ifdef   \ .ifdef ;
: .ifndef  \ .ifndef ;
: .contains  \ .contains ;

( For combining conditional tests.)
: .or   .or ;
: .and  .and ;
: .not  .not ;
forth

| Given a constant value, find the host dictionary entry, if one exists,
| that contains a constant that matches it. It does *not* search through
| muchain connections; if it sees a muchain, it returns "not found".
|
| This is useful for printing out equates, labels, and such.

: find-constant  ( value chain - 0 | 'link -1)
   begin
      @ =while
      dup muchain? if  2drop 0 ^  then  ( not found)
      dup  hidden? 0= if
         2dup link> >body @  = if  ( found it!)  nip -1 ^  then
      then
   repeat  2drop 0  ( not found) ;

| Similar to find-constant, but searches *through* muchain links, rather
| than stopping when it sees a muchain.

: find-constant-chained  ( value chain - 0 | 'link -1)
   begin
      @ =while
      dup  hidden? 0= if  ( skip muchain and hidden entries)
         2dup link> >body @  = if  ( found it!)  nip -1 ^  then
      then
   repeat  2drop 0  ( not found) ;
