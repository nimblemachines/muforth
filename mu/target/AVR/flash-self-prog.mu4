| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading AVR flash self-programming support

| NOTE: Both erase page and program page leave RWWSB set. In order to read
| the RWW section - app space - RWWSRE needs to be set. But this only needs
| to be done after a series of pages have been erased and programmed, not in
| between pages.
|
| The temporary buffer will auto-erase after a Page Write operation or by
| writing the RWWSRE bit in SPMCSR.

| Bits in SPMCSR:
| SPMIE   RWWSB   SIGRD   RWWSRE   BLBSET   PGWRT   PGERS   SPMEN
|   7       6       5       4        3        2       1       0 )

__meta

| Enter with flash command in xl, address in z, word to write in r1:r0.
| Clobbers xh.

| NOTE: only 4 cycles can elapse between writing to SPMCSR and executing
| the spm instruction. Hence, interrupts are disabled while those two
| instructions execute.

label do-spm
   SREG xh in  cli  SPMCSR xl out  spm  SREG xh out
label wait-for-spmen
   begin  SPMCSR xh in  0 xh sbrc  again  ( wait for SPMEN to clear)
   ret  ;c


.ifdef flash-read-special

| By setting SIGRD and SPMEN, and then executing LPM, it's possible to read
| out the signature (device id) bytes. They are in a strange order:
|
| 0000  Signature byte 1
| 0001  RC osc calibration
| 0002  Signature byte 2
| 0003  **Undefined**
| 0004  Signature byte 3
|
| Likewise, by setting BLBSET and SPMEN, and then executing LPM, it's
| possible to read the lock and fuse bytes. Again, the order is strange:
|
| 0000  L fuse
| 0001  lock bits
| 0002  E fuse
| 0003  H fuse
|
| With BLBSET and SPMEN set, executing SPM can write to the lock bits, but
| not the fuses.


( Enter with flash command in xl, address in z. Clobbers xh.)

| NOTE: As with do-spm above, only 4 cycles can elapse between writing to
| SPMCSR and executing the lpm (pmz+ <dest> ld) instruction. Hence,
| interrupts are disabled while those two instructions execute.

| XXX Do we need to wait for SPMEN to clear when *reading* as well as
| writing?

label do-lpm-special
   SREG xh in  cli  SPMCSR xl out  pmz+ xl ld ( LPM)  SREG xh out
   wait-for-spmen rjmp  ;c

.then
