| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading AVR I2C chat (host) via STM32

| The following is code to talk to a simple "debug stub" running on an
| Atmel AVR. The chip is addressed using a station address. Note that I2C
| station addresses are sent shifted left, with LSB = 0.

( You can find the debug stub's code in target/AVR/chat-iic-core.mu4)

| This code uses code running on an STM32 Discovery board as an
| interlocutor, converting packets of data into I2C exchanges with a slave
| device.
|
| *That* code is in target/ARM/stm32/atmel-spi-programming-core.mu4, and
| our interface to it is in
| target/ARM/stm32/atmel-spi-programming-host.mu4.

hex

| Taking inspiration from the wildly successful HC08 serial chat protocol.
|
| Responds to the following commands. NOTE: these are hex values!
|
| 00 - 0f  idle        - these command bytes are ignored
| 1c - ff  idle        - these command bytes are ignored
|
| 10  version-addr     - get the address of the version commit
| 11  set-addr         - set memory address
| 12  get-addr         - get memory address
| 13  run              - push mem addr as ra; set mem addr; execute
|
| 14  read-flash       - read one byte of flash, incr Z
| 15  read-data        - read one byte of ram/data space, incr Z
| 16  read-eeprom      - read one byte of xram, incr Z
|
| 17  write-flash      - write a word to flash page buffer, incr Z by 2
| 18  write-data       - write one byte to ram/data space, incr Z
| 19  write-eeprom     - write one byte to eeprom, incr Z
|
| 1a  app-start
| 1b  app-stop


variable station  0d0 station !  ( default to master for testing)

| The primitive we have available is simple: i2c-send-recv. It will send
| #send characters from a buffer and then turn around and receive
| #recv characters into that same buffer.
|
| The send and receive counts, a NACK flag, and a station address, are
| contained in a separate command buffer.
|
| The memory layout on the STM32 for these buffers is in two files:
|
|   - ARM/stm32/atmel-spi-programming-core.mu4 defines the *internal*
|     implementation, as seen by the code running *on* the STM32;
|
|   - ARM/stm32/atmel-spi-programming-host.mu4 defines the *external*
|     interface, as seen by this file.
|
| The data buffer and the command buffers are passed to and from the STM32
| via st.read and st.write - reads and writes via the ST-LINK interface.

( Let's use our "packet" convention.)
: <pkt   pad m ! ;
: #pkt   ( - #pkt)  m @ pad - ;  ( size of packet buffer)

: >b   m& ;
: >w   >hilo >b >b ;

: b>   m* ;
: w>   b> b> lohi> ;

( Include the contents of a buffer in the packet.)
: >buf   ( buf u)
   tuck  m @ ( dest)  swap cmove  m +! ;

variable cmd  ( byte counts and station address)

| NOTE: Sending and receiving zero-length USB packets can cause BSOD
| *crashes* on Windows when using WSL! This is fixed in recent (> 3.1.0)
| versions of usbipd-win, but to be safe - and more efficient - let's make
| sure to only send and receive non-empty USB packets!

( Send data to stm32, but only if len is non-zero)
: >data  ( len)  ?if  pad data rot  st.write  then ;

( Read data from stm32, but only if len is non-zero)
: data>  ( len)  ?if  pad data rot  st.read  then ;

: pkt>   ( #recv)
   #pkt dup >data             ( copy packet data to stm32)

   ( set up station, #send, #recv)
   cmd m !  station @ >b  ( #pkt) >b  dup ( #recv) >b

   cmd serial-cmd 4 st.write  ( copy to stm32)

   4 begin  ( try up to 4 times if we get NACKed)
      i2c.send-recv              ( tell stm32 to transact on I2C bus)
      cmd serial-cmd 4 st.read   ( read command info - for nack)
      cmd 3 + c@ ( nack)
   while
      0 #5,000,000 nanosleep  ( delay 5ms - chip is probably busy erasing
                                or programming flash)
      1- dup 0=
   until
      ( NACKed all 4 times)
      2drop
      error" There was a problem talking to the chip over I2C."
   then  drop ( #tries)
   ( Success!)
   ( #recv) data>             ( read packet data from stm32)
   <pkt ( get ready to parse response, if any) ;

: ix.cmd  ( cmd)  <pkt  >b  0 pkt> ;

: ix.get-version
   10 ix.cmd  <pkt  14 >b  4 pkt>  b> b> b> b> 0123> ;

: ix.set-addr     ( a)     <pkt  11 >b  >w  0 pkt> ;
: ix.get-addr     ( - a)   <pkt  12 >b      2 pkt>  w> ;
: ix.run          ( dp)    <pkt  13 >b  >w  0 pkt> ;

: ix.app-start   1a ix.cmd ;
: ix.app-stop    1b ix.cmd ;

: ix.read-buf  ( buf a u cmd)
   rot ix.set-addr
   <pkt  >b ( cmd)  dup pkt>  ( buf u)
   pad -rot cmove ;

( For writing to data and eeprom; cmd contains write+space.)
: ix.write-buf  ( buf a u cmd)
   rot ix.set-addr
   <pkt  >b ( cmd)  >buf  0 pkt> ;

( Flash support.)
( Helper for copying bytes from a data buffer into the packet buffer.)
: @>b  ( a - a+1)  c@+ swap  >b ;

: ix.write-page  ( buf a u)
   swap ix.set-addr
   <pkt  17 >b
         1+ 2/ for  @>b @>b  ( copy word)  1 ( SELFPRGEN) >b  next  drop  0 pkt> ;

: ix.flash-command  ( a fcmd)
   swap ix.set-addr  <pkt  17 >b  0 >w ( dummy)  >b  0 pkt> ;

: ix.erase-page    ( a)      3 ( PGERS  + SELFPRGEN) ix.flash-command ;
: ix.program-page  ( a)      5 ( PGWRT  + SELFPRGEN) ix.flash-command ;

: ix.flash-enable
   0 ( beginning of flash)  11 ( RWWSRE + SELFPRGEN) ix.flash-command ;


| -------------------------------------------------------------------------
| Chat interface
| -------------------------------------------------------------------------
: i.hello  ( - #chunk)
   cr ." Chat firmware version "  ix.get-version
   radix preserve  hex  sep preserve  -sep   <# 4# 4# #> type
   #128 ;

| NOTE: To execute code on the target, we pass two values to chat: a PC in
| return address (ra) form, and data stack pointer (DP). Generally, the PC
| will point to a trampoline that will marshal and unmarshal argument
| values, one of which will be a pointer to *another* piece of code to
| execute. After *that* code executes, it returns to the trampoline, which
| (possibly) pushes values onto the data stack, and then returns to chat.
|
| It sounds complicated, but moving the trampoline *out* of chat and into
| the user's code makes the chat code simpler and shorter, and
| - importantly - makes the process of executing target code much more
| flexible, since the calling conventions, stack pointer choices, etc, are
| no longer baked into the chat code. Instead, each type of code can have
| a trampoline perfectly suited to it.
|
| As a concrete example, when calling threaded Forth code, the data stack
| pointer (DP) is usually the *machine* stack pointer (MP), and the return
| stack pointer (RP) is a generic pointer register.
|
| When calling assembler or non-threaded Forth code, these are reversed!
|
| Having separate trampolines for each keeps these details out of the chat
| code.

: i.run  ( pc dp)
   swap \m >ra ix.set-addr  ( set mem addr to PC in ra form)
   ix.run  ( set mem addr to DP and execute code) ;

| Get the current value of the mem address pointer; this is our data stack
| pointer (DP).

: i.get-status  ( - dp)  ix.get-addr ;

( Interact code handles which memory space we are reading.)
: i.read-space     ( buf a u space)  14 +  ix.read-buf ;
: i.write-data     ( buf a u)        18    ix.write-buf ;
: i.write-eeprom   ( buf a u)        19    ix.write-buf ;

| For app-stop we send the app-stop command, then the get-status command -
| to make sure it's done executing - and throw away the dp.

: i.app-stop
   ix.app-stop  i.get-status drop ;

( Before flashing, make sure to stop the app.)
: i.flash-begin   i.app-stop ;

| After flashing, we have to re-enable the RWW section. But we don't
| automatically start the app running again. We want to verify first, at
| the very least!

: i.flash-end   ix.flash-enable ;

: i.program   ( buf a u)
   over push  ix.write-page  pop ix.program-page ;

: i2c   chat-via
   i.hello  i.get-status  i.run  i.read-space  i.write-data  i.write-eeprom
   ix.app-start  i.app-stop  i.flash-begin  i.flash-end  ix.erase-page  i.program ;
