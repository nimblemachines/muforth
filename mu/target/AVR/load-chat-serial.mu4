| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

| Load file for serial chat example. Shows how to use regions, signatures,
| and vectors.

( Define your device before loading this file!)

| We know the chat code is less than 512 bytes long. Let's request a boot
| space of 512 bytes. The AVR memory code will calculate a proper bootsz
| based on the chip and our requested size.

512 constant #boot-desired

ld! target/AVR/build.mu4

( Set up fuses and lock bits, using the automatic generator.)
-d eesave  -d bootrst

| For a discussion of clock settings, see the fuses generator below.
ld target/AVR/fuses.mu4  ( generate the fuse and lock bytes!)

| Task definitions.
@ram #ram +  2 cells - ( user)  dup equ chat-user-area     #16 cells - ( stack)
             2 cells - ( user)  dup equ heart-user-area      8 cells -
             2 cells - ( user)  dup equ button0-user-area    8 cells -
             2 cells - ( user)  dup equ button1-user-area    8 cells -
drop

boot
1 vectors allot  ( room for reset vector)
ld target/AVR/simple-tasker.mu4  ( this *must* directly follow reset vector!)
ld target/AVR/chat-serial.mu4

flash
| Signature should immediately follow the vector table, which is
| automatically allocated.
sig(
   sig| Serial chat example with heartbeat LED, watchdog, and two debounced buttons.
   build-info
)sig

( Our application is the timer interrupt, heartbeat task, and button tasks.)
0 PORTB ( bit port) 2constant heart-led
ld target/AVR/heart.mu4
ld target/AVR/buttons.mu4

( Load the trampoline and example code.)
ld target/AVR/register-trampoline.mu4
ld target/AVR/register-examples.mu4

label app-stop
   | For this demo, there is nothing to do.
   ret  ;c

RESET handler
label app-entry-point
   h2 tst  app-stop 0= not until

label app-start
   ( We enter with h2 pointing to chat task, and yh pointing to chat stack page.)
   button1-user-area yl ldi
   button1-task >ra h0 ldiw ( pc, in ra form)
   create-task-hook call

   button0-user-area yl ldi
   button0-task >ra h0 ldiw ( pc)
   create-task-hook call

   heart-user-area yl ldi
   heart-task >ra h0 ldiw ( pc)
   create-task-hook jmp  ( return with h2 pointing to heart)  ;c
