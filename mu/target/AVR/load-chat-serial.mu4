| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

| Load file for serial chat example. Shows how to use regions, signatures,
| and vectors.

( Define your device before loading this file!)

| We know the chat code is less than 512 bytes long. Let's request a boot
| space of 512 bytes. The AVR memory code will calculate a proper bootsz
| based on the chip and our requested size.

512 constant #boot-desired

ld! target/AVR/build.mu4

( Set up fuses and lock bits, using the automatic generator.)
-d eesave  -d bootrst

| For a breadboarded chip, leave the default clock setting; for an Arduino
| with an external ceramic resonator, uncomment the following two lines:

|       %0111 constant cksel  ( full-power osc, long startup)
|         %00 constant sut

ld target/AVR/fuses.mu4  ( generate the fuse and lock bytes!)

( Put something into eeprom, just to test.)
eeprom
," Hello from EEPROM!"

( Tasks and user areas.)
| XXX chat-user-area can be smaller now that there is no "trap frame"
| stored there.

@ram #ram +  2 cells - ( user)  dup equ chat-user-area     #32 cells - ( stack)
             2 cells - ( user)  dup equ heart-user-area      8 cells -
             2 cells - ( user)  dup equ button0-user-area    8 cells -
             2 cells - ( user)  dup equ button1-user-area    8 cells -
drop

boot
1 vectors allot  ( room for reset vector)
ld target/AVR/simple-tasker.mu4  ( this *must* directly follow reset vector!)
ld target/AVR/chat-serial.mu4

flash
( Signature shold be the first thing in the flash.)
," App example with heartbeat LED, watchdog, and two debounced buttons."
build-info

( Load the timer interrupt, heartbeat task, and button tasks.)
ld target/AVR/heart.mu4
ld target/AVR/buttons.mu4

( Load the trampoline and example code.)
ld target/AVR/register-trampoline.mu4
ld target/AVR/register-examples.mu4

RESET handler
label create-app-tasks
   ( We enter with h2 pointing to chat task.)
   button1-user-area y ldiw
   button1-task 2/ h0 ldiw ( pc)
   create-task-hook call

   button0-user-area y ldiw
   button0-task 2/ h0 ldiw ( pc)
   create-task-hook call

   heart-user-area y ldiw
   heart-task 2/ h0 ldiw ( pc)
   create-task-hook jmp  ( return with h2 pointing to heart)  ;c
