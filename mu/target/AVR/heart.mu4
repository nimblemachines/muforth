| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading AVR heartbeat (software PWM)

__meta
hex

( Output to modulate - probably connected to an LED.)
0 PORTB ( bit port) 2constant heart-led

| We want the heartbeat to be a triangle wave. The simplest way to achieve
| this, with the fewest glitches and corner cases, is to XOR a sawtooth
| wave at frequency f with a polarity square wave at f/2.

| 00 01 02 ... fc fd fe ff 00 01 02 ... fc fd fe ff     Sawtooth
| 00 00 00 ... 00 00 00 00 ff ff ff ... ff ff ff ff     Polarity
| 00 01 02 ... fc fd fe ff ff fe fd ... 03 02 01 00     Output

( These two values are modified by timer overflow interrupt.)
1 var heart-index     ( how far we are into our 256-point pwm cycle)
                      ( heart task's status byte)

| sawtooth, polarity, and heart-output are modified by the heartbeat task,
| which is woken up every time the interrupt's increment of heart-index
| overflows.

assembler
\a xl constant sawtooth  ( xl reg = current sawtooth pwm value)
\a xh constant polarity  ( xh reg = current polarity value - 00 or ff)
forth
1 var heart-output    ( current output pwm = sawtooth xor polarity)

( At 8M clock, timer overflows at 31.25k, or every 32us.)

TIMER0_OVF handler  ( Timer/Counter0 Overflow)
label timer0-overflow-handler
   x pushw  SREG xl in  xl push  ( push X and SREG)
   heart-index xl lds  xl xh mov  xl inc  xl xh eor  heart-index xl sts
   ( xh has bits that have toggled)

   | XXX if we want to wake a task when heart-index overflows, test xl here
   | and wake the task if zero.

   7 xh sbrs  never  ( always jump to then)
      ( Wake the heart task every 128 ticks - every 4.096 ms.)
      heart-user-area xl lds  xl dec  heart-user-area xl sts
   then

   3 xh sbrs  never  ( always jump to then)
      ( Wake button tasks every 8 ticks - every 256 us.)
      button0-user-area xl lds  xl dec  button0-user-area xl sts
      button1-user-area xl lds  xl dec  button1-user-area xl sts
   then

   heart-output xh lds  xh xl cp ( index - output)
   u< if  heart-led cbi  ( LED on)   else
          heart-led sbi  ( LED off)  then
   ( Restore SREG and X and exit handler)
   xl pop  SREG xl out  x popw  reti  ;c

| Consume one wakeup and call yield.
label nap
   u y movw  cli  0 g0 ldu ( status)  g0 inc  0 g0 stu  sei  yield jmp  ;c

label heart-task
   | Initialize everything.
   heart-led sbi  ( LED off)
   heart-led DDRB PORTB - + ( convert PORTx to DDRx) sbi  ( set pin as output)
   01 xl ldi  TIMSK0 xl out  ( enable TOVR0)
              TCCR0B xl out  ( set timer0 clock to CPU/1)
   00 xl ldi  TCCR0A xl out  ( set up timer0 - normal mode)
   ( leave xl set to 00!)

   heart-index xl sts  ( xl is sawtooth)
   polarity clr  ( xh is polarity)

   | Enable watchdog.
   18 ( WDCE + WDE) h0 ldi
   8 ( WDE) 3 ( 16K = 0.125s timeout) + h1 ldi
   wdr  WDTCSR h0 out  WDTCSR h1 out

   | The heart of the task. ;-)
   begin
      x pushw  wdr  nap rcall  x popw
      sawtooth inc  0= if  ( sawtooth rolled over)
         polarity com  ( complement)
      then
      sawtooth g0 mov  polarity g0 eor  heart-output g0 sts  ( new output trigger point)
   again  ;c
