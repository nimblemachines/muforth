( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( Testing the behaviour of PC-relative addressing and add #offset, pc)

ld! target/MSP430/build.mu4  ( sets radix to hex!)

assembler
( This code uses the following register conventions:)

 04 reg cp     ( context pointer)

forth

( Tell the disassembler about these register names.)
-: ( reg)
   dup 5 u< if  ( low special)
      2*  z" pcspsrr3cp" +  2 type  ^  then
           ( 0011223344)
   ." r"  .udec ;  is .regname

__meta
ram
hex

label t1
   cp clr  2 # pc add  1 # cp add  1 # cp add  ret  ;c
   
label t2
   cp clr  4 # pc add  1 # cp add  1 # cp add  ret  ;c

label t3
   cp clr  2 imm>ea pc add  1 # cp add  1 # cp add  ret  ;c
   
label t4
   cp clr  4 imm>ea pc add  1 # cp add  1 # cp add  ret  ;c

( t1 and t3 return 0001 in CP; t2 and t4 return 0000 in CP.

  Conclusion: PC points to the next instruction when doing add immediate to PC.)

label t5
   here 8 +  pc +)  here 0a +  pc +) mov  ret  ;c

label t6
   here 8 +  pc +)  cp mov  ret  ;c

( Conclusion: The TI manual tells the truth in this case: the offsets are
  added to their own address when doing PC-relative addressing in this form.)
