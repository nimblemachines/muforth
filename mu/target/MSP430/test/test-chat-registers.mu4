( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Chat code claims that r12 to r15 - aka top, mp, count, and check - can be
  clobbered by called code with no bad consequences.

  Let's test this!)

ld! target/MSP430/build.mu4  ( sets radix to hex!)

decimal

assembler
( The chat code saves and restores - but does not otherwise touch - the
  context pointer, cp. It is used to pass execution context between the
  host and target. By default we assume it is the first "callee-saved"
  register, r4.)

 04 reg cp     ( context pointer)

( These are all considered "caller saved" registers. They are scratch.
  Called code can freely clobber them.)

 12 reg top    ( current accumulator)
 13 reg mp     ( memory pointer)
 14 reg count  ( word count)
 15 reg check  ( checksum accumulator)
forth

( Tell the disassembler about these register names.)
-: ( reg)
   dup 5 u< if  ( low special)
     2*  z" pcspsrr3cp" +  2 type  ^  then
          ( 0011223344)
   dup 12 u< if  ( not special)  ." r" .udec  ^  then
   12 -  5 *  z" top  mp   countcheck" +  5 -trailing type ;  is .regname
               ( cccccdddddeeeeefffff)

hex
__meta
ram

( Put crazy values - computed from cp - into chat's four registers.

  Test by loading this code with -d paranoid, then chat and run

    <random hex> .CP !
    booty call

  to run the code. Nothing bad should happen. So it's true: those registers
  can be clobbered by code that is run interactively and nothing bad happens.
  After re-entering chat, the host resets the checksum and sets the address
  pointer - mp - so it can fetch the register frame. At this point everything
  is back to normal.)

label booty
          cp top mov
  cp inv  cp mp mov
  cp cp add  cp count mov
  cp inv  cp check mov
  ret  ;c
