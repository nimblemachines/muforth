( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading Compiling for MSP430FR6989

( Device equates for the MSP430FR6989.)

hex

( First, a few defining words, which we'll use to load the "equates".)
: equ     ( offset)  current preserve  .equates. definitions  constant ;
: vector  ( offset)  equ ;
: |  \ -- ;  ( | ignores the bit-fields that follow each register name)
: aka   .equates. chain' execute ;  ( for making synonyms)

1c00 constant @ram
2 Ki constant #ram

1800 constant @info
#512 constant #info

0_4400 constant @flash
2_4000 @flash - constant #flash  ( 127 Ki, exactly)

( Reset and interrupt vectors are the last 128 bytes of the flash.)
0ff80 constant @vectors
 0080 constant #vectors

( 256 Ki address space, but we only go up to 2_4000.)
( XXX We don't have CPUX instructions - yet! - to access anything outside
  of the 64 KiB space, so let's stick with that for now.)
( XXX Also, setting #addrbits to 18 screws up display in the memory dumper
  if connected to the target. The second line is not indented far enough to
  align with the contents of the image memory.)

-- #18 constant #addrbits
#16 constant #addrbits


( For defining multiple peripheral registers that share a base address.)
: preg  ( base offset - base)  over +  equ ;

( Vectors)
0fffe vector Vreset
0ff84 vector Vbslsig1
0ff86 vector Vbslsig2

( MPU equates come later - autogenerated from Lua - but this one isn't in
  the datasheet and we need it.)
0a500 equ MPUKEY

0120
00 preg PMMCTL0      | PMM control 0
0a preg PMMIFG       | PMM interrupt flags
10 preg PM5CTL0      | PM5 control 0
drop

( FRAM controller)
0a500 equ FRKEY
0140
00 preg FRCTL0
04 preg GCCTL0
06 preg GCCTL1
drop

( CRC16)
0150
00 preg CRCDI        | CRC data input
02 preg CRCDIRB      | CRC data input reverse bits
04 preg CRCINIRES    | CRC initialization and result
06 preg CRCRESR      | CRC result reverse bits
drop

( Watchdog timer)
5a00 equ WDTKEY
015c equ WDTCTL

( Clock system)
a500 equ CSKEY
0160
00 preg CSCTL0
02 preg CSCTL1
04 preg CSCTL2
06 preg CSCTL3
08 preg CSCTL4
0a preg CSCTL5
0c preg CSCTL6
drop

( SYS registers)
0180
00 preg SYSCTL       | System control
06 preg SYSJMBC      | JTAG mailbox control
08 preg SYSJMBI0     | JTAG mailbox input 0
0a preg SYSJMBI1     | JTAG mailbox input 1
0c preg SYSJMBO0     | JTAG mailbox output 0
0e preg SYSJMBO1     | JTAG mailbox output 1
1a preg SYSUNIV      | User NMI vector generator
1c preg SYSSNIV      | System NMI vector generator
1e preg SYSRSTIV     | Reset vector generator
drop

( Ports are defined in *pairs*, and except for the address of the IV word,
  they are 1 byte apart. This allows, among other things, word writes and
  reads to and from pairs of port input, output, and direction registers.
  This is nice when dealing with values that span a single port.

  Odd-numbered ports have their IV at offset 0e. For even-numbered ports
  it's at 1e.)

( Port 1)
0200
00 preg P1IN         | input
02 preg P1OUT        | output
04 preg P1DIR        | direction
06 preg P1REN        | resistor enable
0a preg P1SEL0       | selection 0
0c preg P1SEL1       | selection 1
0e preg P1IV         | interrupt vector word
16 preg P1SELC       | complement selection
18 preg P1IES        | interrupt edge select
1a preg P1IE         | interrupt enable
1c preg P1IFG        | interrupt flag

( Port 2)
1+
00 preg P2IN         | input
02 preg P2OUT        | output
04 preg P2DIR        | direction
06 preg P2REN        | resistor enable
0a preg P2SEL0       | selection 0
0c preg P2SEL1       | selection 1
1d preg P2IV         | interrupt vector word
16 preg P2SELC       | complement selection
18 preg P2IES        | interrupt edge select
1a preg P2IE         | interrupt enable
1c preg P2IFG        | interrupt flag
drop

( Port 3)
0220
00 preg P3IN         | input
02 preg P3OUT        | output
04 preg P3DIR        | direction
06 preg P3REN        | resistor enable
0a preg P3SEL0       | selection 0
0c preg P3SEL1       | selection 1
0e preg P3IV         | interrupt vector word
16 preg P3SELC       | complement selection
18 preg P3IES        | interrupt edge select
1a preg P3IE         | interrupt enable
1c preg P3IFG        | interrupt flag

( Port 4)
1+
00 preg P4IN         | input
02 preg P4OUT        | output
04 preg P4DIR        | direction
06 preg P4REN        | resistor enable
0a preg P4SEL0       | selection 0
0c preg P4SEL1       | selection 1
1d preg P4IV         | interrupt vector word
16 preg P4SELC       | complement selection
18 preg P4IES        | interrupt edge select
1a preg P4IE         | interrupt enable
1c preg P4IFG        | interrupt flag
drop

( NOTE: Ports 5 thru J do not have IV, IES, IE, or IFG registers.)

( Port 5)
0240
00 preg P5IN         | input
02 preg P5OUT        | output
04 preg P5DIR        | direction
06 preg P5REN        | resistor enable
0a preg P5SEL0       | selection 0
0c preg P5SEL1       | selection 1
|  0e preg P5IV         | interrupt vector word
16 preg P5SELC       | complement selection
|  18 preg P5IES        | interrupt edge select
|  1a preg P5IE         | interrupt enable
|  1c preg P5IFG        | interrupt flag

( Port 6)
1+
00 preg P6IN         | input
02 preg P6OUT        | output
04 preg P6DIR        | direction
06 preg P6REN        | resistor enable
0a preg P6SEL0       | selection 0
0c preg P6SEL1       | selection 1
|  1d preg P6IV         | interrupt vector word
16 preg P6SELC       | complement selection
|  18 preg P6IES        | interrupt edge select
|  1a preg P6IE         | interrupt enable
|  1c preg P6IFG        | interrupt flag
drop

( Port 7)
0260
00 preg P7IN         | input
02 preg P7OUT        | output
04 preg P7DIR        | direction
06 preg P7REN        | resistor enable
0a preg P7SEL0       | selection 0
0c preg P7SEL1       | selection 1
|  0e preg P7IV         | interrupt vector word
16 preg P7SELC       | complement selection
|  18 preg P7IES        | interrupt edge select
|  1a preg P7IE         | interrupt enable
|  1c preg P7IFG        | interrupt flag

( Port 8)
1+
00 preg P8IN         | input
02 preg P8OUT        | output
04 preg P8DIR        | direction
06 preg P8REN        | resistor enable
0a preg P8SEL0       | selection 0
0c preg P8SEL1       | selection 1
|  1d preg P8IV         | interrupt vector word
16 preg P8SELC       | complement selection
|  18 preg P8IES        | interrupt edge select
|  1a preg P8IE         | interrupt enable
|  1c preg P8IFG        | interrupt flag
drop

( Port 9)
0280
00 preg P9IN         | input
02 preg P9OUT        | output
04 preg P9DIR        | direction
06 preg P9REN        | resistor enable
0a preg P9SEL0       | selection 0
0c preg P9SEL1       | selection 1
|  0e preg P9IV         | interrupt vector word
16 preg P9SELC       | complement selection
|  18 preg P9IES        | interrupt edge select
|  1a preg P9IE         | interrupt enable
|  1c preg P9IFG        | interrupt flag

( Port 10)
1+
00 preg P10IN         | input
02 preg P10OUT        | output
04 preg P10DIR        | direction
06 preg P10REN        | resistor enable
0a preg P10SEL0       | selection 0
0c preg P10SEL1       | selection 1
|  1d preg P10IV         | interrupt vector word
16 preg P10SELC       | complement selection
|  18 preg P10IES        | interrupt edge select
|  1a preg P10IE         | interrupt enable
|  1c preg P10IFG        | interrupt flag
drop

( Port J)
0320
00 preg PJIN         | input
02 preg PJOUT        | output
04 preg PJDIR        | direction
06 preg PJREN        | resistor enable
0a preg PJSEL0       | selection 0
0c preg PJSEL1       | selection 1
|  0e preg PJIV         | interrupt vector word
16 preg PJSELC       | complement selection
|  18 preg PJIES        | interrupt edge select
|  1a preg PJIE         | interrupt enable
|  1c preg PJIFG        | interrupt flag
drop

( USCI_A0 - UART/SPI interface)
05c0
00 preg UCA0CTLW0       | control word 0
00 preg UCA0CTL1        | control word 0, low byte
01 preg UCA0CTL0        | control word 0, high byte
02 preg UCA0CTLW1       | control word 1
06 preg UCA0BRW         | baud rate word
06 preg UCA0BR0         | baud rate 0
07 preg UCA0BR1         | baud rate 1
08 preg UCA0MCTLW       | modulation control
0a preg UCA0STATW       | status word
0c preg UCA0RXBUF       | receive buffer
0e preg UCA0TXBUF       | transmit buffer
10 preg UCA0ABCTL       | LIN control
12 preg UCA0IRTCTL      | IrDA transmit control
13 preg UCA0IRRCTL      | IrDA receive control
1a preg UCA0IE          | interrupt enable
1c preg UCA0IFG         | interrupt flags
1e preg UCA0IV          | interrupt vector word
drop

( USCI_A1 - UART/SPI interface)
05e0
00 preg UCA1CTLW0       | control word 0
00 preg UCA1CTL1        | control word 0, low byte
01 preg UCA1CTL0        | control word 0, high byte
02 preg UCA1CTLW1       | control word 1
06 preg UCA1BRW         | baud rate word
06 preg UCA1BR0         | baud rate 0
07 preg UCA1BR1         | baud rate 1
08 preg UCA1MCTLW       | modulation control
0a preg UCA1STATW       | status word
0c preg UCA1RXBUF       | receive buffer
0e preg UCA1TXBUF       | transmit buffer
10 preg UCA1ABCTL       | LIN control
12 preg UCA1IRTCTL      | IrDA transmit control
13 preg UCA1IRRCTL      | IrDA receive control
1a preg UCA1IE          | interrupt enable
1c preg UCA1IFG         | interrupt flags
1e preg UCA1IV          | interrupt vector word
drop

0a00
00 preg LCDCCTL0        | LCD_C control 0
02 preg LCDCCTL1        | LCD_C control 1
04 preg LCDCBLKCTL      | LCD_C blinking control
06 preg LCDCMEMCTL      | LCD_C memory control
08 preg LCDCVCTL        | LCD_C voltage control
0a preg LCDCPCTL0       | LCD_C port control 0
0c preg LCDCPCTL1       | LCD_C port control 1
0e preg LCDCPCTL2       | LCD_C port control 2
10 preg LCDCPCTL3       | LCD_C port control 3
12 preg LCDCCPCTL       | LCD_C charge pump control
1e preg LCDCIV          | LCD_C interrupt vector
20 preg LCDM            | start of segment memory
40 preg LCDBM           | start of blinking  memory
drop


( Equates for MSP430FR6989. Extracted from the datasheet using Lua!)

( Timer_A TA0)
0340
00 preg TA0CTL          | TA0 control
02 preg TA0CCTL0        | Capture/compare control 0
04 preg TA0CCTL1        | Capture/compare control 1
06 preg TA0CCTL2        | Capture/compare control 2
08 preg TA0CCTL3        | Capture/compare control 3
0a preg TA0CCTL4        | Capture/compare control 4
10 preg TA0R            | TA0 counter
12 preg TA0CCR0         | Capture/compare 0
14 preg TA0CCR1         | Capture/compare 1
16 preg TA0CCR2         | Capture/compare 2
18 preg TA0CCR3         | Capture/compare 3
1a preg TA0CCR4         | Capture/compare 4
20 preg TA0EX0          | TA0 expansion 0
2e preg TA0IV           | TA0 interrupt vector
drop

( Timer_A TA1)
0380
00 preg TA1CTL          | TA1 control
02 preg TA1CCTL0        | Capture/compare control 0
04 preg TA1CCTL1        | Capture/compare control 1
06 preg TA1CCTL2        | Capture/compare control 2
10 preg TA1R            | TA1 counter
12 preg TA1CCR0         | Capture/compare 0
14 preg TA1CCR1         | Capture/compare 1
16 preg TA1CCR2         | Capture/compare 2
20 preg TA1EX0          | TA1 expansion 0
2e preg TA1IV           | TA1 interrupt vector
drop

( Timer_B TB0)
03c0
00 preg TB0CTL          | TB0 control
02 preg TB0CCTL0        | Capture/compare control 0
04 preg TB0CCTL1        | Capture/compare control 1
06 preg TB0CCTL2        | Capture/compare control 2
08 preg TB0CCTL3        | Capture/compare control 3
0a preg TB0CCTL4        | Capture/compare control 4
0c preg TB0CCTL5        | Capture/compare control 5
0e preg TB0CCTL6        | Capture/compare control 6
10 preg TB0R            | TB0 counter
12 preg TB0CCR0         | Capture/compare 0
14 preg TB0CCR1         | Capture/compare 1
16 preg TB0CCR2         | Capture/compare 2
18 preg TB0CCR3         | Capture/compare 3
1a preg TB0CCR4         | Capture/compare 4
1c preg TB0CCR5         | Capture/compare 5
1e preg TB0CCR6         | Capture/compare 6
20 preg TB0EX0          | TB0 expansion 0
2e preg TB0IV           | TB0 interrupt vector
drop

( Timer_A TA2)
0400
00 preg TA2CTL          | TA2 control
02 preg TA2CCTL0        | Capture/compare control 0
04 preg TA2CCTL1        | Capture/compare control 1
10 preg TA2R            | TA2 counter
12 preg TA2CCR0         | Capture/compare 0
14 preg TA2CCR1         | Capture/compare 1
20 preg TA2EX0          | TA2 expansion 0
2e preg TA2IV           | TA2 interrupt vector
drop

( Capacitive Touch I/O 0 Registers)
0430
0e preg CAPTIO0CTL      | Capacitive Touch I/O 0 control
drop

( Timer_A TA3)
0440
00 preg TA3CTL          | TA3 control
02 preg TA3CCTL0        | Capture/compare control 0
04 preg TA3CCTL1        | Capture/compare control 1
06 preg TA3CCTL2        | Capture/compare control 2
08 preg TA3CCTL3        | Capture/compare control 3
0a preg TA3CCTL4        | Capture/compare control 4
10 preg TA3R            | TA3 counter
12 preg TA3CCR0         | Capture/compare 0
14 preg TA3CCR1         | Capture/compare 1
16 preg TA3CCR2         | Capture/compare 2
18 preg TA3CCR3         | Capture/compare 3
1a preg TA3CCR4         | Capture/compare 4
20 preg TA3EX0          | TA3 expansion 0
2e preg TA3IV           | TA3 interrupt vector
drop

( Capacitive Touch I/O 1 Registers)
0470
0e preg CAPTIO1CTL      | Capacitive Touch I/O 1 control
drop

( RTC_C real-time clock)
04a0
00 preg RTCCTL0         | RTC control 0
01 preg RTCPWD          | RTC password
02 preg RTCCTL1         | RTC control 1
03 preg RTCCTL3         | RTC control 3
04 preg RTCOCAL         | RTC offset calibration
06 preg RTCTCMP         | RTC temperature compensation
08 preg RTCPS0CTL       | RTC prescaler 0 control
0a preg RTCPS1CTL       | RTC prescaler 1 control
0c preg RTCPS0          | RTC prescaler 0
0d preg RTCPS1          | RTC prescaler 1
0e preg RTCIV           | RTC interrupt vector word
14 preg RTCDAY          | RTC days
15 preg RTCMON          | RTC month
16 preg RTCYEAR         | RTC year
18 preg RTCAMIN         | RTC alarm minutes
19 preg RTCAHOUR        | RTC alarm hours
1a preg RTCADOW         | RTC alarm day of week
1b preg RTCADAY         | RTC alarm days
1c preg BIN2BCD         | Binary-to-BCD conversion
1e preg BCD2BIN         | BCD-to-Binary conversion
drop

( 32-bit hardware multiplier)
04c0
00 preg MPY             | 16-bit operand 1 – multiply
02 preg MPYS            | 16-bit operand 1 – signed multiply
04 preg MAC             | 16-bit operand 1 – multiply accumulate
06 preg MACS            | 16-bit operand 1 – signed multiply accumulate
08 preg OP2             | 16-bit operand 2
0a preg RESLO           | 16 × 16 result low word
0c preg RESHI           | 16 × 16 result high word
0e preg SUMEXT          | 16 × 16 sum extension
10 preg MPY32L          | 32-bit operand 1 – multiply low word
12 preg MPY32H          | 32-bit operand 1 – multiply high word
14 preg MPYS32L         | 32-bit operand 1 – signed multiply low word
16 preg MPYS32H         | 32-bit operand 1 – signed multiply high word
18 preg MAC32L          | 32-bit operand 1 – multiply accumulate low word
1a preg MAC32H          | 32-bit operand 1 – multiply accumulate high word
1c preg MACS32L         | 32-bit operand 1 – signed multiply accumulate low word
1e preg MACS32H         | 32-bit operand 1 – signed multiply accumulate high word
20 preg OP2L            | 32-bit operand 2 – low word
22 preg OP2H            | 32-bit operand 2 – high word
24 preg RES0            | 32 × 32 result 0 – least significant word
26 preg RES1            | 32 × 32 result 1
28 preg RES2            | 32 × 32 result 2
2a preg RES3            | 32 × 32 result 3 – most significant word
2c preg MPY32CTL0       | MPY32 control 0
drop

( DMA general control)
0500
00 preg DMACTL0         | DMA module control 0
02 preg DMACTL1         | DMA module control 1
04 preg DMACTL2         | DMA module control 2
06 preg DMACTL3         | DMA module control 3
08 preg DMACTL4         | DMA module control 4
0e preg DMAIV           | DMA interrupt vector
drop

( DMA channel 0)
0510
00 preg DMA0CTL         | DMA channel 0 control
02 preg DMA0SAL         | DMA channel 0 source address low
04 preg DMA0SAH         | DMA channel 0 source address high
06 preg DMA0DAL         | DMA channel 0 destination address low
08 preg DMA0DAH         | DMA channel 0 destination address high
0a preg DMA0SZ          | DMA channel 0 transfer size
drop

( DMA channel 1)
0520
00 preg DMA1CTL         | DMA channel 1 control
02 preg DMA1SAL         | DMA channel 1 source address low
04 preg DMA1SAH         | DMA channel 1 source address high
06 preg DMA1DAL         | DMA channel 1 destination address low
08 preg DMA1DAH         | DMA channel 1 destination address high
0a preg DMA1SZ          | DMA channel 1 transfer size
drop

( DMA channel 2)
0530
00 preg DMA2CTL         | DMA channel 2 control
02 preg DMA2SAL         | DMA channel 2 source address low
04 preg DMA2SAH         | DMA channel 2 source address high
06 preg DMA2DAL         | DMA channel 2 destination address low
08 preg DMA2DAH         | DMA channel 2 destination address high
0a preg DMA2SZ          | DMA channel 2 transfer size
drop

( Memory protection unit)
05a0
00 preg MPUCTL0         | MPU control 0
02 preg MPUCTL1         | MPU control 1
04 preg MPUSEGB2        | MPU segmentation border 2
06 preg MPUSEGB1        | MPU segmentation border 1
08 preg MPUSAM          | MPU access management
0a preg MPUIPC0         | MPU IP control 0
0c preg MPUIPSEGB2      | MPU IP encapsulation segment border 2
0e preg MPUIPSEGB1      | MPU IP encapsulation segment border 1
drop

( USCI_B0 I2C/SPI)
0640
00 preg UCB0CTLW0       | eUSCI_B control word 0
02 preg UCB0CTLW1       | eUSCI_B control word 1
06 preg UCB0BR0         | eUSCI_B bit rate 0
07 preg UCB0BR1         | eUSCI_B bit rate 1
08 preg UCB0STATW       | eUSCI_B status word
0a preg UCB0TBCNT       | eUSCI_B byte counter threshold
0c preg UCB0RXBUF       | eUSCI_B receive buffer
0e preg UCB0TXBUF       | eUSCI_B transmit buffer
14 preg UCB0I2COA0      | eUSCI_B I2C own address 0
16 preg UCB0I2COA1      | eUSCI_B I2C own address 1
18 preg UCB0I2COA2      | eUSCI_B I2C own address 2
1a preg UCB0I2COA3      | eUSCI_B I2C own address 3
1c preg UCB0ADDRX       | eUSCI_B received address
1e preg UCB0ADDMASK     | eUSCI_B address mask
20 preg UCB0I2CSA       | eUSCI_B I2C slave address
2a preg UCB0IE          | eUSCI_B interrupt enable
2c preg UCB0IFG         | eUSCI_B interrupt flags
2e preg UCB0IV          | eUSCI_B interrupt vector word
drop

( USCI_B1 I2C/SPI)
0680
00 preg UCB1CTLW0       | eUSCI_B control word 0
02 preg UCB1CTLW1       | eUSCI_B control word 1
06 preg UCB1BR0         | eUSCI_B bit rate 0
07 preg UCB1BR1         | eUSCI_B bit rate 1
08 preg UCB1STATW       | eUSCI_B status word
0a preg UCB1TBCNT       | eUSCI_B byte counter threshold
0c preg UCB1RXBUF       | eUSCI_B receive buffer
0e preg UCB1TXBUF       | eUSCI_B transmit buffer
14 preg UCB1I2COA0      | eUSCI_B I2C own address 0
16 preg UCB1I2COA1      | eUSCI_B I2C own address 1
18 preg UCB1I2COA2      | eUSCI_B I2C own address 2
1a preg UCB1I2COA3      | eUSCI_B I2C own address 3
1c preg UCB1ADDRX       | eUSCI_B received address
1e preg UCB1ADDMASK     | eUSCI_B address mask
20 preg UCB1I2CSA       | eUSCI_B I2C slave address
2a preg UCB1IE          | eUSCI_B interrupt enable
2c preg UCB1IFG         | eUSCI_B interrupt flags
2e preg UCB1IV          | eUSCI_B interrupt vector word
drop

( ADC12_B)
0800
00 preg ADC12CTL0       | ADC12_B control 0
02 preg ADC12CTL1       | ADC12_B control 1
04 preg ADC12CTL2       | ADC12_B control 2
06 preg ADC12CTL3       | ADC12_B control 3
08 preg ADC12LO         | ADC12_B window comparator low threshold
0a preg ADC12HI         | ADC12_B window comparator high threshold
0c preg ADC12IFGR0      | ADC12_B interrupt flag 0
0e preg ADC12IFGR1      | ADC12_B Interrupt flag 1
10 preg ADC12IFGR2      | ADC12_B interrupt flag 2
12 preg ADC12IER0       | ADC12_B interrupt enable 0
14 preg ADC12IER1       | ADC12_B interrupt enable 1
16 preg ADC12IER2       | ADC12_B interrupt enable 2
18 preg ADC12IV         | ADC12_B interrupt vector
20 preg ADC12MCTL0      | ADC12_B memory control 0
22 preg ADC12MCTL1      | ADC12_B memory control 1
24 preg ADC12MCTL2      | ADC12_B memory control 2
26 preg ADC12MCTL3      | ADC12_B memory control 3
5e preg ADC12MCTL31     | ADC12_B memory control 31
60 preg ADC12MEM0       | ADC12_B memory 0
62 preg ADC12MEM1       | ADC12_B memory 1
64 preg ADC12MEM2       | ADC12_B memory 2
66 preg ADC12MEM3       | ADC12_B memory 3
9e preg ADC12MEM31      | ADC12_B memory 31
drop

( Comparator_E)
08c0
00 preg CECTL0          | Comparator control 0
02 preg CECTL1          | Comparator control 1
04 preg CECTL2          | Comparator control 2
06 preg CECTL3          | Comparator control 3
0c preg CEINT           | Comparator interrupt
0e preg CEIV            | Comparator interrupt vector word
drop

( CRC32)
0980
00 preg CRC32DI         | CRC32 data input
06 preg CRC32DIRB       | CRC32 data input reverse
08 preg CRC32INIRESW0   | CRC32 initialization and result word 0
0a preg CRC32INIRESW1   | CRC32 initialization and result word 1
0c preg CRC32RESRW1     | CRC32 result reverse word 1
0e preg CRC32RESRW0     | CRC32 result reverse word 0
10 preg CRC16DI         | CRC16 data input
16 preg CRC16DIRB       | CRC16 data input reverse
18 preg CRC16INIRES     | CRC16 initialization and result word 0
1e preg CRC16RESR       | CRC16 result reverse word 0
drop

( AES accelerator)
09c0
00 preg AESACTL0        | AES accelerator control 0
02 preg AESACTL1        | AES accelerator control 1
04 preg AESASTAT        | AES accelerator status
06 preg AESAKEY         | AES accelerator key
008 preg AESADIN         | AES accelerator data in
00a preg AESADOUT        | AES accelerator data out
00c preg AESAXDIN        | AES accelerator XORed data in
00e preg AESAXIN         | AES accelerator XORed data in (no trigger)
drop

( End of auto-generated equates for MSP430FR6989.)


.ifdef notyet

( Information memory, segment A - ADC calibration constants)
: adc  ( offset)  10da +  equ ;

( Offsets from G2553 datasheet, p15.)
0002 adc CAL_ADC_GAIN_FACTOR     | External VREF = 1.5 V, fADC10CLK = 5 MHz
0004 adc CAL_ADC_OFFSET          | External VREF = 1.5 V, fADC10CLK = 5 MHz
0006 adc CAL_ADC_15VREF_FACTOR   | REF2_5 = 0, TA = 30C, IVREF+ = 0.5 mA
0008 adc CAL_ADC_15T30           | INCHx = 0x1010, REF2_5 = 0, TA = 30C
000a adc CAL_ADC_15T85           | INCHx = 0x1010, REF2_5 = 0, TA = 85C
000c adc CAL_ADC_25VREF_FACTOR   | REF2_5 = 1, TA = 30C, IVREF+ = 1 mA
000e adc CAL_ADC_25T30           | INCHx = 0x1010, REF2_5 = 1, TA = 30C
0010 adc CAL_ADC_25T85           | INCHx = 0x1010, REF2_5 = 1, TA = 85C

( Information memory, segment A - DCO calibration constants)
: dco  ( offset)  10f6 +  equ ;

( End of copied g2553 stuff)

.then

( Make a few synonyms for the chat code.)
( For get-byte and put-byte)
aka UCA1IFG   equ chat-uart-ifg
aka UCA1RXBUF equ chat-uart-rxbuf
aka UCA1TXBUF equ chat-uart-txbuf
aka UCA1CTL0  equ chat-uart-ctl0
aka UCA1CTL1  equ chat-uart-ctl1
aka UCA1BR0   equ chat-uart-br0
aka UCA1BR1   equ chat-uart-br1

( Connect P3.4 to UART TXD, P3.5 to UART RXD. SEL0=1, SEL1=0)
aka P3SEL0 equ chat-port-sel0
aka P3SEL1 equ chat-port-sel1

%0011_0000 constant chat-port-sel0-ones
%0011_0000 constant chat-port-sel1-zeros

( Modulation bits.)
.ifndef slow-chat  ( compute values for 115,200 bps)
0f7a1 ( UCOS16=1; UCBRFx=0a; UCBRSx=f7)
.else              ( compute for 9600 bps)
0d621 ( UCOS16=1; UCBRFx=02; UCBRSx=d6)
.then
aka UCA1MCTLW 2constant chat-uart-mctlw
