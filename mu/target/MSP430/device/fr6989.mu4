( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading Compiling for MSP430FR6989

( Device equates for the MSP430FR6989.)

hex

( First, a few defining words, which we'll use to load the "equates".)
: equ     ( offset)  current preserve  .equates. definitions  constant ;
: vector  ( offset)  equ ;
: |  \ -- ;  ( | ignores the bit-fields that follow each register name)
: aka   .equates. chain' execute ;  ( for making synonyms)

1c00 constant @ram
2 Ki constant #ram

1800 constant @info
#512 constant #info

0_4400 constant @flash
2_4000 @flash - constant #flash  ( 127 Ki, exactly)

( Reset and interrupt vectors are the last 128 bytes of the flash.)
0ff80 constant @vectors
 0080 constant #vectors

( 256 Ki address space, but we only go up to 2_4000.)
( XXX We don't have CPUX instructions - yet! - to access anything outside
  of the 64 KiB space, so let's stick with that for now.)
( XXX Also, setting #addrbits to 18 screws up display in the memory dumper
  if connected to the target. The second line is not indented far enough to
  align with the contents of the image memory.)

-- #18 constant #addrbits
#16 constant #addrbits


( For defining multiple peripheral registers that share a base address.)
: preg  ( base offset - base)  over +  equ ;

( Vectors)
0fffe vector Vreset
0ff84 vector Vbslsig1
0ff86 vector Vbslsig2

0120 ( base)
00 preg PMMCTL0      | PMM control 0
0a preg PMMIFG       | PMM interrupt flags
10 preg PM5CTL0      | PM5 control 0
drop ( base)

( FRAM controller)
0a500 equ FRKEY
0140 ( base)
00 preg FRCTL0
04 preg GCCTL0
06 preg GCCTL1
drop ( base)

( CRC16)
0150 ( base)
00 preg CRCDI        | CRC data input
02 preg CRCDIRB      | CRC data input reverse byte
04 preg CRCINIRES    | CRC initialization and result
06 preg CRCRESR      | CRC result reverse byte
drop ( base)

( Watchdog timer)
5a00 equ WDTKEY
015c equ WDTCTL

( Clock system)
a500 equ CSKEY
0160 ( base)
00 preg CSCTL0
02 preg CSCTL1
04 preg CSCTL2
06 preg CSCTL3
08 preg CSCTL4
0a preg CSCTL5
0c preg CSCTL6
drop ( base)

( SYS registers)
0180 ( base)
00 preg SYSCTL       | System control
06 preg SYSJMBC      | JTAG mailbox control
08 preg SYSJMBI0     | JTAG mailbox input 0
0a preg SYSJMBI1     | JTAG mailbox input 1
0c preg SYSJMBO0     | JTAG mailbox output 0
0e preg SYSJMBO1     | JTAG mailbox output 1
1a preg SYSUNIV      | User NMI vector generator
1c preg SYSSNIV      | System NMI vector generator
1e preg SYSRSTIV     | Reset vector generator
drop ( base)

( Ports are defined in *pairs*, and except for the address of the IV word,
  they are 1 byte apart. This allows, among other things, word writes and
  reads to and from pairs of port input, output, and direction registers.
  This is nice when dealing with values that span a single port.

  Odd-numbered ports have their IV at offset 0e. For even-numbered ports
  it's at 1e.)

( Port 1)
0200 ( base)
00 preg P1IN         | input
02 preg P1OUT        | output
04 preg P1DIR        | direction
06 preg P1REN        | resistor enable
0a preg P1SEL0       | selection 0
0c preg P1SEL1       | selection 1
0e preg P1IV         | interrupt vector word
16 preg P1SELC       | complement selection
18 preg P1IES        | interrupt edge select
1a preg P1IE         | interrupt enable
1c preg P1IFG        | interrupt flag

( Port 2)
1+ ( base)
00 preg P2IN         | input
02 preg P2OUT        | output
04 preg P2DIR        | direction
06 preg P2REN        | resistor enable
0a preg P2SEL0       | selection 0
0c preg P2SEL1       | selection 1
1d preg P2IV         | interrupt vector word
16 preg P2SELC       | complement selection
18 preg P2IES        | interrupt edge select
1a preg P2IE         | interrupt enable
1c preg P2IFG        | interrupt flag
drop ( base)

( Port 3)
0220 ( base)
00 preg P3IN         | input
02 preg P3OUT        | output
04 preg P3DIR        | direction
06 preg P3REN        | resistor enable
0a preg P3SEL0       | selection 0
0c preg P3SEL1       | selection 1
0e preg P3IV         | interrupt vector word
16 preg P3SELC       | complement selection
18 preg P3IES        | interrupt edge select
1a preg P3IE         | interrupt enable
1c preg P3IFG        | interrupt flag

( Port 4)
1+ ( base)
00 preg P4IN         | input
02 preg P4OUT        | output
04 preg P4DIR        | direction
06 preg P4REN        | resistor enable
0a preg P4SEL0       | selection 0
0c preg P4SEL1       | selection 1
1d preg P4IV         | interrupt vector word
16 preg P4SELC       | complement selection
18 preg P4IES        | interrupt edge select
1a preg P4IE         | interrupt enable
1c preg P4IFG        | interrupt flag
drop ( base)

( NOTE: Ports 5 thru J do not have IV, IES, IE, or IFG registers.)

( Port 5)
0240 ( base)
00 preg P5IN         | input
02 preg P5OUT        | output
04 preg P5DIR        | direction
06 preg P5REN        | resistor enable
0a preg P5SEL0       | selection 0
0c preg P5SEL1       | selection 1
|  0e preg P5IV         | interrupt vector word
16 preg P5SELC       | complement selection
|  18 preg P5IES        | interrupt edge select
|  1a preg P5IE         | interrupt enable
|  1c preg P5IFG        | interrupt flag

( Port 6)
1+ ( base)
00 preg P6IN         | input
02 preg P6OUT        | output
04 preg P6DIR        | direction
06 preg P6REN        | resistor enable
0a preg P6SEL0       | selection 0
0c preg P6SEL1       | selection 1
|  1d preg P6IV         | interrupt vector word
16 preg P6SELC       | complement selection
|  18 preg P6IES        | interrupt edge select
|  1a preg P6IE         | interrupt enable
|  1c preg P6IFG        | interrupt flag
drop ( base)

( Port 7)
0260 ( base)
00 preg P7IN         | input
02 preg P7OUT        | output
04 preg P7DIR        | direction
06 preg P7REN        | resistor enable
0a preg P7SEL0       | selection 0
0c preg P7SEL1       | selection 1
|  0e preg P7IV         | interrupt vector word
16 preg P7SELC       | complement selection
|  18 preg P7IES        | interrupt edge select
|  1a preg P7IE         | interrupt enable
|  1c preg P7IFG        | interrupt flag

( Port 8)
1+ ( base)
00 preg P8IN         | input
02 preg P8OUT        | output
04 preg P8DIR        | direction
06 preg P8REN        | resistor enable
0a preg P8SEL0       | selection 0
0c preg P8SEL1       | selection 1
|  1d preg P8IV         | interrupt vector word
16 preg P8SELC       | complement selection
|  18 preg P8IES        | interrupt edge select
|  1a preg P8IE         | interrupt enable
|  1c preg P8IFG        | interrupt flag
drop ( base)

( Port 9)
0280 ( base)
00 preg P9IN         | input
02 preg P9OUT        | output
04 preg P9DIR        | direction
06 preg P9REN        | resistor enable
0a preg P9SEL0       | selection 0
0c preg P9SEL1       | selection 1
|  0e preg P9IV         | interrupt vector word
16 preg P9SELC       | complement selection
|  18 preg P9IES        | interrupt edge select
|  1a preg P9IE         | interrupt enable
|  1c preg P9IFG        | interrupt flag

( Port 10)
1+ ( base)
00 preg P10IN         | input
02 preg P10OUT        | output
04 preg P10DIR        | direction
06 preg P10REN        | resistor enable
0a preg P10SEL0       | selection 0
0c preg P10SEL1       | selection 1
|  1d preg P10IV         | interrupt vector word
16 preg P10SELC       | complement selection
|  18 preg P10IES        | interrupt edge select
|  1a preg P10IE         | interrupt enable
|  1c preg P10IFG        | interrupt flag
drop ( base)

( Port J)
0320 ( base)
00 preg PJIN         | input
02 preg PJOUT        | output
04 preg PJDIR        | direction
06 preg PJREN        | resistor enable
0a preg PJSEL0       | selection 0
0c preg PJSEL1       | selection 1
|  0e preg PJIV         | interrupt vector word
16 preg PJSELC       | complement selection
|  18 preg PJIES        | interrupt edge select
|  1a preg PJIE         | interrupt enable
|  1c preg PJIFG        | interrupt flag
drop ( base)

( USCI_A0 - UART/SPI interface)
05c0 ( base)
00 preg UCA0CTLW0       | control word 0
00 preg UCA0CTL1        | control word 0, low byte
01 preg UCA0CTL0        | control word 0, high byte
02 preg UCA0CTLW1       | control word 1
06 preg UCA0BRW         | baud rate word
06 preg UCA0BR0         | baud rate 0
07 preg UCA0BR1         | baud rate 1
08 preg UCA0MCTLW       | modulation control
0a preg UCA0STATW       | status word
0c preg UCA0RXBUF       | receive buffer
0e preg UCA0TXBUF       | transmit buffer
10 preg UCA0ABCTL       | LIN control
12 preg UCA0IRTCTL      | IrDA transmit control
13 preg UCA0IRRCTL      | IrDA receive control
1a preg UCA0IE          | interrupt enable
1c preg UCA0IFG         | interrupt flags
1e preg UCA0IV          | interrupt vector word
drop ( base)

( USCI_A1 - UART/SPI interface)
05e0 ( base)
00 preg UCA1CTLW0       | control word 0
00 preg UCA1CTL1        | control word 0, low byte
01 preg UCA1CTL0        | control word 0, high byte
02 preg UCA1CTLW1       | control word 1
06 preg UCA1BRW         | baud rate word
06 preg UCA1BR0         | baud rate 0
07 preg UCA1BR1         | baud rate 1
08 preg UCA1MCTLW       | modulation control
0a preg UCA1STATW       | status word
0c preg UCA1RXBUF       | receive buffer
0e preg UCA1TXBUF       | transmit buffer
10 preg UCA1ABCTL       | LIN control
12 preg UCA1IRTCTL      | IrDA transmit control
13 preg UCA1IRRCTL      | IrDA receive control
1a preg UCA1IE          | interrupt enable
1c preg UCA1IFG         | interrupt flags
1e preg UCA1IV          | interrupt vector word
drop ( base)

( XXX add USCI_B0 and B1)

0a00 ( base)
00 preg LCDCCTL0        | LCD_C control 0
02 preg LCDCCTL1        | LCD_C control 1
04 preg LCDCBLKCTL      | LCD_C blinking control
06 preg LCDCMEMCTL      | LCD_C memory control
08 preg LCDCVCTL        | LCD_C voltage control
0a preg LCDCPCTL0       | LCD_C port control 0
0c preg LCDCPCTL1       | LCD_C port control 1
0e preg LCDCPCTL2       | LCD_C port control 2
10 preg LCDCPCTL3       | LCD_C port control 3
12 preg LCDCCPCTL       | LCD_C charge pump control
1e preg LCDCIV          | LCD_C interrupt vector
20 preg LCDM            | start of segment memory
40 preg LCDBM           | start of blinking  memory
drop ( base)


.ifdef notyet

( Information memory, segment A - ADC calibration constants)
: adc  ( offset)  10da +  equ ;

( Offsets from G2553 datasheet, p15.)
0002 adc CAL_ADC_GAIN_FACTOR     | External VREF = 1.5 V, fADC10CLK = 5 MHz
0004 adc CAL_ADC_OFFSET          | External VREF = 1.5 V, fADC10CLK = 5 MHz
0006 adc CAL_ADC_15VREF_FACTOR   | REF2_5 = 0, TA = 30C, IVREF+ = 0.5 mA
0008 adc CAL_ADC_15T30           | INCHx = 0x1010, REF2_5 = 0, TA = 30C
000a adc CAL_ADC_15T85           | INCHx = 0x1010, REF2_5 = 0, TA = 85C
000c adc CAL_ADC_25VREF_FACTOR   | REF2_5 = 1, TA = 30C, IVREF+ = 1 mA
000e adc CAL_ADC_25T30           | INCHx = 0x1010, REF2_5 = 1, TA = 30C
0010 adc CAL_ADC_25T85           | INCHx = 0x1010, REF2_5 = 1, TA = 85C

( Information memory, segment A - DCO calibration constants)
: dco  ( offset)  10f6 +  equ ;

( End of copied g2553 stuff)

.then

( Make a few synonyms for the chat code.)
( For get-byte and put-byte)
aka UCA1IFG   equ chat-uart-ifg
aka UCA1RXBUF equ chat-uart-rxbuf
aka UCA1TXBUF equ chat-uart-txbuf
aka UCA1CTL0  equ chat-uart-ctl0
aka UCA1CTL1  equ chat-uart-ctl1
aka UCA1BR0   equ chat-uart-br0
aka UCA1BR1   equ chat-uart-br1

( Connect P3.4 to UART TXD, P3.5 to UART RXD. SEL0=1, SEL1=0)
aka P3SEL0 equ chat-port-sel0
aka P3SEL1 equ chat-port-sel1

%0011_0000 constant chat-port-sel0-ones
%0011_0000 constant chat-port-sel1-zeros

( Modulation bits.)
.ifndef slow-chat  ( compute values for 115,200 bps)
0f7a1 ( UCOS16=1; UCBRFx=0a; UCBRSx=f7)
.else              ( compute for 9600 bps)
0d621 ( UCOS16=1; UCBRFx=02; UCBRSx=d6)
.then
aka UCA1MCTLW 2constant chat-uart-mctlw
