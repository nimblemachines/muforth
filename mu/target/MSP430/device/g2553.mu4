( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading Compiling for MSP430G2553

( A few device equates for the MSP430G2553.

  Enough to get the chat protocol going, and a few more to explore the chip.)

hex

( First, a few defining words, which we'll use to load the "equates".)
: equ     ( offset)  current preserve  .equates. definitions  constant ;
: vector  ( offset)  equ ;
: |  \ -- ;  ( | ignores the bit-fields that follow each register name)
: aka   .equates. chain' execute ;  ( for making synonyms)

#16 Ki constant #flash
  #512 constant #ram
  #256 constant #info

1_0000 #flash - constant @flash
  0200 constant @ram
  1000 constant @info

( Reset and interrupt vectors are the last 64 bytes of the flash.)
0ffc0 constant @vectors
 0040 constant #vectors

( 64 Ki address space. 16 bits of address.)
#16 constant #addrbits


( Vectors)
0fffe vector Vreset
0ffde vector Vbslkey    -- set to 0 to disable mass erase when password wrong

( NOTE: Registers addresses in the range 0010 to 00ff are 8-bit;
                                         0100 to 01ff are 16-bit.)

( SFRs)
0000 equ IE1   ( Interrupt Enable 1 and 2 )
0001 equ IE2
0002 equ IFG1  ( Interrupt Flag 1 and 2 )
0003 equ IFG2

( Port 1)
0020 equ P1IN
0021 equ P1OUT
0022 equ P1DIR
0023 equ P1IFG
0024 equ P1IES
0025 equ P1IE
0026 equ P1SEL
0027 equ P1REN
0041 equ P1SEL2

( Port 2)
0028 equ P2IN
0029 equ P2OUT
002a equ P2DIR
002b equ P2IFG
002c equ P2IES
002d equ P2IE
002e equ P2SEL
002f equ P2REN
0042 equ P2SEL2

( ADC10 Module -- Byte Access)
0048 equ ADC10DTC0  ( ADC data transfer control register 0)
0049 equ ADC10DTC1  ( ADC data transfer control register 1)
004a equ ADC10AE0   ( ADC analog enable 0)
004b equ ADC10AE1   ( ADC analog enable 1)

( DCO, clock generator)
0053 equ BCSCTL3
0056 equ DCOCTL
0057 equ BCSCTL1
0058 equ BCSCTL2

( Comparator_A+ Module -- Byte Access)
0059 equ CACTL1  ( Comparator_A+ control 1)
005a equ CACTL2  ( Comparator_A+ control 2)
005b equ CAPD    ( Comparator_A+ Port Disable)

( UART/SPI - ie, USCI_A0)
005d equ UCA0ABCTL
005e equ UCA0IRTCTL
005f equ UCA0IRRCTL

0060 equ UCA0CTL0
0061 equ UCA0CTL1
0062 equ UCA0BR0
0063 equ UCA0BR1
0064 equ UCA0MCTL
0065 equ UCA0STAT
0066 equ UCA0RXBUF
0067 equ UCA0TXBUF

( SPI/I2C - ie, USCI_B0)
0068 equ UCB0CTL0
0069 equ UCB0CTL1
006a equ UCB0BR0
006b equ UCB0BR1
006c equ UCB0CIE
006d equ UCB0STAT
006e equ UCB0RXBUF
006f equ UCB0TXBUF

( Names from G2553 datasheet, p19:)
0118 equ UCB0OA     ( I2C own address)
011a equ UCB0SA     ( I2C slave address)

( Names from x2xx family manual, p467:)
aka UCB0OA  equ UCB0I2COA     ( I2C own address)
aka UCB0SA  equ UCB0I2CSA     ( I2C slave address)

( Watchdog timer)
5a00 equ WDTKEY
0120 equ WDTCTL

( Flash memory controller)
0128 equ FCTL1
012a equ FCTL2
012c equ FCTL3

0a500 equ FKEY

( Bits for FCTL1)
0002 equ FERASE  ( segment erase)
0040 equ FWRT

( Bits for FCTL3)
0001 equ FBUSY   ( for RAM-based code)
0010 equ FLOCK
0040 equ FLOCKA  ( lock bit for info segment A)

( NOTE!! The MSP430 documentation is *incredibly* confusing when it comes to
  the names of the timer registers. The MSP430x2xx family user's manual -
  slau144j - describes a Timer_A and a Timer_B, whereas the G2553 datasheet
  mentions a Timer0_A3 and a Timer1_A3. Even though the familly manual
  Timer_A register addresses exactly match the G2553 datasheet Timer0_A3
  addresses, and likewise with Timer_B and Timer1_A3, do *not* be mislead
  into thinking that they are equivalent! If anything, this is a
  documentation mistake.

  The reality is that there are two *types* of timers described by the
  family manual: Timer_A - which can have either 3 or 7 capture/compare
  registers - and Timer_B - which likewise can have 3 or 7 CC registers. The
  G2553 datasheet says that the chip has *two* Timer_A3 instances on it: two
  timers of *type* A with 3 capture/compare registers. There are *no* timers
  of type B on the G2553.

  So, for register naming, we follow the G2553 datasheet and not the family
  manual. The following register addresses are found on p18 of the G2553
  datasheet.

  I hope this helps to clear up the confusion!)

( Timer0_A3 Module -- Word Access)
012e equ TA0IV ( Timer Interrupt Vector)

0160 equ TA0CTL    ( Timer control)
0162 equ TA0CCTL0  ( Timer Capture/Compare Control 0)
0164 equ TA0CCTL1  ( Timer Capture/Compare Control 1)
0166 equ TA0CCTL2  ( Timer Capture/Compare Control 2)
0170 equ TA0R      ( Timer count register)
0172 equ TA0CCR0   ( Timer Capture/Compare register 0)
0174 equ TA0CCR1   ( Timer Capture/Compare register 1)
0176 equ TA0CCR2   ( Timer Capture/Compare register 2)

( Timer1_A3 Module -- Word Access)
011e equ TA1IV

0180 equ TA1CTL
0182 equ TA1CCTL0
0184 equ TA1CCTL1
0186 equ TA1CCTL2
0190 equ TA1R
0192 equ TA1CCR0
0194 equ TA1CCR1
0196 equ TA1CCR2

( ADC10 Module -- Word Access)
01b0 equ ADC10CTL0  ( ADC control register 0)
01b2 equ ADC10CTL1  ( ADC control register 1)
01b4 equ ADC10MEM   ( ADC memory)
01bc equ ADC10SA    ( ADC data transfer start address)

( Information memory, segment A - ADC calibration constants)
: adc  ( offset)  10da +  equ ;

( Offsets from G2553 datasheet, p15.)
0002 adc CAL_ADC_GAIN_FACTOR     | External VREF = 1.5 V, fADC10CLK = 5 MHz
0004 adc CAL_ADC_OFFSET          | External VREF = 1.5 V, fADC10CLK = 5 MHz
0006 adc CAL_ADC_15VREF_FACTOR   | REF2_5 = 0, TA = 30C, IVREF+ = 0.5 mA
0008 adc CAL_ADC_15T30           | INCHx = 0x1010, REF2_5 = 0, TA = 30C
000a adc CAL_ADC_15T85           | INCHx = 0x1010, REF2_5 = 0, TA = 85C
000c adc CAL_ADC_25VREF_FACTOR   | REF2_5 = 1, TA = 30C, IVREF+ = 1 mA
000e adc CAL_ADC_25T30           | INCHx = 0x1010, REF2_5 = 1, TA = 30C
0010 adc CAL_ADC_25T85           | INCHx = 0x1010, REF2_5 = 1, TA = 85C

( Information memory, segment A - DCO calibration constants)
: dco  ( offset)  10f6 +  equ ;

( Offsets from G2553 datasheet, p15.)
0002 dco CAL_DCO_16MHZ
0003 dco CAL_BC1_16MHZ
0004 dco CAL_DCO_12MHZ
0005 dco CAL_BC1_12MHZ
0006 dco CAL_DCO_8MHZ
0007 dco CAL_BC1_8MHZ
0008 dco CAL_DCO_1MHZ
0009 dco CAL_BC1_1MHZ

( Make a few synonyms for the chat code, so it can be written generically.)
aka IFG2      equ chat-uart-ifg
aka UCA0RXBUF equ chat-uart-rxbuf
aka UCA0TXBUF equ chat-uart-txbuf
aka UCA0CTL0  equ chat-uart-ctl0
aka UCA0CTL1  equ chat-uart-ctl1
aka UCA0BR0   equ chat-uart-br0
aka UCA0BR1   equ chat-uart-br1

( Connect P1.2 to UART TXD, P1.1 to UART RXD. SEL=1 & SEL2=1)
aka P1SEL  equ chat-port-sel0
aka P1SEL2 equ chat-port-sel1

%0000_0110 constant chat-port-sel0-ones
%0000_0110 constant chat-port-sel1-ones

( Modulation bits.)
.ifndef slow-chat  ( compute values for 115,200 bps)
%1011_0001     -- ie, UCBRF0=11 (decimal), UCBRS0=0, UCOS16=1
.else              ( compute for 9600 bps)
%0011_0001     -- ie, UCBRF0=3, UCBRS0=0, UCOS16=1
.then
aka UCA0MCTL 2constant chat-uart-mctl
