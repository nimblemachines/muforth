( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading MSP430 FR6989 CRC tests

__meta
hex
ram

( String support.)
: count   ( a - a+1 byte)   dup 1+  swap c@ ;  ( a species of c@+)
: aligned   1+ -2 and ;
: (")   r>  count  2dup + aligned  >r ;

meta: cstring,  ( a u)  ( compile a counted string - with prefix length byte)
   dup c, ( count)  string,  0 align, ;

compiler: "
   \t (") target-compile,  char " parse  cstring, ;

: nums  " 123456789" ;
: fox   " The quick brown fox jumps over the lazy dog" ;

( NOTE: From what I can glean from the - as usually terrible - TI
  documentation, using CRCDI shifts the data in LSB first, while using
  CRCDIRB shifts the data MSB first.

  In order to get the same results from the chip that I get from my C and
  Forth implementations [see src/crc16.c and mu/lib/crc16.mu4], I have to use
  CRCDIRB [data in, reverse bits to input the data, and CRCINIRES to read
  the result.

  Which register does the BSL code use?)

: crc16  ( a u - crc)
   0ffff CRCINIRES ! ( init)
   for  count  CRCDIRB c!  next  drop
   CRCINIRES @
   CRCRESR @ ;

( Now try using the CRC32 peripheral's CRC16 registers.)
: crc16-two  ( a u - crc)
   0ffff CRC16INIRES ! ( init)
   for  count  CRC16DIRB c!  next  drop
   CRC16INIRES @
   CRC16RESR @ ;

: crc16-test
   nums crc16  nums crc16-two ;


( What about doing a 32-bit CRC?)

comment %crc-32-definition%

   From Phil Koopman's CRC site:

   # 0x82608edb = x^32 +x^26 +x^23 +x^22 +x^16 +x^12 +x^11 +x^10 +x^8 +x^7 +x^5 +x^4 +x^2 +x +1
   (0x82608edb; 0x104c11db7) <=> (0xedb88320; 0x1db710641)

   From the family user manual:

   CRC32-ISO3309 with f(x)=x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1
   MSB is bit 0.

%crc-32-definition%

( Curiously, in the case of the CRC-32, the only way to get results that
  conform to other implementations - such as Lammert Bies's at
  https://www.lammertbies.nl/comm/info/crc-calculation.html - is to use the
  non-bit-reversed input register, the bit-reversed result registers, and to
  invert the result.)

: crc32  ( a u - crc)
   0ffff dup CRC32INIRESW0 !  CRC32INIRESW1 ! ( init)
   for  count  CRC32DI c!  next  drop
   CRC32RESRW1 @ invert  CRC32RESRW0 @ invert  ( low high)
   CRC32INIRESW0 @ invert  CRC32INIRESW1 @ invert ;

: crc32-test
   nums crc32  fox crc32 ;
