( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading MSP430 FR6989 LCD_C support

__meta
hex

%011_101_00 equ lcd-blink-rate   ( /3, /16384)

code lcd-init-hardware
   -- Turn off LCD controller before making any changes.
   1 # LCDCCTL0 & bic      -- clear LCD_ON

   %00000_100_00_011_100 # LCDCCTL0 & mov    -- /1, /16, ACLK, 4-mux, LCDSON

   lcd-blink-rate # LCDCBLKCTL & mov         -- set blink rate, turn blinking off

   -- Grab S4, S6-21, S27-31, and S35-39 as LCD segment pins.
   %1111_1111_1101_0000 # LCDCPCTL0 & mov    -- 4, 6 to 15
   %1111_1000_0011_1111 # LCDCPCTL1 & mov    -- 16 to 21, 27 to 31
   %0000_0000_1111_1000 # LCDCPCTL2 & mov    -- 35 to 39

   -- Enable port selects for COM0 to COM3?!? Example code did not do
   -- this...

   -- Generate Vlcd internally. Set to 3.02V (LCD datasheet says 3.0V).
   -- Formula is: 2.60V + (VLCDx - 1) * 0.06V
   %000_1000_0_0000_1_00_0 # LCDCVCTL & mov  -- charge pump enable, 1/3 bias
                                             -- generate Vlcd internally
                                             -- 3.02V (VLCDx = 8)

   -- Enable clock sync for charge pump, and allow ADC12 to turn charge
   -- pump off during conversions (for lower noise).
   %1000_0000_0000_0001 # LCDCCPCTL & mov

   -- Clear main and blinking memories.
   6 # LCDCMEMCTL & mov                -- set LCDCLRBM and LCDCLRM
   begin  LCDCMEMCTL & tst  0= until   -- wait until both bits are zero

   -- Fire it up!!
   1 # LCDCCTL0 & bis      -- set LCD_ON
   next  ;c

( Here are the names of the segments:

   +---a---+
   |\  |  /|
   f h j k b
   |  \|/  |
   +-g-+-m-+
   |  /|\  |
   e q p n c
   |/  |  \|
   +---d---+

  As a word value, we can represent them thus:

    abcd_efgm_hjkp_qXnY

  NOTE: X and Y are decimal points, colons, negative signs, and other
  punctuation - mostly. When writing a character value to display memory we
  should be careful not to clobber X and Y.

  For completeness, here is a map of each character position, and what each
  of the bits means, segment-wise:

  0  abcd_efgm_hjkp_q-n.   neg, dp
  1  abcd_efgm_hjkp_q:n.   colon, dp
  2  abcd_efgm_hjkp_q^n.   antenna [^], dp
  3  abcd_efgm_hjkp_q:n.   colon, dp
  4  abcd_efgm_hjkp_q*n.   degree [*], dp
  5  abcd_efgm_hjkp_qTnR   Tx, Rx
)

( Because TI's engineers screwed the pooch on how they laid out the
  segment lines, it's not always possible to read or write a single
  "character" - the word-wide bitmap of segments illustrated above - as a
  single 16-bit word, because sometimes it crosses a word boundary - ie, it
  starts on an odd address and ends on the next higher even address.

  You can see from the pos>off table that only positions 3 and 4 start on
  even addresses.

  So we can't use @ and !. We have to have special words instead. Grr.)

code l@  ( addr - segments)
   top )+ x movb  x swpb  top ) y movb  y x bis  x top mov  next  ;c

code l!  ( segments addr)
   x pop  x 1 top +) movb  x swpb  x top ) movb  top pop  next  ;c

( lcd-mem stores the address of the beginning of the *current* LCD memory;
  either the main memory or the blinking memory.)

variable lcd-mem
: >lcd    LCDM  lcd-mem ! ;  ( XXX create/;code/does> words instead?)
: >blink  LCDBM lcd-mem ! ;

: lcd-init  lcd-init-hardware  >lcd ;

meta: blink-style  create ,  ;code
   w ) w mov  lcd-blink-rate # w bis  w LCDCBLKCTL & mov  next  ;c

( Set a blinking style:

  steady      - no blinking
  blinking    - segments that are on in the blinking memory blink
  alternating - display alternates between main and blinking memories
)
%00 blink-style lcd-steady
%01 blink-style lcd-blinking
%11 blink-style lcd-alternating

( Map character position to memory offset. pos is 0 to 5, counting
  left-to-right.)

here equ pos>off  9 c,  5 c,  3 c,  #18 c, #14 c,  7 c,

code lcd  ( pos - addr)
   ' lcd-mem >value & x mov ( fetch lcd-mem value)
   pos>off top +) top movb  x top add  next  ;c

: lcd!  ( segments pos)    lcd l! ;
: lcd@  ( pos - segments)  lcd l@ ;

( Battery segments:  b5 b3 b1 []  0000  b6 b4 b2 batt  0000)
( XXX set and clear, rather than store? And do we want to fetch?)
code lcd-batt!  ( segments)
   ' lcd-mem >value & x mov ( fetch lcd-mem value)
   top #13 x +) movb  top swpb
   top #17 x +) movb  top pop  next  ;c

( Special segments:  0000 tmr hrt rec !)
( XXX set and clear, rather than store? And do we want to fetch?)
code lcd-special!  ( segments)
   ' lcd-mem >value & x mov ( fetch lcd-mem value)
   top #2 x +) movb  top pop  next  ;c

( Now we need to map punctuation, digits, and letters to bitmaps of segments.
  Easy! But first - we need some help from the meta-compiler! How about a
  word to create tables? Since these are read-only lookup tables, it makes
  sense to do the "fetch" as part of the shared "behaviour". We pass an index
  to the table, and it gives us the [word] value at that index.)

meta: table  create  ;code  ( index - value)
                     top top add  w top add  top ) top mov  next  ;c

( ASCII characters 32 to 95, inclusive. Subtract 32 from the ASCII value,
  then index into the table, which contains a "bitmap" of segments.)

table glyph
--    SPC      !      "      #      $      %      &      '
     0000 , 0000 , 0000 , 0000 , b750 , 2428 , 0000 , 0000 ,

--      (      )      *      +      ,      -      .      /
     0000 , 0000 , 03fa , 0350 , 0000 , 0300 , 0000 , 0028 ,

--      0      1      2      3      4      5      6      7
     fc28 , 6020 , db00 , f300 , 6700 , b700 , bf00 , e400 , ( alt 7's: 8028 8328)

--      8      9      :      ;      <      =      >      ?
     ff00 , f700 , 0000 , 0000 , 0022 , 1300 , 0088 , c110 ,

--      @      A      B      C      D      E      F      G
     fa02 , ef00 , f150 , 9c00 , f050 , 9f00 , 8f00 , bd00 ,

--      H      I      J      K      L      M      N      O
     6f00 , 9050 , 7800 , 0e22 , 1c00 , 6ca0 , 6c82 , fc00 ,

--      P      Q      R      S      T      U      V      W
     cf00 , fc02 , cf02 , b700 , 8050 , 7c00 , 0c28 , 6c0a ,

--      X      Y      Z      [      \      ]      ^      _
     00aa , 00b0 , 9028 , 9c00 , 0082 , f000 , 001a , 1000 ,

: ascii  ( char - segments)  20 - glyph ;

( Fill memory, starting at a for u _words_, with value v)
code fill  ( a u v)
   y pop ( count)   x pop ( addr)
   begin   top x ) mov   2 # x add   1 # y sub   0= until
   top pop   next ;c

: erase  ( a u)   0 fill ;

: clear  ( clear current LCD memory - normal or blinking)
   lcd-mem @  #12  erase ;

( String display.)
: count   ( a - a+1 byte)   dup 1+  swap c@ ;  ( a species of c@+)
: aligned   1+ -2 and ;
: show    ( a u)   clear  0 do  count ascii  i lcd!  loop  drop ;
: (")   r>  count  2dup + aligned  >r ;

meta: cstring,  ( a u)  ( compile a counted string - with prefix length byte)
   dup c, ( count)  string,  0 align, ;

compiler: "
   \t (") target-compile,  char " parse  cstring, ;

: duo  ( a1 u1 a2 u2)   >blink show  >lcd show  lcd-alternating ;

: meow      " HELLO"  " KITTY"   duo ;
: howdy     " HOWDY"  " PODNER"  duo ;
: nums      " 01234"  " 56789"   duo ;
: sneaker   " PUMA"   " ADIDAS"  duo ;

( Four characters to make a "spinner": - \ | / )
table twiddle
   0300 , 0082 , 0050 , 0028 ,

( twiddle demo)
: delay  ( n)  for  -1 for next  next ;
: spin  ( n)  0 do  i 3 and twiddle  5 lcd l!  2 delay  loop ;

( Other characters and punctuation to try out:
   comma     0008
   6-star    03aa
   8-star    03fa
   Gamma     8c00
   Sigma     9088
   lambda    008a
   slash     0028
   backslash 0082
   bottom    1050
   turnstile 0150
   plus      0350
   minus     0300
)
