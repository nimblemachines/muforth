( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2021 David Frech. (Read the LICENSE for details.)

loading Compiling for MSP430F5529

( Device equates for the MSP4305529.)

hex

( First, a few defining words, which we'll use to load the "equates".)
: equ     ( offset)  current preserve  .equates. definitions  constant ;
: vector  ( offset)  equ ;
: |  \ -- ;  ( | ignores the bit-fields that follow each register name)
: aka   .equates. chain' execute ;  ( for making synonyms)

1800 constant @info
#512 constant #info

( F5529 has USB RAM.)
1c00 constant @usbram
2 Ki constant #usbram

( Normal RAM.)
2400 constant @ram
8 Ki constant #ram

( USB/UART BSL code)
1000 constant @bsl
2 Ki constant #bsl

0_4400 constant @flash
2_4400 @flash - constant #flash  ( 128 Ki, exactly)

( Reset and interrupt vectors are the last 128 bytes of the flash.)
0ff80 constant @vectors
 0080 constant #vectors

( Vectors)
0fffe vector Vreset

( 256 Ki address space, but we only go up to 2_4400.)
( XXX We don't have CPUX instructions - yet! - to access anything outside
  of the 64 KiB space, so let's stick with that for now.)
( XXX Also, setting #addrbits to 18 screws up display in the memory dumper
  if connected to the target. The second line is not indented far enough to
  align with the contents of the image memory.)

-- #18 constant #addrbits
#16 constant #addrbits

( Watchdog timer key)
5a00 equ WDTKEY

( Flash memory controller key)
0a500 equ FKEY

( Bits for FCTL1)
0002 equ FERASE  ( segment erase)
0040 equ FWRT

( Bits for FCTL3)
0001 equ FBUSY   ( for RAM-based code)
0010 equ FLOCK
0040 equ FLOCKA  ( lock bit for info segment A)

( Port mapping key - reads as 96a5)
2d52 equ PMAPKEY

( Power management module key)
0a500 equ PMMKEY


( For defining multiple peripheral registers that share a base address.)
: preg  ( base offset - base)  over +  equ ;


( Equates for MSP430F5529. Extracted from the datasheet using Lua!)

( Table 6-16. Special Function Registers)
0100
00 preg SFRIE1          | SFR interrupt enable
02 preg SFRIFG1         | SFR interrupt flag
04 preg SFRRPCR         | SFR reset pin control
drop

( Table 6-17. PMM Registers)
0120
00 preg PMMCTL0         | PMM control 0
02 preg PMMCTL1         | PMM control 1
04 preg SVSMHCTL        | SVS high-side control
06 preg SVSMLCTL        | SVS low-side control
0c preg PMMIFG          | PMM interrupt flags
0e preg PMMIE           | PMM interrupt enable
10 preg PM5CTL0         | PMM power mode 5 control
drop

( Table 6-18. Flash Control Registers)
0140
00 preg FCTL1           | Flash control 1
04 preg FCTL3           | Flash control 3
06 preg FCTL4           | Flash control 4
drop

( Table 6-19. CRC16 Registers)
0150
00 preg CRC16DI         | CRC data input
02 preg CRCDIRB         | CRC data input reverse byte
04 preg CRCINIRES       | CRC initialization and result
06 preg CRCRESR         | CRC result reverse byte
drop

( Table 6-20. RAM Control Registers)
0158
00 preg RCCTL0          | RAM control 0
drop

( Table 6-21. Watchdog Registers)
015c
00 preg WDTCTL          | Watchdog timer control
drop

( Table 6-22. UCS Registers)
0160
00 preg UCSCTL0         | UCS control 0
02 preg UCSCTL1         | UCS control 1
04 preg UCSCTL2         | UCS control 2
06 preg UCSCTL3         | UCS control 3
08 preg UCSCTL4         | UCS control 4
0a preg UCSCTL5         | UCS control 5
0c preg UCSCTL6         | UCS control 6
0e preg UCSCTL7         | UCS control 7
10 preg UCSCTL8         | UCS control 8
drop

( Table 6-23. SYS Registers)
0180
00 preg SYSCTL          | System control
02 preg SYSBSLC         | Bootloader configuration area
06 preg SYSJMBC         | JTAG mailbox control
08 preg SYSJMBI0        | JTAG mailbox input 0
0a preg SYSJMBI1        | JTAG mailbox input 1
0c preg SYSJMBO0        | JTAG mailbox output 0
0e preg SYSJMBO1        | JTAG mailbox output 1
18 preg SYSBERRIV       | Bus error vector generator
1a preg SYSUNIV         | User NMI vector generator
1c preg SYSSNIV         | System NMI vector generator
1e preg SYSRSTIV        | Reset vector generator
drop

( Table 6-24. Shared Reference Registers)
01b0
00 preg REFCTL          | Shared reference control
drop

( Table 6-25. Port Mapping Registers)
01c0
00 preg PMAPKEYID       | Port mapping key and ID
02 preg PMAPCTL         | Port mapping control
drop

( Table 6-25. Port Mapping Registers)
01e0
00 preg P4MAP0          | Port P4.0 mapping
01 preg P4MAP1          | Port P4.1 mapping
02 preg P4MAP2          | Port P4.2 mapping
03 preg P4MAP3          | Port P4.3 mapping
04 preg P4MAP4          | Port P4.4 mapping
05 preg P4MAP5          | Port P4.5 mapping
06 preg P4MAP6          | Port P4.6 mapping
07 preg P4MAP7          | Port P4.7 mapping
drop

( Table 6-26. Port P1 and P2 Registers)
0200
00 preg P1IN            | Port P1 input
02 preg P1OUT           | Port P1 output
04 preg P1DIR           | Port P1 direction
06 preg P1REN           | Port P1 resistor enable
08 preg P1DS            | Port P1 drive strength
0a preg P1SEL           | Port P1 selection
0e preg P1IV            | Port P1 interrupt vector word
18 preg P1IES           | Port P1 interrupt edge select
1a preg P1IE            | Port P1 interrupt enable
1c preg P1IFG           | Port P1 interrupt flag
01 preg P2IN            | Port P2 input
03 preg P2OUT           | Port P2 output
05 preg P2DIR           | Port P2 direction
07 preg P2REN           | Port P2 resistor enable
09 preg P2DS            | Port P2 drive strength
0b preg P2SEL           | Port P2 selection
1e preg P2IV            | Port P2 interrupt vector word
19 preg P2IES           | Port P2 interrupt edge select
1b preg P2IE            | Port P2 interrupt enable
1d preg P2IFG           | Port P2 interrupt flag
drop

( Table 6-27. Port P3 and P4 Registers)
0220
00 preg P3IN            | Port P3 input
02 preg P3OUT           | Port P3 output
04 preg P3DIR           | Port P3 direction
06 preg P3REN           | Port P3 resistor enable
08 preg P3DS            | Port P3 drive strength
0a preg P3SEL           | Port P3 selection
01 preg P4IN            | Port P4 input
03 preg P4OUT           | Port P4 output
05 preg P4DIR           | Port P4 direction
07 preg P4REN           | Port P4 resistor enable
09 preg P4DS            | Port P4 drive strength
0b preg P4SEL           | Port P4 selection
drop

( Table 6-28. Port P5 and P6 Registers)
0240
00 preg P5IN            | Port P5 input
02 preg P5OUT           | Port P5 output
04 preg P5DIR           | Port P5 direction
06 preg P5REN           | Port P5 resistor enable
08 preg P5DS            | Port P5 drive strength
0a preg P5SEL           | Port P5 selection
01 preg P6IN            | Port P6 input
03 preg P6OUT           | Port P6 output
05 preg P6DIR           | Port P6 direction
07 preg P6REN           | Port P6 resistor enable
09 preg P6DS            | Port P6 drive strength
0b preg P6SEL           | Port P6 selection
drop

( Table 6-29. Port P7 and P8 Registers)
0260
00 preg P7IN            | Port P7 input
02 preg P7OUT           | Port P7 output
04 preg P7DIR           | Port P7 direction
06 preg P7REN           | Port P7 resistor enable
08 preg P7DS            | Port P7 drive strength
0a preg P7SEL           | Port P7 selection
01 preg P8IN            | Port P8 input
03 preg P8OUT           | Port P8 output
05 preg P8DIR           | Port P8 direction
07 preg P8REN           | Port P8 resistor enable
09 preg P8DS            | Port P8 drive strength
0b preg P8SEL           | Port P8 selection
drop

( Table 6-30. Port J Registers)
0320
00 preg PJIN            | Port PJ input
02 preg PJOUT           | Port PJ output
04 preg PJDIR           | Port PJ direction
06 preg PJREN           | Port PJ resistor enable
08 preg PJDS            | Port PJ drive strength
drop

( Table 6-31. TA0 Registers)
0340
00 preg TA0CTL          | TA0 control
02 preg TA0CCTL0        | Capture/compare control 0
04 preg TA0CCTL1        | Capture/compare control 1
06 preg TA0CCTL2        | Capture/compare control 2
08 preg TA0CCTL3        | Capture/compare control 3
0a preg TA0CCTL4        | Capture/compare control 4
10 preg TA0R            | TA0 counter
12 preg TA0CCR0         | Capture/compare 0
14 preg TA0CCR1         | Capture/compare 1
16 preg TA0CCR2         | Capture/compare 2
18 preg TA0CCR3         | Capture/compare 3
1a preg TA0CCR4         | Capture/compare 4
20 preg TA0EX0          | TA0 expansion 0
2e preg TA0IV           | TA0 interrupt vector
drop

( Table 6-32. TA1 Registers)
0380
00 preg TA1CTL          | TA1 control
02 preg TA1CCTL0        | Capture/compare control 0
04 preg TA1CCTL1        | Capture/compare control 1
06 preg TA1CCTL2        | Capture/compare control 2
10 preg TA1R            | TA1 counter
12 preg TA1CCR0         | Capture/compare 0
14 preg TA1CCR1         | Capture/compare 1
16 preg TA1CCR2         | Capture/compare 2
20 preg TA1EX0          | TA1 expansion 0
2e preg TA1IV           | TA1 interrupt vector
drop

( Table 6-33. TB0 Registers)
03c0
00 preg TB0CTL          | TB0 control
02 preg TB0CCTL0        | Capture/compare control 0
04 preg TB0CCTL1        | Capture/compare control 1
06 preg TB0CCTL2        | Capture/compare control 2
08 preg TB0CCTL3        | Capture/compare control 3
0a preg TB0CCTL4        | Capture/compare control 4
0c preg TB0CCTL5        | Capture/compare control 5
0e preg TB0CCTL6        | Capture/compare control 6
10 preg TB0R            | TB0 counter
12 preg TB0CCR0         | Capture/compare 0
14 preg TB0CCR1         | Capture/compare 1
16 preg TB0CCR2         | Capture/compare 2
18 preg TB0CCR3         | Capture/compare 3
1a preg TB0CCR4         | Capture/compare 4
1c preg TB0CCR5         | Capture/compare 5
1e preg TB0CCR6         | Capture/compare 6
20 preg TB0EX0          | TB0 expansion 0
2e preg TB0IV           | TB0 interrupt vector
drop

( Table 6-34. TA2 Registers)
0400
00 preg TA2CTL          | TA2 control
02 preg TA2CCTL0        | Capture/compare control 0
04 preg TA2CCTL1        | Capture/compare control 1
06 preg TA2CCTL2        | Capture/compare control 2
10 preg TA2R            | TA2 counter
12 preg TA2CCR0         | Capture/compare 0
14 preg TA2CCR1         | Capture/compare 1
16 preg TA2CCR2         | Capture/compare 2
20 preg TA2EX0          | TA2 expansion 0
2e preg TA2IV           | TA2 interrupt vector
drop

( Table 6-35. Real-Time Clock Registers)
04a0
00 preg RTCCTL0         | RTC control 0
01 preg RTCCTL1         | RTC control 1
02 preg RTCCTL2         | RTC control 2
03 preg RTCCTL3         | RTC control 3
08 preg RTCPS0CTL       | RTC prescaler 0 control
0a preg RTCPS1CTL       | RTC prescaler 1 control
0c preg RTCPS0          | RTC prescaler 0
0d preg RTCPS1          | RTC prescaler 1
0e preg RTCIV           | RTC interrupt vector word
10 preg RTCSEC          | RTC seconds
11 preg RTCMIN          | RTC minutes
12 preg RTCHOUR         | RTC hours
13 preg RTCDOW          | RTC day of week
10 preg RTCNT1          | RTC counter 1
11 preg RTCNT2          | RTC counter 2
12 preg RTCNT3          | RTC counter 3
13 preg RTCNT4          | RTC counter 4
14 preg RTCDAY          | RTC day
15 preg RTCMON          | RTC month
16 preg RTCYEARL        | RTC year low
17 preg RTCYEARH        | RTC year high
18 preg RTCAMIN         | RTC alarm minutes
19 preg RTCAHOUR        | RTC alarm hours
1a preg RTCADOW         | RTC alarm day of week
1b preg RTCADAY         | RTC alarm days
drop

( Table 6-36. 32-Bit Hardware Multiplier Registers)
04c0
00 preg MPY             | 16-bit operand 1 – multiply
02 preg MPYS            | 16-bit operand 1 – signed multiply
04 preg MAC             | 16-bit operand 1 – multiply accumulate
06 preg MACS            | 16-bit operand 1 – signed multiply accumulate
08 preg OP2             | 16-bit operand 2
0a preg RESLO           | 16 × 16 result low word
0c preg RESHI           | 16 × 16 result high word
0e preg SUMEXT          | 16 × 16 sum extension
10 preg MPY32L          | 32-bit operand 1 – multiply low word
12 preg MPY32H          | 32-bit operand 1 – multiply high word
14 preg MPYS32L         | 32-bit operand 1 – signed multiply low word
16 preg MPYS32H         | 32-bit operand 1 – signed multiply high word
18 preg MAC32L          | 32-bit operand 1 – multiply accumulate low word
1a preg MAC32H          | 32-bit operand 1 – multiply accumulate high word
1c preg MACS32L         | 32-bit operand 1 – signed multiply accumulate low word
1e preg MACS32H         | 32-bit operand 1 – signed multiply accumulate high word
20 preg OP2L            | 32-bit operand 2 – low word
22 preg OP2H            | 32-bit operand 2 – high word
24 preg RES0            | 32 × 32 result 0 – least significant word
26 preg RES1            | 32 × 32 result 1
28 preg RES2            | 32 × 32 result 2
2a preg RES3            | 32 × 32 result 3 – most significant word
2c preg MPY32CTL0       | MPY32 control 0
drop

( Table 6-37. DMA General Control)
0500
00 preg DMACTL0         | DMA module control 0
02 preg DMACTL1         | DMA module control 1
04 preg DMACTL2         | DMA module control 2
06 preg DMACTL3         | DMA module control 3
08 preg DMACTL4         | DMA module control 4
0e preg DMAIV           | DMA interrupt vector
drop

( Table 6-37. DMA Channel 0)
0510
00 preg DMA0CTL         | DMA channel 0 control
02 preg DMA0SAL         | DMA channel 0 source address low
04 preg DMA0SAH         | DMA channel 0 source address high
06 preg DMA0DAL         | DMA channel 0 destination address low
08 preg DMA0DAH         | DMA channel 0 destination address high
0a preg DMA0SZ          | DMA channel 0 transfer size
drop

( Table 6-37. DMA Channel 1)
0520
00 preg DMA1CTL         | DMA channel 1 control
02 preg DMA1SAL         | DMA channel 1 source address low
04 preg DMA1SAH         | DMA channel 1 source address high
06 preg DMA1DAL         | DMA channel 1 destination address low
08 preg DMA1DAH         | DMA channel 1 destination address high
0a preg DMA1SZ          | DMA channel 1 transfer size
drop

( Table 6-37. DMA Channel 2)
0530
00 preg DMA2CTL         | DMA channel 2 control
02 preg DMA2SAL         | DMA channel 2 source address low
04 preg DMA2SAH         | DMA channel 2 source address high
06 preg DMA2DAL         | DMA channel 2 destination address low
08 preg DMA2DAH         | DMA channel 2 destination address high
0a preg DMA2SZ          | DMA channel 2 transfer size
drop

( Table 6-38. USCI_A0 Registers)
05c0
00 preg UCA0CTL1        | USCI control 1
01 preg UCA0CTL0        | USCI control 0
06 preg UCA0BR0         | USCI baud rate 0
07 preg UCA0BR1         | USCI baud rate 1
08 preg UCA0MCTL        | USCI modulation control
0a preg UCA0STAT        | USCI status
0c preg UCA0RXBUF       | USCI receive buffer
0e preg UCA0TXBUF       | USCI transmit buffer
10 preg UCA0ABCTL       | USCI LIN control
12 preg UCA0IRTCTL      | USCI IrDA transmit control
13 preg UCA0IRRCTL      | USCI IrDA receive control
1c preg UCA0IE          | USCI interrupt enable
1d preg UCA0IFG         | USCI interrupt flags
1e preg UCA0IV          | USCI interrupt vector word
drop

( Table 6-39. USCI_B0 Registers)
05e0
00 preg UCB0CTL1        | USCI synchronous control 1
01 preg UCB0CTL0        | USCI synchronous control 0
06 preg UCB0BR0         | USCI synchronous bit rate 0
07 preg UCB0BR1         | USCI synchronous bit rate 1
0a preg UCB0STAT        | USCI synchronous status
0c preg UCB0RXBUF       | USCI synchronous receive buffer
0e preg UCB0TXBUF       | USCI synchronous transmit buffer
10 preg UCB0I2COA       | USCI I2C own address
12 preg UCB0I2CSA       | USCI I2C slave address
1c preg UCB0IE          | USCI interrupt enable
1d preg UCB0IFG         | USCI interrupt flags
1e preg UCB0IV          | USCI interrupt vector word
drop

( Table 6-40. USCI_A1 Registers)
0600
00 preg UCA1CTL1        | USCI control 1
01 preg UCA1CTL0        | USCI control 0
06 preg UCA1BR0         | USCI baud rate 0
07 preg UCA1BR1         | USCI baud rate 1
08 preg UCA1MCTL        | USCI modulation control
0a preg UCA1STAT        | USCI status
0c preg UCA1RXBUF       | USCI receive buffer
0e preg UCA1TXBUF       | USCI transmit buffer
10 preg UCA1ABCTL       | USCI LIN control
12 preg UCA1IRTCTL      | USCI IrDA transmit control
13 preg UCA1IRRCTL      | USCI IrDA receive control
1c preg UCA1IE          | USCI interrupt enable
1d preg UCA1IFG         | USCI interrupt flags
1e preg UCA1IV          | USCI interrupt vector word
drop

( Table 6-41. USCI_B1 Registers)
0620
00 preg UCB1CTL1        | USCI synchronous control 1
01 preg UCB1CTL0        | USCI synchronous control 0
06 preg UCB1BR0         | USCI synchronous bit rate 0
07 preg UCB1BR1         | USCI synchronous bit rate 1
0a preg UCB1STAT        | USCI synchronous status
0c preg UCB1RXBUF       | USCI synchronous receive buffer
0e preg UCB1TXBUF       | USCI synchronous transmit buffer
10 preg UCB1I2COA       | USCI I2C own address
12 preg UCB1I2CSA       | USCI I2C slave address
1c preg UCB1IE          | USCI interrupt enable
1d preg UCB1IFG         | USCI interrupt flags
1e preg UCB1IV          | USCI interrupt vector word
drop

( Table 6-42. ADC12_A Registers)
0700
00 preg ADC12CTL0       | Control 0
02 preg ADC12CTL1       | Control 1
04 preg ADC12CTL2       | Control 2
0a preg ADC12IFG        | Interrupt flag
0c preg ADC12IE         | Interrupt enable
0e preg ADC12IV         | Interrupt vector word
10 preg ADC12MCTL0      | ADC memory control 0
11 preg ADC12MCTL1      | ADC memory control 1
12 preg ADC12MCTL2      | ADC memory control 2
13 preg ADC12MCTL3      | ADC memory control 3
14 preg ADC12MCTL4      | ADC memory control 4
15 preg ADC12MCTL5      | ADC memory control 5
16 preg ADC12MCTL6      | ADC memory control 6
17 preg ADC12MCTL7      | ADC memory control 7
18 preg ADC12MCTL8      | ADC memory control 8
19 preg ADC12MCTL9      | ADC memory control 9
1a preg ADC12MCTL10     | ADC memory control 10
1b preg ADC12MCTL11     | ADC memory control 11
1c preg ADC12MCTL12     | ADC memory control 12
1d preg ADC12MCTL13     | ADC memory control 13
1e preg ADC12MCTL14     | ADC memory control 14
1f preg ADC12MCTL15     | ADC memory control 15
20 preg ADC12MEM0       | Conversion memory 0
22 preg ADC12MEM1       | Conversion memory 1
24 preg ADC12MEM2       | Conversion memory 2
26 preg ADC12MEM3       | Conversion memory 3
28 preg ADC12MEM4       | Conversion memory 4
2a preg ADC12MEM5       | Conversion memory 5
2c preg ADC12MEM6       | Conversion memory 6
2e preg ADC12MEM7       | Conversion memory 7
30 preg ADC12MEM8       | Conversion memory 8
32 preg ADC12MEM9       | Conversion memory 9
34 preg ADC12MEM10      | Conversion memory 10
36 preg ADC12MEM11      | Conversion memory 11
38 preg ADC12MEM12      | Conversion memory 12
3a preg ADC12MEM13      | Conversion memory 13
3c preg ADC12MEM14      | Conversion memory 14
3e preg ADC12MEM15      | Conversion memory 15
drop

( Table 6-43. Comparator_B Registers)
08c0
00 preg CBCTL0          | Comp_B control 0
02 preg CBCTL1          | Comp_B control 1
04 preg CBCTL2          | Comp_B control 2
06 preg CBCTL3          | Comp_B control 3
0c preg CBINT           | Comp_B interrupt
0e preg CBIV            | Comp_B interrupt vector word
drop

( Table 6-44. USB Configuration Registers)
0900
00 preg USBKEYID        | USB key and ID
02 preg USBCNF          | USB module configuration
04 preg USBPHYCTL       | USB PHY control
08 preg USBPWRCTL       | USB power control
10 preg USBPLLCTL       | USB PLL control
12 preg USBPLLDIV       | USB PLL divider
14 preg USBPLLIR        | USB PLL interrupts
drop

( Table 6-45. USB Control Registers)
0920
00 preg USBIEP0CNF      | Input endpoint_0 configuration
01 preg USBIEP0CNT      | Input endpoint_0 byte count
02 preg USBOEP0CNF      | Output endpoint_0 configuration
03 preg USBOEP0CNT      | Output endpoint_0 byte count
0e preg USBIEPIE        | Input endpoint interrupt enables
0f preg USBOEPIE        | Output endpoint interrupt enables
10 preg USBIEPIFG       | Input endpoint interrupt flags
11 preg USBOEPIFG       | Output endpoint interrupt flags
12 preg USBIV           | USB interrupt vector
16 preg USBMAINT        | USB maintenance
18 preg USBTSREG        | Timestamp
1a preg USBFN           | USB frame number
1c preg USBCTL          | USB control
1d preg USBIE           | USB interrupt enables
1e preg USBIFG          | USB interrupt flags
1f preg USBFUNADR       | Function address
drop

( End of auto-generated equates for MSP430F5529.)


( Make a few synonyms for the chat code.)
( For get-byte and put-byte)
aka UCA1IFG   equ chat-uart-ifg
aka UCA1RXBUF equ chat-uart-rxbuf
aka UCA1TXBUF equ chat-uart-txbuf
aka UCA1CTL0  equ chat-uart-ctl0
aka UCA1CTL1  equ chat-uart-ctl1

( Connect P4.4 to UART TXD, P4.5 to UART RXD. P4 uses port mapping
  registers, so there is only one SEL register. Setting a P4SEL bit to 1
  selects the secondary function specified by the port bit's port mapping
  selection register. We shouldn't have to mess with these because they
  default to USCI_A1.)
aka P4SEL equ chat-port-sel0

%0011_0000 constant chat-port-sel0-ones

( Baud rate divisor and modulation bits. Register values are *decimal*.

  Calculation is as follows:

  clock 2* bps /  1+ 2/  16 /mod  -- yields UCBFx UCBRx

  Eg: 16,000,000  2* 115200 /  1+ 2/  16 /mod . . 8 11  Ok)

.ifdef bsl-ram-chat  #8,000,000  .else  #16,000,000  .then

.ifndef slow-chat  ( compute values for 115,200 bps)
   2*  #115,200 /  1+ 2/  #16 /mod   -- UCBFx UCBRx
.else              ( compute for 9600 bps)
   2*     #9600 /  1+ 2/  #16 /mod   -- UCBFx UCBRx
.then

( UCBRx)
aka UCA1BR0   2constant chat-uart-brw

( UCBFx) 4 << 1 + ( UCOS16=1)
aka UCA1MCTL  2constant chat-uart-mctl
