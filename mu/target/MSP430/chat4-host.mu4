| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading MSP430 serial chat v4 (host)

hex

| Chat v4 responds to the following commands. NOTE: these are hex values!
|
| 00 - 3f  Idle        - these command bytes are ignored
|
| 40  VersionAddr      - get the address of the version commit
| 41  SetAddr          - set the memory address pointer
| 42  GetStatus        - get SP, PC, SR, and CP
| 43  Run              - set SP, PC, SR, CP, and execute
| 44  ReadWords        - read N words, incrementing by 2 as we go
| 45  WriteWord        - write a word to memory, incr pointer by 2
| 46  WriteByte        - write a byte to memory, incr pointer by 1
| 47  SetFlashCmd      - set flash command, clear flash status
| 48  GetFlashStatus   - read accumulated flash status word
| 49  FlashWord        - write a word to flash, incr pointer
|
| 4a - ff  Idle        - these command bytes are ignored

: cx.VersionAddr      ( )      40 >cmd     ;
: cx.SetAddr          ( a)     41 >cmd  >w ;
: cx.GetStatus        ( - sp sr cp)
                               42 >cmd  w>  w> drop ( pc)  w> w> ;
: cx.Run              ( pc sr cp)
                               43 >cmd  rot >w  swap >w  >w ;
: cx.ReadWords        ( n)     44 >cmd  >b ;  ( then read streamed bytes)
: cx.WriteWord        ( w)     45 >cmd  >w ;
: cx.WriteByte        ( b)     46 >cmd  >b ;
: cx.SetFlashCmd      ( cmd)   47 >cmd  >w ;
: cx.GetFlashStatus   ( - status)
                               48 >cmd  w> ;
: cx.FlashWord        ( w)     49 >cmd  >w ;

| Shorthand for reading a single word.
: ReadWord   ( - w)   1 cx.ReadWords w> ;

: c.setup-chunk  ( buf a u - #words)
   resync  swap cx.SetAddr  swap m !  1+ 2/ ( words) ;

: c.ReadChunk    ( buf a u)
   c.setup-chunk  dup cx.ReadWords  for  w> >hilo  m& m&  next ;

: c.WriteChunk   ( buf a u)
   c.setup-chunk  for  m* m* lohi>  cx.WriteWord  next ;

( FRAM devices have an MPUCTL0 register)
.equates. .contains MPUCTL0 .if

: unlock-mpu
   \eq MPUCTL0 cx.SetAddr  [ \eq MPUKEY 1+ #] cx.WriteWord ;

: lock-mpu
   [ \eq MPUCTL0 1+ #] cx.SetAddr  0 cx.WriteByte ;

: c.ErasePage    ( a - fail?)  ( XXX - no-op?)  drop  0 ;

: c.FlashChunk   ( buf a u - fail?)
   unlock-mpu
   \eq MPUSAM  cx.SetAddr     ReadWord 0200 or  ( enable W bit for segment3)
   \eq MPUSAM  cx.SetAddr  cx.WriteWord
   c.WriteChunk
   lock-mpu  0 ;

.then

( Flash devices have an FCTL1 register.)
.equates. .contains FCTL1 .if

: ?flash-status   ( - fail?)   cx.GetFlashStatus  84 and ;

: c.ErasePage   ( a - fail?)
   [ \eq FERASE  \eq FKEY + #]  cx.SetFlashCmd
   cx.SetAddr  0 cx.FlashWord  ?flash-status ;

: c.FlashChunk  ( buf a u - fail?)
   [ \eq FWRT    \eq FKEY + #]  cx.SetFlashCmd
   c.setup-chunk  for  m* m* lohi>  cx.FlashWord  next  ?flash-status ;

.then

| chat4 rewrites SP with the memory pointer when we execute cx.Run, so we
| have to pass SP back and forth.
variable chat-sp

| Likewise, we don't really care about the status register, but chat passes
| it back and forth.
variable chat-sr

: c.Status   ( - dp)  cx.GetStatus  -rot  chat-sr !  chat-sp ! ;
: c.Run      ( pc dp)  chat-sp @ cx.SetAddr  chat-sr @ swap  cx.Run ;

: get-version  ( - n)   cx.VersionAddr  2 cx.ReadWords w> w> ( lo hi)  10 << + ;

| Capture chat PC to determine if chat is running in ram or flash.
: get-chat-pc
   c.Status drop  ( set up chat-sp and chat-sr for later)
   chat-sp @  4 +  cx.SetAddr  ReadWord  ( initial pc) ;
