( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading MSP430 assembler

( NOTE: This code only assembles instructions for the CPU. It does _not_
  generate any CPUX instructions!)

hex

( Support for inline asm in any colon word.)
compiler
: asm{   __inline-asm ;  ( start assembler)
: }      ] ;  ( exit assembler mode and restart colon compiler)
definer
: }   __definer-colon ;  ( when compiling via meta: return to definer : )
forth

: reg   constant ;

assembler
( Special-purpose registers)
 0 reg pc
 1 reg sp
 2 reg sr  ( also CG1)
 3 reg r3  ( also CG2)

( General-purpose registers)
 4 reg r4
 5 reg r5
 6 reg r6
 7 reg r7

 8 reg r8
 9 reg r9
0a reg r10
0b reg r11

0c reg r12
0d reg r13
0e reg r14
0f reg r15
forth

( Addressing modes.

  TI's documentation is misleading on this subject. They talk about having
  seven source and four destination addressing modes. The reality is that
  there are four source modes, and two dest modes. Period. Using certain
  registers - sr and pc in particular - yield some special cases, and this is
  the source of the supposedly "extra" addressing modes. But I think it's
  healthier to think of them as special cases that result from the semantics
  of the register used, rather than as separate addressing modes.

  As  Source addressing mode
  ==  ======================
  00  Register
  01  Indexed - 16-bit offset follows
  10  Indirect register - like Indexed with 0 offset
  11  Indirect Post-increment

  Ad  Dest addressing mode
  ==  ====================
   0  Register
   1  Indexed - 16-bit offset follows
              - can "fake" Indirect by using index = 0

  Special cases:

  As  Reg  Resulting mode
  ==  ===  ==============
  01   sr  Absolute address
  01   pc  PC-relative address
  11   pc  Immediate mode - 16-bit immediate value follows

  Ad  Reg  Resulting mode
  ==  ===  ==============
   1   sr  Absolute address
   1   pc  PC-relative address
)

( Constant generators.

  Two registers - sr and r3 - can be used to generate a small set of
  constants, obviating the use of a following immediate word or immediate
  offset.

  As  Reg   Constant
  ==  ===   ======================
  00   sr   Normal sr register mode - for reading and writing Status bits
  01   sr   0 - following index used as absolute address
  10   sr   4
  11   sr   8

  00   r3   0
  01   r3   1
  10   r3   2
  11   r3   0ffff, aka -1

  Since r3 always generates constants when used as a source, using it as a
  destination is a great way to throw away a value. Hence, a good "no-op"
  instruction is mov r3, r3.
)

( Output an immediate or offset word if necessary. There are three
  interesting cases:

  As  Reg  Resulting mode          Action
  ==  ===  ==============          ======
  01   r3  Constant 1              none
  01   xx  Indexed/Abs/PC-rel      output word
  11   pc  Immediate               output word
)

( Let's combine offset/immediate and mode/reg info into one word. Makes
  stack shuffling much simpler.)

: off>ea   ( offset - ea)  0ffff and  8 << ;
: ea>off   ( ea - offset)             8 u>> ;

: ea>rm    ( ea - reg/mode)  3f and ;
: ea>reg   ( ea - reg/mode)  0f and ;
: ea>mode  ( ea - reg/mode)  30 and ;

assembler
:  )   (     reg - ea)   %10_0000 or  ( indirect) ;
:  )+  (     reg - ea)   %11_0000 or  ( post-increment) ;

: +)   ( off reg - ea)   over 0= if  \a r3 over u< if  nip  \a )  ^  then then
                         %01_0000 or  ( indexed)  swap off>ea  or ;
forth

: imm>ea   ( imm - ea)  off>ea  asm{  pc )+  }  or ;

assembler
: #   ( imm - ea)
   0ffff and
   dup  0= if  drop  asm{  r3     } ^  then
   dup 1 = if  ( 1)  asm{  r3 +)  } ^  then  ( 1 needed for +)
   dup 2 = if  drop  asm{  r3 )   } ^  then
   dup 0ffff = if  ( -1 or 0ffff)
               drop  asm{  r3 )+  } ^  then
   dup 4 = if  drop  asm{  sr )   } ^  then
   dup 8 = if  drop  asm{  sr )+  } ^  then
   imm>ea ;

:  &   ( offset - ea)   asm{  sr +)  } ;  ( absolute)
forth

: off,     ( ea)  ea>off              \m , ;
: pc-off,  ( ea)  ea>off  \m here  -  \m , ;

: ea,   ( ea)
   dup asm{     1 #   } = if   drop           ^  then  ( const 1)
   dup ea>rm  ( ea reg/mode)
   dup asm{    pc )+  } = if   drop  off,     ^  then  ( immed)
   dup asm{  0 pc +)  } = if   drop  pc-off,  ^  then  ( pc-relative)
             ea>mode 10 = if         off,     ^  then  ( indexed)
   drop ;

: op,   \m , ;


( Instructions are defined in opcode order, so it's easy to see where 
  gaps exist. For some reason TI put the the format I instructions _last_
  in the opcode map.)


( 0000 - 0fff: CPUX instructions:
               mova, cmpa, adda, suba, rrcm, rram, rlam, rrum)


( Format II - 1op instructions:

  o o o o  o o o o  o b R R  r r r r    o=op, b=byte, r=reg, R=mode
)
: fmt2  constant  does> @  ( ea op)   over ea>rm or  op,  ea, ;

( NOTE: I renamed two badly-named instructions: rrc and rra.

    rrc "rotate right thru carry"       is really  ror
    rra "rotate right arithmetically"   is really  asr

  Since every other architecture in the world, practically, calls these
  "ror" and "asr", that's what I'm going to do.)

assembler
( Condition code effects:  V N Z C )
1000 fmt2 ror            ( * * * * )    ( TI's "rrc")
1040 fmt2 rorb
1080 fmt2 swpb           ( - - - - )    ( swap bytes)
( 10c0 unimplemented)
1100 fmt2 asr            ( 0 * * * )    ( TI's "rra")
1140 fmt2 asrb
1180 fmt2 sxt            ( 0 * * * )    ( sign-extend byte to word)
( 11c0 unimplemented)
forth
1200 fmt2 _push          ( - - - - )
1240 fmt2 _pushb
assembler
1280 fmt2 call           ( - - - - )
( 12c0 unimplemented)
forth
1300 fmt2 _reti          ( * * * * )
assembler
( 1340 unimplemented - CPUX calla encoding)
( 1380 unimplemented - more CPUX calla encodings)
( 13c0 unimplemented)
forth

( Check for G2xxx erratum: 4 # push and 8 # push can't use constant
  generator.)

: ?push-erratum  ( ea - ea')
   dup asm{  4 #  } =  if  drop  4 imm>ea  ^  then
   dup asm{  8 #  } =  if  drop  8 imm>ea  ^  then ;

assembler
( NOTE: Both push and pushb decr SP by 2! High byte of value pushed by
  pushb is garbage, so be careful!)

: push   ( ea)  ?push-erratum  _push ;
: pushb  ( ea)  ?push-erratum  _pushb ;
: reti   0 _reti ;  ( have to specify some kind of ea!)
forth


( 1400 - 17ff: CPUX instructions:
               pushma, popma, pushmw, popmw)

( 1800 - 1fff: CPUX extension words)


comment
==========================================================================
Discursus on condition codes, conditional branches, and control structures

In many traditional computer architectures, the condition codes are in a
status register, and there are usually four of them: N V C Z. That's
Negative, oVerflow, Carry, and Zero.

How are these used and what do they mean?

First, let's define how condition code flags represent the results of a
signed subtract (or compare). If we execute X - Y, where both are _signed_
values, then the N (negative), V (overflow) and Z (zero) bits are set as
follows:

Let S = N xor V. Then

  (LT)  X < Y  ==   S
  (GE)  X >= Y ==  !S
  (GT)  X > Y  ==  !S and !Z
               == !(S or   Z)  (deMorgan's law)
  (LE)  X <= Y ==   S or   Z

I've written on the left the traditional "conditional branch" names for
each relation.

So, what happens when we subtract or compare _unsigned_ values? Before
discussing that we have to understand what the carry bit represents.  Since
the natural way of doing subtraction to _add_ the two's complement of the
subtrahend - ie:

  X - Y == X + (-Y)

and since two's complement is the one's complement plus one:

  -Y == ~Y + 1

we can write subtract as

  X - Y == X + ~Y + 1

and subtract with a _borrow_ as

  X - Y - 1 == X + ~Y

Note something odd here: the carry in is complemented: we carry in a one
when there is no borrow and carry in a zero when there _is_ a borrow. So,
carry = ~borrow. I call this a "natural" borrow.

There are three architectures that I know of that represent borrow this
way: 6502, MSP430, and ARM. All others use a "synthetic" borrow, where
carry = borrow. Since the MSP430 is one of the elect few using a "natural"
borrow, in the following discussion we'll understand C = 0 to mean borrow,
and C = 1 to mean no borrow.

So let's define how X - Y affects the condition codes, if X and Y are
_unsigned_.

  (LO)  X < Y   ==   !C
  (HS)  X >= Y  ==    C
  (HI)  X > Y   ==    C and !Z
                == !(!C or   Z)   (deMorgan's law)
  (LS)  X <= Y  ==   !C or   Z

Again I've written traditional conditional branch names for these
conditions. LO == lower; HS == higher or same; HI == higher; LS == lower or
same.

Since MSP430 only implements the jc/jhs and jnc/jlo instructions, we can
only check for LO or HS. HI and LS can be calculated by swapping the
operands, and doing an LO or HS, resp.

I define Forth words to represent each condition. Those words actually
compile the conditional jump opcode, and the following "if" or "until"
either leaves a pointer to the instruction for later fixup by an else or
then (if), or resolves the backward branch (until).
==========================================================================

( Format III - jumps:

  o o o c  c c s d  d d d d  d d d d    o=op, c=cond, s=sign, d=dest offset

  Offset is a signed _word_ offset.
)

: fmt3  ( op)  constant  does> @  op, ;
assembler
2000 fmt3 0=   ( jnz)
2400 fmt3 0!=  ( jz)
2800 fmt3 u>=  ( jnc aka jlo - carry is ~borrow)
2c00 fmt3 u<   ( jc  aka jhs - ditto)

3000 fmt3 0>=  ( jn  aka 0<)
3400 fmt3 <    ( jge aka >= signed)
3800 fmt3 >=   ( jl  aka <  signed)
3c00 fmt3 never  ( jmp always!)

( For testing carry directly:)
2800 fmt3 CS   ( carry set   - compiles jnc)
2c00 fmt3 CC   ( carry clear - compiles jc)
forth

( Jump offsets are relative to the _following_ instruction.)

( Tests to see if a value fits into a field of a certain bit width.)
-- : ufits?  ( value bits - f)     u>>        0= ;   ( unsigned)
: sfits?  ( value bits - f)   1- >>  1+  2 u< ;   ( signed)

: jump-offset?  ( dest src - masked-offset fits)
   -  2/  dup  [ 1 #10 << 1- #] and  ( offset masked-offset)
   swap #10 sfits? ;

: patch  ( masked-offset src)   2 - tuck  image-@  or  swap image-! ;

assembler
( Resolve a relative jump from src to dest.)
: resolve  ( src dest)
   over jump-offset? if  swap patch  ^  then
   error" relative jump out of range" ;

( Control structure words.)
: if      (      - src )  \m here ;
: then    ( src  -     )  \m here   \a resolve ;
: else    ( src1 - src2)  \a never  \a if  swap  \a then ;

: begin   ( - dest)       \m here ;
: until   ( dest)         \a if  swap  \a resolve ;
: again   ( dest)         \a never  \a until ;
: while   ( dest - src dest)   \a if  swap ;
: repeat  ( src dest)     \a again  \a then ;

( The lack of 0< is a serious impediment. The only way I can of fixing this
  is a kludge: by jumping over a jmp instruction. This is bigger and slower
  than I would like, but it at least lets us write idiomatic code.)

: 0<   asm{  0>= if  never  then  } ;

forth


( Format I - 2op instructions:

  o o o o  s s s s  D b S S  d d d d    o=op, b=byte, s=src reg, d=dest reg,
                                                      S=src mode, D=dest mode
)

: ea>src   ( ea - srcbits)
   dup ea>reg 8 <<  swap  ea>mode  or ;

( For destination effective addresses, convert Indirect to Index by 0.)
: fix-dest-ea  ( ea - ea')
   dup ea>mode 20 = if  ( Indirect)  10 -  ( => Indexed by 0)  then ;

: ea>dest  ( ea - destbits)
   dup ea>mode  dup 20 u< if  3 <<  ( D)  swap ea>reg  or  ^  then
   error" invalid destination address mode" ;

: fmt1  constant  does> @  ( easrc eadest op)
   push  fix-dest-ea  swap ( eadest easrc)
   dup  ea>src   pop or  push
   over ea>dest  pop or  op,  ea,  ea, ;

assembler
( Condition code effects:  V N Z C )
4000 fmt1 mov            ( - - - - )
4040 fmt1 movb
5000 fmt1 add            ( * * * * )
5040 fmt1 addb
6000 fmt1 addc           ( * * * * )   ( adc?)
6040 fmt1 addcb
7000 fmt1 subc           ( * * * * )   ( sbc? sbb?)
7040 fmt1 subcb

8000 fmt1 sub            ( * * * * )
8040 fmt1 subb
9000 fmt1 cmp            ( * * * * )
9040 fmt1 cmpb

( decimal add! can be safely ignored ;-)
a000 fmt1 dadd           ( * * * * )
a040 fmt1 daddb

( Like and, bit clears the V bit, and sets C if the result is not zero.
  When testing a single bit this is equivalent to *copying* the tested bit
  directly into C.)

b000 fmt1 bit            ( 0 * * * )
b040 fmt1 bitb

( IMPORTANT NOTE: bic, bicb, bis, and bisb are treated as a species of
  *move* instruction. They do *not* affect the condition codes! So, even
  though bis is an "or" instruction, calling it bis suggests that it's about
  setting bits, not about doing a logical OR.

  Also, since bis and bic are used to synthesise the instructions to set
  and clear bits in the status register, it wouldn't work if they then *also*
  independently affected the condition codes.)

( Condition code effects:  V N Z C )
c000 fmt1 bic            ( - - - - )
c040 fmt1 bicb
d000 fmt1 bis            ( - - - - )
d040 fmt1 bisb

( Unlike bic and bis, and and xor affect the condition codes, with the
  following important distinction:

  * and clears the V bit;
  * xor sets the V bit if both operands are negative.)

( Condition code effects:  V N Z C )
e000 fmt1 xor            ( * * * * )
e040 fmt1 xorb

( See bit instruction for more condition code notes.)
f000 fmt1 and            ( 0 * * * )
f040 fmt1 andb

( Synthesised instructions - aka useful macros.)

( Condition code effects:                 V N Z C )
: clr   asm{   0 #  \f swap  mov  } ;   ( - - - - )
: clrb  asm{   0 #  \f swap  movb } ;
: inc   asm{   1 #  \f swap  add  } ;   ( * * * * )
: incb  asm{   1 #  \f swap  addb } ;
: inv   asm{  -1 #  \f swap  xor  } ;   ( * * * * )   ( com?)
: invb  asm{  -1 #  \f swap  xorb } ;
: tst   asm{   0 #  \f swap  cmp  } ;   ( 0 * * 1 )
: tstb  asm{   0 #  \f swap  cmpb } ;

( XXX Keep neg and negb? They are not only the only synthetic instructions
  that take more than one machine instruction to implement, but also are
  not the only way to do negation. But having them around makes writing m*
  easier. ;-)

: neg   asm{   \f dup  inv  inc  } ;    ( * * * * )
: negb  asm{   \f dup  invb incb } ;    ( * * * * )     

( NOTE: Both pop and popb incr SP by 2!)
: pop   asm{  sp )+  \f swap  mov  } ;
: popb  asm{  sp )+  \f swap  movb } ;

: ret   asm{  pc pop  } ; ( !!)
: nop   asm{  0 # r3 mov  } ;
: br    ( ea)  asm{  pc mov  } ;  ( branch to arbitrary ea)
: jmp   ( dest)  \a again ;  ( force use of short relative jump)

( Condition code effects:        V N Z C )
: setc  asm{  1 # sr bis  } ;  ( - - - 1 )
: setz  asm{  2 # sr bis  } ;  ( - - 1 - )
: setn  asm{  4 # sr bis  } ;  ( - 1 - - )
: eint  asm{  8 # sr bis  } ;  ( - - - - )

: clrc  asm{  1 # sr bic  } ;  ( - - - 0 )
: clrz  asm{  2 # sr bic  } ;  ( - - 0 - )
: clrn  asm{  4 # sr bic  } ;  ( - 0 - - )
: dint  asm{  8 # sr bic  } ;  ( - - - - )


( Shift and rotate. For simplicity, some of these are limited to reg ea's.
  If the stack comment says "reg", then only registers can be used. If it
  says "ea", then any ea is valid.

  XXX I could limit instead to reg and indirect, but even this, when
  implemented with a 2op instruction, means that the dest will be converted
  to index-by-0. This takes more space that just doing the register version.)

( asl/lsl needs to be synthesised using add; but be careful with
  post-increment: the second - dest - operand must be negatively-indexed!

  rol can be similarly synthesised using addc.)

forth
: ?reg  ( ea)   dup ea>mode  if  error" only registers allowed"  then ;
assembler
: lsr   ( ea)  asm{  clrc  ror  } ;
: lsrb  ( ea)  asm{  clrc  rorb } ;

: lsl   ( reg)  ?reg  asm{  \f dup  add  } ;
: lslb  ( reg)  ?reg  asm{  \f dup  addb } ;

: rol   ( reg)  ?reg  asm{  \f dup  addc  } ;
: rolb  ( reg)  ?reg  asm{  \f dup  addcb } ;


( Smart jump and call.)
: j  ( dest)  ( compile a jump as efficiently as possible)
   dup  \m here 2 +  jump-offset? if  3c00 or  op,  drop  ^  then
   drop  asm{  # br  } ;

: c  ( dest)  ( compile a call as efficiently as possible)
   asm{  # call  } ;  ( there really are no other options)

forth

( That's all, folks!)
