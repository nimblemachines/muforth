| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading MSP430 flash programming

hex

| The MSP430 has two areas of flash: main and info. Main memory is
| divided into 512 byte pages - which TI annoyingly calls "segments" -
| which are further divided into 64 byte rows - which TI annoyingly calls
| "blocks". Info memory is divided into 64-byte pages.
|
| A page is the unit of erasure. A row is a unit of exposure to "cumulative
| programming time". I think the way the flash code has been written that
| this isn't a problem, even doing word writes, rather than block/row writes.

( XXX These are for main memory. Do we want to treat info memory separately?)
#512 constant /page   ( this is the erase size of main memory)

: ?flash  ( fail?)
   if error" flash access or protection violation" then ;

: erase-page   ( 'target)
   cr ." erase "  dup u.
   t.ErasePage  ?flash ;

: program-chunk  ( 'target len)
   cr ." program "  over u.  dup u.
   over image+ -rot  ( buf a u)  t.FlashChunk  ?flash ;

: erase?  ( 'target - erase?)   [ /page 1- #] and  0= ;

: flash-chunk  ( 'target len - 'target+len)
   2dup + push  over erase? if  over erase-page  then  program-chunk  pop ;

: flash-region  ( a len)
   100 /mod  ( r q)  swap push  for   100 flash-chunk  next
                         pop  =if  ( rem) flash-chunk  drop ^  then  2drop ;

| Check to see if we're going to clobber the bootloader and complain if
| we're not executing from RAM.

: ?clobbering-loader
   @boot  \m here  u< not  if ^ then  ( not touching bootloader - Ok)
   in-ram? @  if ^ then  ( running in RAM - Ok)
   error" You need to be running a RAM-based version of the chat code in
order to re-flash it. Consult a local guru. ;-)" ;

: ?clobbering-vectors
   @vectors  \m here  u< if
      error" Your boot code runs into the vectors. Are you sure this is right?"
   then ;

( Target address of first byte of the flash page containing the vectors.)
1_0000  /page -  constant @vector-page

: flash-image
   radix preserve hex
   h preserve  flash
   region ( a u)  ?clobbering-loader  ?clobbering-vectors  flash-region
   @boot  \m here  u< if
      | We are flashing boot code, so we need to program the vectors too.
      cr ." flashing vectors"
      | If boot code doesn't reach into vector page, we need to erase the
      | vector page before flashing the vectors.
      @vector-page  \m here  u< not if
         @vector-page erase-page
      then
      | flash all vectors
      @vectors #vectors  flash-region
   then ;


( Verifying that host and target images are the same.)

| Prepare to do a comparison or computation between data read from the
| target into a buffer, and data in our memory image. Read a chunk from the
| target into pad, and set m to point to the beginning of pad.
|
| Be careful about setting m. Some chunked read implementations use it, so
| set it *after* doing the read.

: setup-comparison  ( 'target len - 'target len)
   2dup pad -rot t.ReadChunk  ( 'target len)  pad m ! ;

variable noisy-verify?  ( Whether to print differences.)

( Little endian.)
: mcell*   m* m*  lohi> ;

( Accumulate - by logically OR-ing - any differences.)
: verify-cell  ( diff a - diff' a)
   dup image-@ mcell* xor  ( diff a xor)
   =if  noisy-verify? @ if  over u. ( print address that differs)  then  then
   rot or  swap ;

: ?skip-commit  ( a u - a u)  over @boot =  if  4 -4 v+  then ;

: verify-chunk  ( diff 'target len - diff' 'target+len)
   ?skip-commit
   noisy-verify? @ if
      cr ." verifying "  over u.  dup u.  ." : "
   then
   2dup + push
   ( diff 'target len)  setup-comparison
   \m aligned  \m cell/ for  verify-cell  \m cell+  next  drop
   pop ;

| Do 256 bytes at a time. The chat protocol can only specify 255 words at a
| time.

: verify-region  ( 'target len - diff)
   0 -rot  ( diff)
   100 /mod  ( r q)  swap push  for  100 verify-chunk  next
                        pop  =if  ( rem) verify-chunk  drop ^  then  2drop ;

: ?empty-region ( a u - a u)  =if ^ then
   cr warn" The flash region is empty. verify will always report no change." ;

: verify
   radix preserve hex
   h preserve  flash
   noisy-verify? on
   region ( a len)  ?empty-region  verify-region drop  ( program image)
   @boot  \m here  u< if
      @vectors #vectors  verify-region drop
   then ;

| Called when we connect to target to make sure host's and target's flash
| regions are the same.

-: ( verify-quietly)  ( - 0 if same, non-zero if different)
   noisy-verify? off
   region ( a len)  verify-region  ( program image)
   @boot  \m here  u< if
      @vectors #vectors  verify-region  or  ( combine diffs)
   then ;   is verify-quietly
