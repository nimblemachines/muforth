( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading MSP430 serial chat protocol v4 (core)

( This is for FRAM targets *only*. I created it because of the truly
  terrible USB-CDC UART in the ezFET on the MSP430FR6989 Launchpad. Any
  time the host sends bytes and then waits for a response from the target,
  there is a huge latency. Throughput drops to hundreds of bytes per second.
  It feels like working over a 2400 bps modem!

  By minimizing these "turnarounds" I hope to speed things up - a lot.

  This version is "streaming" style like v2, but uses the GetStatus and Run
  commands - which immediately send the registers over the wire - from v3.

  I'm giving up on v3 because:

  [1] It's too complicated to do a chat that works for both Flash parts
      with byte-wide I/O *and* FRAM parts, and still fit everything. The FR6989,
      eg, has more vectors - starting at ff80 instead of ffc0 - so we lose 64
      bytes of space.

  [2] Streaming style is simpler and takes less code, and even though more
      bytes are going down the wire, as long as they are going in the same
      direction, it's not a problem.

  I'm also going to leave out "paranoid" mode [the checksumming dance]
  because I never use it and it seems unnecessary.
)

( Taking inspiration from the wildly successful HC08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 3f  Idle   - these command bytes are ignored

40  VersionAddr - get the address of the version commit
41  SetAddr     - set the memory address pointer
42  GetStatus   - get SP, PC, SR, and CP
43  Run         - set SP, PC, SR, CP, and execute
44  ReadWords   - read N words, incrementing by 2 as we go
45  WriteWord   - write a word to memory, incr pointer by 2
46  WriteByte   - write a byte to memory, incr pointer by 1

47 - ff  Idle   - these command bytes are ignored
)

decimal

assembler
( The chat code passes back and forth between host and target - but does
  not otherwise touch - the context pointer, cp. It is used to pass
  execution context between the host and target. By default we assume it is
  the first "callee-saved" register, r4.)

 04 reg cp     ( context pointer)

( These are all considered "caller saved" registers. They are scratch.
  Called code can freely clobber them.)

 14 reg top    ( current accumulator)
 15 reg mp     ( memory pointer)
forth

( Tell the disassembler about these register names.)
-: ( reg)
   dup 5 u< if  ( low special)
     2*  z" pcspsrr3cp" +  2 type  ^  then
          ( 0011223344)
   dup 14 u< if  ( not special)  ." r" .udec  ^  then
   14 -  3 *  z" topmp " +  3 -trailing type ;  is .regname
               ( eeefff)

hex

__meta

( Compile the first 32 bits of the current muforth Git commit.
  These will always be the first four bytes of the file, so verify can be
  smart about ignoring them.)

label version
   muforth-commit drop 8 evaluate
   dup 10 >>  swap  ( high low)  ,  ,

( The commit is followed by a pointer to the chat entry code.)
label chat-entry-vector   0 ,

label get-byte
   begin  01 # chat-uart-ifg & bitb  0!= until
   chat-uart-rxbuf & top movb  ret  ;c

label put-byte
   begin  02 # chat-uart-ifg & bitb  0!= until
   top chat-uart-txbuf & movb  ret  ;c

label get-word
   get-byte c  top push  ( save low byte)
   get-byte c  top swpb  sp )+ top bis  ( combine high and low)
   ret  ;c

label put-word
   put-byte c  top swpb  put-byte j  ;c

label version-address
   version # mp mov  ret  ;c

label set-address
   get-word c  top mp mov  ret  ;c

label get-status
     sp    top mov  ( SP)
       2 # top add  ( skip return address to chat-entry)  put-word c
   4 sp +) top mov  ( PC)  put-word c
   2 sp +) top mov  ( SR)  put-word c
     cp    top mov  ( CP)  put-word j  ;c

label run
   mp sp mov  ( set SP from memory pointer!)
   get-word c  ( PC)  top 2 sp +) mov
   get-word c  ( SR)  top   sp  ) mov
   get-word c  ( CP)  top   cp    mov  reti  ;c

label read-words
   get-byte c  top tst  0!= if  ( if count non-zero)  top push
      begin  mp )+ top mov  put-word c  1 # sp ) sub  0= until
      2 # sp add
   then  ret  ;c

label write-word
   get-word c  top mp ) mov   2 # mp add  ret  ;c

( We need this to turn change the MPU settings.)
label write-byte
   get-byte c  top mp ) movb  1 # mp add  ret  ;c

( Dispatch.)
label command-table
   ( 40) version-address ,
   ( 41) set-address ,
   ( 42) get-status ,
   ( 43) run ,
   ( 44) read-words ,
   ( 45) write-word ,
   ( 46) write-byte ,

label process
   get-byte c  ( cmd)

   40 # top sub   ( 00 to 3f become large unsigned numbers)
   process command-table - 2/ # top cmp  u< if
      top top add  command-table top +) pc mov  ( jump!)
   then

   ( unknown... ignore!)
   ret  ;c

( Push registers and start conversing with host.)
label chat-entry
   ( call has already pushed PC)
   sr push  sr clr  ( disable interrupts!)
   begin  process c  again  ;c

chat-entry chat-entry-vector image-!  ( patch the vector)

( This creates a slot for the PC which can be replaced with the address of
  native code to execute. That code can end with a return instruction, which
  will return to the call to interact below, and then re-enter chat with
  the same stack layout: a PC slot below a "protective" return address. It's
  easier to visualize than to explain. ;-)

label interact
   begin  chat-entry c  again  ;c

Vreset handler
   -- set SP to end of RAM
   @ram #ram +  # sp mov

.ifndef in-ram  ( the flash-based code already did all this)

   -- disable watchdog timer
   WDTKEY 80 + # WDTCTL & mov

.equates. .contains MPUCTL0 .if     -- FRAM part with memory protection
   -- let segment3 cover everything for now
   MPUKEY 0001 + # MPUCTL0 & mov    -- unlock and enable MPU
   0200 # MPUSAM & bic              -- turn off W bit for segment 3
   MPUCTL0 1+ ( high byte) & clrb   -- re-lock MPU
.then

.equates. .contains PM5CTL0 .if
   1 # PM5CTL0 & bic                -- unlock i/o port pins
.then

( If this is an FRAM device, set the controller to insert 1 wait state. We
  are about to switch to a 16 MHz CPU clock, which requires 1 wait state.)

.equates. .contains FRCTL0 .if
   FRKEY 1 4 << + # FRCTL0 & mov    -- unlock FRAM controller; set 1 wait state
   FRCTL0 1+ ( high byte) & clrb    -- lock FRAM controller
.then

( If there is a 16 MHz calibration value in the info area, use it and set
  the DCO to generate 16 MHz MCLK and SMCLK.)

.equates. .contains CAL_BC1_16MHZ .if  ( we need to set up the DCO trim ourselves)
   "0ffff # CAL_DCO_16MHZ & cmp     -- if Info A has been erased, don't use trim
   0= if
      -- Set defaults that might work to get chat going...
      %10_00_1111 # BCSCTL1 & movb  -- RSEL=15
      a0 # DCOCTL & movb            -- not quite the middle?
   else
      -- Set clock to factory-calibrated 16 MHz
      -- See G2553 datasheet, p15
      CAL_BC1_16MHZ & BCSCTL1 & movb
      CAL_DCO_16MHZ & DCOCTL & movb
   then
   BCSCTL2 & clrb

.else

( If device contains a CS module, it has been factory calibrated. All we
  need to do is to set the right divisors for the DCO to generate 16 MHz
  MCLK and SMCLK clocks.)

.equates. .contains CSCTL0 .if  ( DCO trimmed at factory; just choose divisors)
   -- Right now this is for the FR6989. But other devices should work too.
   CSKEY # CSCTL0 & mov          -- unlock CS module
   %0100_1000 # CSCTL1 & mov     -- set DCORSEL=1, DCOFSEL=4 (16 MHz)
   CSCTL3 & clr                  -- set DIVM and DIVS to /1
   CSCTL0 1+ ( high byte) & clrb -- lock CS module

.else

z" No BCS calibration or CS module found. Your clock is unsupported."  abort

.then .then

   -- Configure UART for 115,200 bps, 8 bits, no parity
   81 # chat-uart-ctl1 & bisb    -- enable SMCLK
                                 -- hold UART in reset while configuring
   chat-uart-ctl0 & clrb         -- reset to defaults: 8 bits, no parity, 1 stop
   chat-uart-br1 & clrb          -- set baud rate divisor
.ifndef slow-chat
   8 # chat-uart-br0 & movb      -- 16,000,000/16/115,200
.else
   #104 # chat-uart-br0 & movb   -- 16,000,000/16/9600
.then
.ifdef chat-uart-mctlw
   chat-uart-mctlw &  \f swap # \f swap  mov
.else
   chat-uart-mctl &  \f swap # \f swap  movb
.then

   01 # chat-uart-ctl1 & bicb    -- bring UART out of reset

   -- Connect correct port pins to UART RXD and TXD, based on chat-port-*
   -- equates in the chip's equates file. Only two of the following lines
   -- will match and get compiled.
.ifdef chat-port-sel0-ones   chat-port-sel0-ones # chat-port-sel0 & bisb   .then
.ifdef chat-port-sel1-ones   chat-port-sel1-ones # chat-port-sel1 & bisb   .then
.ifdef chat-port-sel0-zeros  chat-port-sel0-zeros # chat-port-sel0 & bicb   .then
.ifdef chat-port-sel1-zeros  chat-port-sel1-zeros # chat-port-sel1 & bicb   .then

.equates. .contains FCTL1 .if  ( Flash control register)
   -- Set up flash clock; needs to be between 257 and 476 kHz (no joke)
   -- We're running at 16M, so set it to 16M/40 = 400k.
   FKEY #39 ( divisor-1) +  %0100_0000 ( MCLK)  + # FCTL2 & mov
.then

.then  ( not in-ram)

   ( This is here so that native code can simply return and it will
     re-enter the chat code with a proper stack.)

   begin  interact c  again  ;c


( Set BSL flag to _not_ mass erase if wrong password entered during BSL
  "hello" sequence.)

here
.equates. .contains Vbslkey .if
Vbslkey goto  0 ,
.else .equates. .contains Vbslsig1 .if
Vbslsig1 goto  0aaaa dup , ,  ( sig1 and sig2)
.else
z" Do you have to do something special to prevent the BSL from erasing chip?"
   abort
.then .then
goto
