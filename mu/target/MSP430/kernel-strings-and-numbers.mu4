( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading MSP430 Forth kernel (string and number addons)

__meta
hex

( String output)
: count   ( a - a+1 u)  dup 1+  swap c@ ;  ( a species of c@+)
: aligned   1+ -2 and ;
: type    ( a u)  for  count emit  next  drop ;
: (.")   r>  count  2dup + aligned  >r  type ;

meta: cstring,  ( a u)  ( compile a counted string - with prefix length byte)
   dup c, ( count)  string,  0 align, ;

compiler: ."
   \t (.") target-compile,  char " parse  cstring, ;

compiler: char
   \f char  target-literal ;

( text consumes an LCD position from the stack, creates a new named target
  word, consumes the next token as a delimiter character, and then parses
  the following string into the body of the newly-created target word. When
  executed, the new word jumps to the LCD location and prints itself.

  See examples at the end of the file.)

meta: text
   create  ( at)  c,  \f char parse  cstring,
   does>  count at  count type ;


( Pictured numeric output.)

( XXX Hex only at the moment!)
: /digit   ( u - uquot umod)  dup  u2/ u2/ u2/ u2/  swap 0f and ;

( #13 words)
( XXX try writing this as a code word?)
: >digit   ( n - ch)  ( convert 1 binary digit to char; hex to lowercase)
   9 over u<  [ char a  char 9  1+ - ] literal  and +  char 0 + ;

-- : abs   ( n - |n|)   dup 0<  if  negate then ;

-- : spaces  ( n)  0 max  ?if for  space  next  then ;


( pad is where we convert numbers to ASCII. pad returns the address of the
  _end_ of the buffer, since conversion occurs right-to-left.)

( XXX for right now, set aside 4 bytes - we're doing unsigned hex _only_ at
  the moment. And because pad can grow down from hld, we don't need to
  define both!)

( Leave room for pad, _below_ hld.)
ram  4 allot  flash

variable hld
: hold   -1 hld +!  hld @ c! ;
: <#     hld hld ! ;
: #>     ( u - a #)  drop  hld @  hld over - ;
-- : sign   ( n -)   0< if  char - hold  then ;
: #      ( u - u')   /digit  >digit  hold ;

: .uw   ( w)  ( print unsigned word in hex)  <#  # # # #  #> type ;
: .ub   ( b)  ( print unsigned byte in hex)  <#      # #  #> type ;


( Examples of using text:)
{ h @ } ram

 0 text hi     " Hallo, Reginald! "
4c text beer   ) beer)
4c text beef   } beef}
40 text where  " Where's the beef? "

{ h ! }
