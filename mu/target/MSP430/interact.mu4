( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading MSP430 interaction

variable chatting
variable chat-vector

: chat-cmd   ( index - index+1)  dup cells  constant  1+
             does> @  chat-vector @ =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0  ( initial command index)

chat-cmd t.Hello
chat-cmd t.GetStatus    ( - sp pc sr cp)
chat-cmd t.Run          ( pc sr cp)
chat-cmd t.ReadChunk    ( buf a u)
chat-cmd t.WriteChunk   ( buf a u)
chat-cmd t.ErasePage    (     a   - fail?)
chat-cmd t.FlashChunk   ( buf a u - fail?)

drop  ( last command index)

: >chat
   ['] t.ReadChunk  is |read    ( read from connected target)
   ['] leh@         is |cell@
                    16 |addr !  ( size of addr in bits)
                     2 |cell !  ( size of cell in bytes) ;

: copy-chunk  ( 'target len - 'target+len)
   -- cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+ -rot t.WriteChunk  pop ;

: copy-chunked  ( a u)
   -- cr ." copy-chunked "  2dup swap u. u.
   256 /mod ( r q)  swap push  for   256 copy-chunk  next
                        pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)

: copy-ram
   h preserve  ram
   ram-copied @  dup 0= if  drop  region drop  then
   \m here  over -  copy-chunked
   \m here  ram-copied ! ;


( Cached local values of target registers.)
variable .CP     -- context pointer
variable .SR     -- status register
variable .SP
variable .PC

variable .IP
variable .LOOP
.ifdef microscope
variable .W
variable .X
variable .Y
variable .Z
.then

: get-regs   t.GetStatus  .CP !  .SR !  .PC !  .SP ! ;
: set-regs                .PC @  .SR @  .CP @ ;

: 2sp  space space ;
: 4#  # # # # ;
: .b9  binary  <#  4#  4#  #  #> type ;
: .h16    hex  <#  4#  #> type ;
: .h16__  .h16  2sp ;
: .r   ( offset)  @  .h16__ ;
: .sr         .SR @  .b9   2sp ;

defer .regs

-: ( chat v2/v3 version of .regs)
   radix preserve

   cr  ." V----INZC    CP    SP    PC"
       (  000100011  0000  0000  0000 )
   cr           .sr
                   .CP .r
                         .SP .r
                               .PC .r ;  is .regs

: hi  chatting on  >chat  t.Hello  get-regs  .regs
      ram-copied off  copy-ram
      now __chatting is __meta  __meta ;

: chat-via   pop  chat-vector !  hi ;


: run      copy-ram  set-regs  t.Run ;  ( don't wait for target)
: runwait  run  get-regs ;              ( wait for target)

( For running random code that doesn't return.)
: kick  ( pc)  .PC !  run ;

( when the code you're calling doesn't speak the same protocol as running code)
: go   \eq Vreset image-@  kick ;

: reset    go  0 #100,000,000 nanosleep ( 100ms)  get-regs .regs ;

( For running random bits of code.)
: call  ( pc)  .PC !  runwait .regs ;


.ifndef chat-v1

( Because the target "caches" the top of the stack in a register, and
  because the trampoline code loads this register before execution, and
  pushes it afterward, we can deal only with the "memory image" of the target
  stack, rather than also worrying about what to put into the "top" register.

  What's a bit mystifying is that, to achieve a target stack depth of N,
  the host has to push N+1 items. The top one goes into top; and the
  bottom-most one is the "sentinel" value that gets loaded into top when the
  stack becomes empty.

  When pushing from the host, or when "pulling" from the target, we don't
  move more than 8 "user" items - but we pad this value a bit, since we are
  also using the stack to pass some execution context between host and
  target.)

meta
: sp0   [ @ram #ram +  #48 - #] ;
: sp!   .CP ! ;  ( the trampoline code loads SP from CP)
: sp@   .CP @ ;  ( the trampoline code stores SP into CP)
: depth   \m sp0  \m sp@ -  \m cell/  1- ;
forth

( When we begin the remote execution of a target Forth word, we have to
  push to the target, in addition to the values found on the host stack,
  the IP address of the trampoline, and the cfa to execute. If the code
  executed hits bug, and we continue execution using cont, we will push the
  host stack and the IP address of the trampoline, but no cfa.

  In general then, in order to ensure that we can pass up to 8 "user" data
  values to target code, we need to copy a max of 10 values - plus the cafe
  sentinel value that is copied no matter what.

  stack> *first* builds a local image of the target stack - in the RAM
  image - and *then* copies it, in one chunk, to the target.)

: stack>  ( "push" stack to target)
   depth 0 max #10 min
   \m sp0  over 1+  \m cells -  dup \m sp! ( top of D stack)  swap
   for  tuck image-!  \m cell+  next  ( copy each cell as a word to D stack)
   "cafe swap image-! ( sentinel)
   ( Now copy stack image to target)
   \m sp@ image+  \m sp@  \m sp0  over -  t.WriteChunk ;

( XXX add a way to automagically sign-extend or zero-extend values coming
  from the target stack?)

( Since stack< "pops" data stack, plus ip, loop, and if we've defined
  microscope, w, x, y, and z, let's raise our max so we can copy up to 8
  "user" values, plus execution context.)

meta
8 ( user)  2 ( ip and loop) +
.ifdef microscope
4 ( scratch regs w x y z) +
.then
constant max-pop
forth

( stack< *first* copies the target stack, in one chunk, to the host's RAM
  image, and *then* pulls the values out and pushes them onto the host's stack.)

: stack<  ( "pop" stack from target)
   \m depth 0 max \m max-pop min  =if
      push
      \m sp@ image+  \m sp@  r@ \m cells  t.ReadChunk  ( read target stack)
      pop
      \m sp@ over  ( n sp n)
      for  dup image-@  pop 2push  \m cell+  next ( starting with top, push to R)
      drop ( sp)
      for  2pop push  next  ( pop from R to reverse order)
      0
   then  drop ;

( Host should set PC -> continue-forth
                  SP -> top of R stack
                  CP -> top of D stack)

: ?chat
   chatting @ 0= if  error" not connected to target"  then ;

: rechat
   get-regs  stack<
.ifdef microscope  ( x0 .. xn ip - y0 .. yn ip loop z y x w')
   .W !  .X !  .Y !  .Z !
.then
   .LOOP !  .IP !  .regs ;

( NOTE: For initial execution of a Forth word, xn is cfa!)
: continue  ( x0 .. xn ip - y0 .. yn ip loop)
   ?chat
   stack>  run  rechat ;

( These are implement'ed by the kernel code.)
meta
variable continue-forth
variable trampoline

: cont    ( )     ( continue forth execution)
   .IP @  continue ;
forth

-: ( cfa)  ( execute target forth word)
   p@ continue-forth .PC !
   [ @ram #ram +  2 \m cells - #] .SP !  ( room for SR and PC *only*)
   p@ trampoline  ( ip)  continue ;  is remote


.then


( Set |@ and |c@ to _some_ form of target fetch. Prefer to get bytes from
  target if we're connected. This word is useful so we can set an initial
  state for target's  du  and  dis  so that inspect won't crash when it
  runs |@ to get a default ea.)

: >target  chatting @ if  >chat ^  then  >image ;


( Define our own key bindings for memory dumping and disassembly. We'll
  default to host bindings if there isn't one in our array. This way we
  only have to define the "delta" between host and target behaviours.)

128 array msp-seekeys

( Default key action is to run host key code)
host-seekeys msp-seekeys  128 cells cmove

( Dump one line of memory from target program memory.)
: 1dump  ( a)
   hex-bytes
   >image    dup .addr  dup .hex-cells
   chatting @ if
      -valid
      >chat  dup _addr  dup .hex-cells
      -valid
   then
   drop ;

( So we can easily look at the signature embedded into the image.)
: 1dump-chars  ( a)
   hex-bytes
   >target
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   dup _addr  dup .hex-cells
   drop ;

msp-seekeys -2
   2dup  du-mode dumping        >target  skip+  skip-  1dump        ( a - a')
   2dup  du-mode dumping-chars  >target  skip+  skip-  1dump-chars  ( a - a')
         du-mode disasming      >target  dis+   dis-   1dis         ( a - a')

msp-seekeys 'seekeys !  ( switch over to our bindings)

key: d  ( a - a 0)   dumping        0 ;
key: C  ( a - a 0)   dumping-chars  0 ;  ( small c is "call")
key: i  ( a - a 0)   disasming      0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)

( Host du available as \f du)
meta
: du   ( a - a')   dumping     inspect ;
: dis  ( a - a')   disasming   inspect ;
forth
