( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

.ifndef prefix-disasm
loading MSP430 disassembler (postfix)
.else
loading MSP430 disassembler (prefix)
.then

( Disassembler for MSP430 CPU instructions. There is _no_ support for CPUX
  instructions! They will disassemble as *unimplemented*.)

hex

( Words to compile the instruction table.
  ..  acts like 'then'
  match and exact compile a test and a zbranch, followed by code to print
  the opcode name)

: (match)   ( op mask match - op f)  push  over and  pop = ;
: (exact)   ( op      match - op f)        over          = ;

( In the disassembler, use .op to print the opcode name.)
: op,   compile (lit)  .assembler. \chain ;  ( compile op as literal)
: .op   ( cfa)  >name type ;  ( print op name from cfa)

compiler
: ..   compile ^  \ then ;
: multi  ( - src)  compile (match)  \ if                   ;  ( no literal op)
: match  ( - src)  compile (match)  \ if  op,              ;  ( literal op)
: exact  ( - src)  compile (exact)  \ if  op,  compile .op ;  ( literal op, print)
forth

( Sign-extend 16-bit word to host number)
: sext  ( w - n)   dup 8000 and if -1_0000 + then ;

( Standard ways of printing different "types".)
: .udec   radix preserve  decimal  (u.) type ;
: .hex    radix preserve  hex       (.) type ;

: -trailing  ( a u - a u')  ( strip trailing blanks)
   over + ( end)  begin  1-  dup c@ bl -  until  over -  1+ ;

defer .regname  ( so others can override with their particular convention)

-: ( reg)
   dup 3 u< if  ( named)
      2*  z" pcspsr"  + 2 type  ^  then
   ." r"  .udec ;  is .regname


( Remember, 2op instructions have this form:
  oooo_ssss_DbSS_dddd   o=op, s=srcreg, d=destreg, S=srcmode, D=destmode

  We convert to a "canonical" ea with the form:
  0000_0000_00RR_rrrr   r=reg, R=mode)

: src>ea   ( op - ea)
   dup 0f00 and 8 >>  swap  30 and        or ;

: dest>ea  ( op - ea)
   dup   0f and       swap  80 and  3 >>  or ;


.ifndef prefix-disasm  ( default to postfix version!)

( When printing offsets and immediate values, if the number is 8000-ffff
  also print the negative number, in parentheses, that it represents.)

: .both  ( n)
   dup .hex space
   sext  dup 0< if  ." ( "  dup .hex  ." ) "  then  drop ;

: .o  ( off)  .both ;
: .i  ( imm)  .both  ." #" ;

: .pcrel      p @  cell* sext  +  .hcell ;  ( no & suffix)
: .absolute        cell*          .hcell  ."  &" ;

: .reg       ( ea)            ea>reg  .regname ;
: .indirect  ( ea)            ea>reg  .regname ."  )"  ;
: .indexed   ( ea)  cell* .o  ea>reg  .regname ."  +)" ;
: .postinc   ( ea)  .indirect  ." +" ;

.else ( prefix disassembler)

( When printing offsets and immediate values, if the number is 8000-ffff
  also print the negative number, in parentheses, that it represents.)

: .both  ( n)
   dup .hex
   sext  dup 0< if  ." ("  dup .hex  ." )"  then  drop ;

: .o  ( off)         .both ;
: .i  ( imm)  ." #"  .both ;

: .pcrel      p @  cell* sext  +  .hcell ;  ( no & prefix)
: .absolute        cell*    ." &" .hcell ;

: .reg       ( ea)  ea>reg        .regname ;
: .indirect  ( ea)  ea>reg  ." (" .regname ." )" ;
: .indexed   ( ea)  cell* .o  .indirect ;
: .postinc   ( ea)  .indirect  ." +" ;

.then


: .eadest  ( ea)
   dup 10 = if  drop  .pcrel     ^  then
   dup 12 = if  drop  .absolute  ^  then
   dup  4 >> jump  .reg  .indexed  .indirect  .postinc  [  show

( XXX should be some kind of table?)
: .easrc   ( ea)
   dup 30 = if  drop  cell* .i  ^  then
   dup 22 = if  drop      4 .i  ^  then
   dup 32 = if  drop      8 .i  ^  then
   dup 03 = if  drop      0 .i  ^  then
   dup 13 = if  drop      1 .i  ^  then
   dup 23 = if  drop      2 .i  ^  then
   dup 33 = if  drop  0ffff .i  ^  then
   .eadest ;

: .byte  ( op - op)  dup 40 and if ." b" then ;

: >jmpdest  ( op - dest)
   dup 1ff and  swap 200 and -  2*  p @  + ;

( Print jmp opcode.)
: .jop  ( op - op)
   z" jnz jz  jnc jc  jn  jge jl  jmp "  over #10 >>  7 and  2* 2*  +
   3 -trailing  type ;


.ifndef prefix-disasm  ( default to postfix version!)

( 1ops have byte suffix already.)
: .1op   ( op cfa - op)  over ea>rm    .easrc  space  .op ;
: .dest  ( op cfa - op)  over dest>ea  .eadest space  .op ;  ( for synthetic instrs)

( 2ops need to add byte suffix.)
: .2op   ( op cfa - op)
   over src>ea .easrc space  over dest>ea .eadest space  .op .byte ;

: .jmp  ( op - op)  dup >jmpdest .hcell_  .jop ;

.else ( prefix disassembler)

( 1ops have byte suffix already.)
: .1op   ( op cfa - op)  .op space  dup ea>rm    .easrc ;
: .dest  ( op cfa - op)  .op space  dup dest>ea  .eadest ;  ( for synthetic instrs)

( 2ops need to add byte suffix.)
: .2op   ( op cfa - op)
   .op .byte space  dup src>ea .easrc space  dup dest>ea .eadest ;

: .jmp  ( op - op)  .jop space  dup >jmpdest .hcell ;

.then


: shred  ( op - op)
( All the instructions!)

( Match some "synthetic" instructions before we try the core instructions.)
        4303 exact nop
..      d312 exact setc
..      d322 exact setz
..      d222 exact setn
..      d232 exact eint
..      c312 exact clrc
..      c322 exact clrz
..      c222 exact clrn
..      c232 exact dint

( XXX is it better to disassemble these as pop instructions, or as mov from
  sp, post-incremented?)

.. ff70 4130 match pop   .dest
.. ff70 4170 match popb  .dest

( These are the real, core instructions.)

.. ffc0 1000 match ror    .1op
.. ffc0 1040 match rorb   .1op
.. ffc0 1080 match swpb   .1op
      ( 10c0)
.. ffc0 1100 match asr    .1op
.. ffc0 1140 match asrb   .1op
.. ffc0 1180 match sxt    .1op
      ( 11c0)
.. ffc0 1200 match push   .1op
.. ffc0 1240 match pushb  .1op
.. ffc0 1280 match call   .1op
      ( 12c0)
.. ffc0 1300 match reti   .1op
      ( 1340)
      ( 1380)
      ( 13c0)

.. e000 2000 multi       .jmp

.. f000 4000 match mov   .2op
.. f000 5000 match add   .2op
.. f000 6000 match addc  .2op
.. f000 7000 match subc  .2op

.. f000 8000 match sub   .2op
.. f000 9000 match cmp   .2op
.. f000 a000 match dadd  .2op
.. f000 b000 match bit   .2op

.. f000 c000 match bic   .2op
.. f000 d000 match bis   .2op
.. f000 e000 match xor   .2op
.. f000 f000 match and   .2op

.. ." *unimplemented*"

( That's all folks!)
;

( Given a target cfa find the host dictionary entry in .target. or
  .target-runtime. that matches, if one exists.)

: cfa-matches?  ( cfa 'link - match?)  link> >body @ ( target-cfa)  =  ;

-: ( target-cfa 'link - 'link -1 | target-cfa 0)
   dup  hidden? if  drop  0  ^  then
   2dup cfa-matches? if  nip  -1  ^  then
   drop  0 ;

: cfa>link  ( target-cfa - 'link -1 | target-cfa 0)
   dup  [ #]  .target-runtime.  forall-words  tuck = 0= ;

( Support for interactive disassembly.)
: dis+  ( a - a' 0)  drop  p @  0 advance  0 ;
: dis-  ( a - a' 0)            -4 advance  0 ;  ( back up a bit)

( The workhorse.)
: 1dis  ( a)
   dup .addr  .nesting space
   p !  cell*  ( op)  dup .hcell_ space
   p @  ( now a cell ahead)  over = if  ( maybe a code pointer?)
      dup  \m cell-  cfa>link if  ( and has a name)
         link>name  ." code "  type  drop  ^  then  then
   ."   "  shred  drop ;
