( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Ok, now that I've gone ahead and created alt-asm.mu4 by hand, and then
  written code to check that I didn't bollix it up, let's now do the right
  thing! Which is, of course, to use the Forth to generate the file
  automagically.)

( We need the build environment, so load it first.)
ld! target/MSP430/build.mu4  ( sets radix to hex!)

( We use the newly-modified word-printing code to do this. For every
  non-hidden word on a dict chain, it executes a piece of code. Our little
  piece of code will write out a colon definition that defines an operator
  with a trailing comma.)

( Code to left-justify names in constant-width fields.)
: justify  ( a u width - #spaces)   over -  -rot  type ;

( I think I like it better "ragged right". Let's use this instead.)
: -justify  ( a u width - #spaces)   drop  type  0 ;

-: ( 'link - counted? exit?)
   dup muchain? if  drop  0  -1  ^  then  ( exit if we see a muchain)
   dup  hidden? if  drop  0   0  ^  then  ( skip hidden words)
   link>name  cr  ." : "
   2dup 6 -justify  ." ,"  spaces  ."   \a "
        6 -justify         spaces  ."  ;"  1  0 ;

: gen-alts
   out-channel preserve >stdout
   ." ( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading MSP430 assembler (alternative mnemonics)

( Let's put the opcode names with trailing commas added into an `alt
  assembler' vocab chain for those who prefer this style of coding.

  This file is auto-generated, but feel free to edit out extraneous words,
  such as the condition-code and addressing-mode operators.)

.opcodes2. definitions
"
   .assembler.  [ #]  forall-words
   cr  cr  ." forth
" ;

gen-alts bye
