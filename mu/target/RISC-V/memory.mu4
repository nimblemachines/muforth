( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading RISC-V memory image

( RISC-V chips can have huge memories. We are starting with the SiFive
  FE310, which has no internal flash, and 16 KiB of internal RAM. The board
  we initially target - the HiFive1 - has a 128 Mibit SPI flash chip on it.
  This is 16 MiB, which is bigger than muforth's dictionary. So we should
  start with a smaller space - say, 1 MiB.)

: power-of-two?  ( n)
   begin  dup 1 and 0=  while  u2/  repeat  1 = ;

( Memory images are prefixed by their current pointer, origin, and size in
  bytes.)

variable h  ( dictionary pointer pointer; points to current image)
: make-image  ( origin #bytes)
   dup power-of-two?  0= if  error" image size not a power of 2"  then
   create  swap  dup , , ( ptr origin)  dup , ( size)   allot
   does>  h ! ;

( Initially limit flash space to 1 MiB.)
@flash  1 Mi  make-image  flash
@ram    #ram  make-image  ram

( Simple but inefficient!)
: @image  h @  cell+ @         ( origin) ;
: #image  h @  cell+ cell+ @   ( image size) ;
: 'image  h @  [ 3 cells #] +  ( image address) ;

: target>image  ( target)  ( find an image based on target addr)
   @ram  [ @ram #ram + #]  within  if  ram ^  then  flash ;

: wrap   #image 1-  and ;
: image+  ( target - host)
   h preserve
   dup target>image  @image -  wrap  'image + ;

( DEBUG: Define show-comma to show code as it's compiled.)
.ifdef show-comma
: .debug-comma  dup  .h8_ ;
.else
: .debug-comma ;
.then

( DEBUG: Define show-c! to show writes to image.)
.ifdef show-c!
: .h16       hex  <#  # # # #                   #>  type space ;
: .addr  cr  hex  <#  # # # #  char _  #        #>  type space ;
: .h32       hex  <#  # # # #  char _  # # # #  #>  type space ;
: .debug-c!   ( byte addr)   2dup .addr  .h8 ;
: .debug-h!   ( hword addr)  2dup .addr  .h16 ;
: .debug-w!   ( word addr)   2dup .addr  .h32 ;
.else
: .debug-c! ;
: .debug-h! ;
: .debug-w! ;
.then

: image-c@             image+ c@ ;
: image-c!  .debug-c!  image+ c! ;

( RISC-V is almost always little-endian.)
: image-h@             image+ leh@ ;
: image-h!  .debug-h!  image+ leh! ;

: image-@              image+ lew@ ;
: image-!   .debug-w!  image+ lew! ;


-: ( buf a u)  swap image+ -rot  cmove ;
: >image
   [ #]          is |read
   ['] lew@      is |cell@
                 32 |addr !  ( size of addr in bits)
                  4 |cell !  ( size of cell in bytes) ;

>image  ( default to image; this can change once we are chatting with target.)

meta
2 constant cellshift
4 constant cell
: cells  2 << ;
: cell/  2 >> ;
: cell+  \m cell + ;
: cell-  \m cell - ;

: here   ( - a)  h @ @ ;
: goto   ( a)    h @ ! ;   ( set region pointer to a)
: allot  ( n)    h @ +! ;

: c,    ( ch)   .debug-comma  \m here image-c!       1 \m allot ;
: h,    ( h)    ( \m halign)  \m here image-h!       2 \m allot ;
: ,     ( w)    ( \m align)   \m here image-!  \m cell \m allot ;

: haligned   1+  -2 and ;  ( halfword aligned)
: aligned   3 +  -4 and ;  ( word aligned)

forth
: #align,  ( #bits)  \m here  negate and  for  0 \m c,  next ;
meta
: halign,   1 #align, ;
: align,    3 #align, ;

forth
( return the origin & number of bytes in current region)
: region   ( - a u)         h @  2@  ( origin ptr)  over - ;
-- : region!  ( origin ptr)    h @  2! ;  ( set origin and ptr)

( Initialization.)
: wipe   'image  #image  ( erase)   "ff  fill
          @image  h @ ! ( reset pointer to origin) ;

flash wipe
ram wipe  ( leaves us in ram!)
