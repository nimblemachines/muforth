( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading HiFive1 SPI flash support

hex

h @  ( save memory region)

__meta

ram
label progbuf   100 allot

__host

h !  ( restore region)

: program-chunk  ( 'target len)
   cr ." program "  2dup swap u. u.
   push ( len)
   dup image+ \m progbuf r@  ( buf a u)  t.write  ( copy chunk to target)
   \t wren remote
   \m progbuf swap pop  ( buf a u)  \t prog remote ;

: erase-page  ( 'target)
   cr ." erase " dup u.
   \t wren remote
   \t erase remote ;

: erase?  ( 'target - erase?)   [ 4 Ki 1- #] and  0= ;

( Before we program the _first_ row of a page, we erase the page.)
: flash-chunk  ( 'target len - 'target+len)
   2dup + push  over erase? if  over erase-page  then  program-chunk  pop ;

( Flash the code in chunks of 256 bytes.)
: flash-region  ( a u)
   100 /mod  ( r q)  swap push  for  100 flash-chunk  next
                        pop  ?if  ( rem) flash-chunk  then  drop ;

( Ok, now let's flash some code to the chip!)
: flash-image
   h preserve  radix preserve hex
   [ ' .regs >body #] preserve  now nope is .regs  ( turn off .regs while flashing)
   \t >spi-prog-io remote
   flash region ( a u)  flash-region
   \t >spi-mem-mapped remote ;

( Prepare to do a comparison or computation between data read from the
  target into a buffer, and data in our memory image. Read a chunk from the
  target into pad and set m to point to the beginning of pad

  Be careful about setting m. Some chunked read implementations use it, so
  set it *after* doing the read.)

: setup-comparison  ( 'target len - 'target len)
   2dup pad -rot t.read  ( 'target len)  pad m ! ;

( Fast verify! Using chunked reads.)
: verify-chunk  ( 'target len - 'target+len)
   -- cr ." verify "  over u.  dup u.
   2dup + push
   ( 'target len)  setup-comparison
   for  dup image-c@ m* xor  if  dup u.  then  1+  next  drop
   pop ;

( Verify in chunks of 256 bytes.)
: verify-region  ( a u)
   100 /mod  ( r q)  swap push  for  100 verify-chunk  next
                        pop  ?if  ( rem) verify-chunk  then  drop ;

: ?empty-region ( a u - a u)  =if ^ then
   cr ." WARNING: The flash region is empty. verify will always report no change." ;

: verify
   h preserve  radix preserve hex
   flash region ( a u)  ?empty-region  verify-region ;
