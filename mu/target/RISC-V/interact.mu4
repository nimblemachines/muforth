| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading RISC-V interaction

variable chatting

variable chat-vector
: chat-cmd   ( index - index+1)  dup  cells constant  1+
             does> @  chat-vector @ =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0
chat-cmd t.hello       ( - chunk-size)
chat-cmd t.status      ( - sp)
chat-cmd t.run         ( pc sp)
chat-cmd t.read        ( buf a u)
chat-cmd t.write       ( buf a u)
chat-cmd t.flash-begin
chat-cmd t.flash-end
chat-cmd t.erase       ( a)
chat-cmd t.program     ( buf a u)
drop

: >image   ['] read-host-image  ( read from memory image)      du-target ;
: >chat    ['] t.read           ( read from connected target)  du-target ;

| Chunk size is reported by the debug interface. Always use this when
| copying RAM contents or programming the flash!

variable /chunk  ( chunk size, as reported by debug interface)
   256 /chunk !  ( sane default)

: copy-chunk  ( 'target len - 'target+len)
   | cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+ -rot t.write  pop ;

: copy-region  ( a u)
   | cr ." copy-region "  2dup swap u. u.
   /chunk @  /mod ( r q)  swap push  for   /chunk @  copy-chunk  next
                                    pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)

: copy-ram
   h preserve  ram
   ram-copied @  dup 0= if  drop  region drop  then
   \m here  over -  copy-region
   \m here  ram-copied ! ;

defer verify-quietly

: hi
   chatting on  >chat  t.hello  /chunk !
   ram-copied off  copy-ram
.ifndef noverify  verify-quietly  .then
   now __chatting is __meta  __meta ;

: chat-via   pop  chat-vector !  hi ;

| Traditional Forth stack layout:
|
| User area    higher memory
| R stack
| D stack      lower memory
|
| Bottom of user area is also RP0. User area contains SP0 and SP. RP is
| pushed onto D stack in pause/yield.
|
| Let's do a similar thing - with R stack at higher memory - to ease the
| transition to a tasking version.

| XXX Why are we reserving 2 cells at the top of RAM?
@ram #ram +  2 \m cells - constant rp0   ( R stack is at the end of RAM)
rp0         62 \m cells - constant dp0   ( D stack is *below* R stack)

: stack-write  t.write ;
: stack-read   t.read ;

4 constant stack-cell
: stack@  lew@ ;
: stack!  lew! ;

"decafbad constant stack-sentinel

ld target/common/stacks.mu4

: ms       1,000,000 * ( ns)  0 swap  nanosleep ;

: run      ( pc)       copy-ram  dp@  t.run  10 ms ;  ( don't wait for target)
: runwait  ( pc)  run  t.status  dp! ;                      ( wait for target)


128 array riscv-seekeys

( Default key action is to run host key code)
host-seekeys riscv-seekeys  128 cells cmove

: >target
   chatting @ if   >chat  ^  then  >image ;  ( set up memory access)

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes
   dup  p !  cell*  ea !  ( default ea: fetch cell)
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   dup _addr  dup .hex-cells
   drop ;

| Cross-ref image and target. Print line of image memory, then line of
| target memory.

: 1xref  ( a)
   hex-bytes
   >image    dup .addr  dup .hex-cells
   chatting @ if
      -valid
      >chat  dup _addr  dup .hex-cells
      -valid
   then
   drop ;

riscv-seekeys  -4  du-mode dumping    >target  skip+  skip-  1dump  ( a - a')
riscv-seekeys  -4  du-mode xrefing    >target  skip+  skip-  1xref  ( a - a')
riscv-seekeys  -2  du-mode disasming  >target  dis+   dis-   1dis   ( a - a')

riscv-seekeys 'seekeys !    ( switch over to our bindings)

key: d  ( a - a 0)   dumping    0 ;
key: x  ( a - a 0)   xrefing    0 ;
key: i  ( a - a 0)   disasming  0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)

( Host du available as \f du)
meta
: du   ( a - a')   dumping     inspect ;
: dis  ( a - a')   disasming   inspect ;
forth

( Batch mode)
( Redirect to stdout to make it easier to write output to a file.)
defer dump-line
: batch-dump  ( start limit cfa)  is dump-line
   >target  ( XXX should this be >image ?)
   out-channel preserve  >stdout
   radix preserve
   istack-depth preserve  istack-depth off
   begin  swap  dump-line drop  swap  2dup u< 0=  until  2drop ;

( XXX create/does> instead?)
-: ( a - a' 0)  dup 1dump  16 advance  0 ;
: dumps  ( start limit)   [ #]  batch-dump ;

-: ( a - a' 0)  dup 1dis   dis+ ;
: disses  ( start limit)  [ #]  batch-dump ;
