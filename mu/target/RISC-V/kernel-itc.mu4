( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading RISC-V Forth kernel

( Yes, you guessed it: The guts of Forth for RISC-V!

  Because this is a true RISC architecture, doing threaded code doesn't
  seem to make a lot of sense. If you include NEXT inline in each code word -
  the speediest approach - you really need post-increment addressing.
  Otherwise NEXT can take up a lot of space!

  On RISC-V, NEXT for ITC - indirect-threaded code - is four instructions,
  and NEXT for DTC - direct-threaded code - is three.

  However! There are several advantages to doing ITC. One is that the
  system is dead simple, and it's easy to write "user-level" code that mucks
  about with the internals of words, since everything has a uniform
  structure.

  It's also cache-efficient, mostly separating data - pointers and
  variables - from code. In a native Forth these often end up next to each
  other in memory, making the caches' jobs more difficult. Since Forth is
  so simple, it's very likely that the entire native code implemenation will
  fit into the I-cache, making it potentially very fast. We'll see about
  this!

  Because this is a jump-and-link architecture that lets us specify the
  link register, we can do some tricks. This feature initially led me to
  think that a native Forth was the "best fit" for RISC-V. However, I still
  want to try ITC and see how well - or poorly - it works.)


-- ------------------------------------------------------------------------
-- Macros defining common VM operations
-- ------------------------------------------------------------------------
assembler

( XXX Macros or subroutines?)
( Data stack macros.)
: push1  ( r1)            asm{  -1 cells sp sp addi   0 sp rot ( r1) sw  } ;

: push2  ( r2 r1)         asm{  -2 cells sp sp addi   0 sp rot ( r1) sw
                                                   cell sp rot ( r2) sw  } ;

: push3  ( r3 r2 r1)      asm{  -3 cells sp sp addi   0 sp rot ( r1) sw
                                                   cell sp rot ( r2) sw
                                                2 cells sp rot ( r3) sw  } ;

: push4  ( r4 r3 r2 r1)   asm{  -4 cells sp sp addi   0 sp rot ( r1) sw
                                                   cell sp rot ( r2) sw
                                                2 cells sp rot ( r3) sw
                                                3 cells sp rot ( r4) sw  } ;

: pop1  ( r1)             asm{  0 sp rot ( r1) lw      cell sp sp addi  } ;

: pop2  ( r2 r1)          asm{  0 sp rot ( r1) lw
                             cell sp rot ( r2) lw   2 cells sp sp addi  } ;

: pop3  ( r3 r2 r1)       asm{  0 sp rot ( r1) lw
                             cell sp rot ( r2) lw
                          2 cells sp rot ( r3) lw   3 cells sp sp addi  } ;

: pop4  ( r4 r3 r2 r1)    asm{  0 sp rot ( r1) lw
                             cell sp rot ( r2) lw
                          2 cells sp rot ( r3) lw
                          3 cells sp rot ( r4) lw   4 cells sp sp addi  } ;

( Return stack macros.)
: rpush1  ( r1)      asm{   -1 cells rp rp addi   0 rp rot ( r1) sw  } ;

: rpush2  ( r2 r1)   asm{   -2 cells rp rp addi   0 rp rot ( r1) sw
                                               cell rp rot ( r2) sw  } ;

: rpop1  ( r1)       asm{  0 rp rot ( r1) lw      cell rp rp addi  } ;

: rpop2  ( r2 r1)    asm{  0 rp rot ( r1) lw
                        cell rp rot ( r2) lw   2 cells rp rp addi  } ;

forth


-- ------------------------------------------------------------------------
-- The kernel begins here!
-- ------------------------------------------------------------------------
__meta


.ifdef native

assembler
: dispatch  asm{     0  w jr  } ;
:  next,    asm{     0 ip jr  } ;
: +next,    asm{  cell ip jr  } ;  ( skip cell, then do next)
:  next     asm{     0 ip jr  } ;
forth

meta: constant  new  ,  ;code  label doconst
                               0 w w lw  ( fetch constant into w)
                               ( fall thru)  ;c

meta: create    new     ;code  label dovar
                               label wpush
                               top push1   w top mv  ( move pfa to top)
                               next,  ;c

meta: :         new  ]  ;code  label docolon
                               ip rpush1   0 w jr  ;c

                               label dodoes
                               top push1   w top mv  ( move pfa to top)
                               ip rpush1   0 x jr  ;c

code nope       [r]   next,  ;c
code* (unnest)  [r]   ip rpop1   next,  ;c

.else  ( ITC)

( Compile NEXT inline.)
assembler
: dispatch   asm{  -1 cells w x lw   0 x jr  } ;
:  next,     asm{     0 ip w lw      cell ip ip addi   dispatch  } ;
: +next,     asm{  cell ip w lw   2 cells ip ip addi   dispatch  } ;
forth

meta: constant  new  ,  ;code  label doconst
                               0 w w lw  ( fetch constant into w)
                               ( fall thru)  ;c

meta: create    new     ;code  label dovar
                               label wpush
                               top push1   w top mv  ( move pfa to top)
                               label shared-next  next,  ;c

                               label dodoes
                               top push1   w top mv  ( move pfa to top)
                               x w mv  ( x is parent ip)  ( fall thru)  ;c

meta: :         new  ]  ;code  label docolon
                               ip rpush1   w ip mv  ( pfa is new ip)   next,  ;c

code* (unnest)  [r]   ip rpop1   begin   next,  ;c
codes nope      [r]

( For ITC kernels, define one of two possible ways to compile NEXT for the
  rest of the kernel.)

.ifdef shared-next
meta: next   asm{  shared-next j  } ;  ( Compile a jump to a previous inline NEXT.)
.else
meta: next   asm{  next,  } ;          ( Compile NEXT inline.)
.then

.then  ( ITC)

definer: does>   <;code>  asm{  dodoes x jal  }  ] ;

code* (lit)     [r]   0 ip w lw  ( fetch literal)
                      top push1   w top mv  ( move literal to top)
                      +next,  ( skip literal value)  ;c

code execute   ( cfa/pfa)       top w mv   begin   top pop1   dispatch  ;c
code @execute  ( 'cfa/'pfa)   0 top w lw   again  ;c

code*    (branch)   [r]
label branch        0 ip ip lw  ( follow branch)   next,  ;c
code*   (0branch)   [r]  top w mv   top pop1   branch w 0!= until  ( fall thru)  ;c
label  skip         +next,  ( skip branch address)  ;c
code*  (?0branch)   [r]  skip top 0= until   top pop1   branch j  ;c
code*  (=0branch)   [r]  skip top 0= until              branch j  ;c

( Fast version, using loop register)
code* (for)   [r]  ( u)
   ix rpush1   top ix mv   top pop1   next  ;c

code* (next)  [r]
   -1 ix ix addi  branch ix 0= until  ix rpop1   skip j  ;c

( Do-loop frame looks like this:

  +------------------+
  |   saved ix reg   |
  +------------------+
  |      limit       |<--- rp
  +------------------+

  Current index is in ix register; current "user-visible" index is
  calculated as index + limit.)

code* (do)  [r]  ( limit start)
   top w mv     ( w = start)
   top x pop2   ( x = limit)
   ix x rpush2  ( push ix reg and limit onto R)
   w x ix sub   ( index = start - limit)
   next  ;c

( Increment index. If it overflows to zero, restore ix register, pop
  stack frame, skip backwards jump, and continue. If non-zero, simply take
  the backwards jump.)

code* (loop)  [r]
   1 ix ix addi   branch ix 0= until
label undo
   cell rp ix lw        ( restore saved ix from R stack)
   2 cells rp rp addi   ( pop R stack frame)
   skip j  ;c

( Add incr to index. If the sign of index has changed, we've crossed the
  threshold, so restore index, pop frame, and skip jump. Otherwise, take
  the backwards jump.)

code* (+loop)  [r]  ( incr)
   ix x mv  ( save ix *before* adding incr)
   top ix ix add   top pop1   ix x x xor   undo x 0>= until
   branch j  ;c

( Push current loop index. User-visible index = index + limit)
code i   [r]  ( - index)
   0 rp w lw   ix w w add   wpush j  ;c

( Allocate buffer space _before_ defining the constant that pushes the
  buffer's address. This way we can define buffers in ram as well as in
  flash!)

meta: buffer   ( #bytes)
   h preserve  ram  here  swap aligned allot  constant ;

meta: variable     cell    buffer ;  ( A variable is a cell-sized buffer!)
meta: 2variable    cell 2* buffer ;

( Basic unary ops.)
code invert   top top not   next  ;c
code negate   top top neg   next  ;c

code 2*   top 1 top slli   next  ;c   ( also: top top top add)
code 2/   top 1 top srai   next  ;c
code u2/  top 1 top srli   next  ;c

code <<    ( n shamt - n')   x pop1   x top top sll   next  ;c
code >>    ( n shamt - n')   x pop1   x top top sra   next  ;c
code u>>   ( n shamt - n')   x pop1   x top top srl   next  ;c

( Basic binary ops.)
code +   ( x t - x+t)   x pop1   x top top add   next  ;c
code -   ( x t - x-t)   x pop1   x top top sub   next  ;c

code and   x pop1   x top top and   next  ;c
code or    x pop1   x top top or    next  ;c
code xor   x pop1   x top top xor   next  ;c

( Stack ops.)
code dup    [r]  ( t - t t)  top push1   next  ;c
code drop   [r]  ( x t - x)  top pop1    next  ;c
code nip    [r]  ( x t - t)  cell sp sp addi   next  ;c

code over   [r]  ( w t - w t w)     0 sp w lw   wpush j  ;c
code swap   [r]  ( w t - t w)       0 sp w lw   0 sp top sw
                                           begin   w top mv   next  ;c

code rot    [r]  ( w x t - x t w)   0 sp   x lw   cell sp w lw
                                    0 sp top sw   cell sp x sw   again  ;c

code tuck   [r]  (   w t - t w t)   0 sp w lw   0 sp top sw   w push1   next  ;c

( Make a copy of the nth stack item, where  0 nth  is  dup)
code nth   [r]  ( w_n .. w_0 t - w_n .. w_0 w_t)
   top cellshift top slli   sp top top add   0 top top lw   next  ;c

: 2dup   over over ;  [r]
: -rot    rot  rot ;  [r]

( Return stack ops.)
code >r   [r]  ( w)    top rpush1   top pop1   next  ;c
code r>   [r]  ( - w)     w rpop1   wpush j  ;c
code r@   [r]  ( - w)   0 rp w lw   wpush j  ;c


( Memory access.)
code  @   ( a -  w)  0 top top lw    next  ;c
code h@   ( a - uh)  0 top top lhu   next  ;c  ( Unsigned!)
code c@   ( a - ub)  0 top top lbu   next  ;c  ( Unsigned!)

code !   ( w a)     0 sp w lw   0 top w sw
label poptwo   cell sp top lw   2 cells sp sp addi   next  ;c

code h!  ( h a)     0 sp w lw   0 top w sh   poptwo j  ;c
code c!  ( b a)     0 sp w lw   0 top w sb   poptwo j  ;c

code +!  ( w a)     0 sp w lw   0 top x lw   w x x add   0 top x sw
                    poptwo j  ;c

( The slt/u/i instructions set a register to 1 if the comparison is true,
  and to 0 otherwise. We want to use -1 as a true flag, so we always negate
  the result of the test.)

code 0=               top top seqz   label makeflag   top top neg   next  ;c
code 0<               top top sltz   makeflag j  ;c
code  <    x pop1   x top top slt    makeflag j  ;c
code u<    x pop1   x top top sltu   makeflag j  ;c

( Another useful compare operator - equality!)
: =   xor 0= ;


( Small constants.)
-2 constant -2   [r]
-1 constant -1   [r]
 0 constant 0    [r]
 1 constant 1    [r]
 2 constant 2    [r]

( Incrementers by small constants. Shared code means they take up very
  little space!)

meta: incr   constant  ;code   0 w w lw   w top top add   next  ;c
   1 incr 1+   [r]
   2 incr 2+   [r]

  -1 incr 1-   [r]
  -2 incr 2-   [r]

cell        incr cell+   [r]
cell negate incr cell-   [r]

( Double numbers. Useful, among other things, for computing with RISC-V's
  64-bit timers and counters.)

( Double-length math register use.

  Enter with d1 and d2 on the stack. Registers are first loaded as follows:

    top = d2hi
    w   = d2lo
    x   = d1hi
    y   = d1lo
)

code d+   ( d1 d2 - d1+d2)
   0 sp w lw  ( d2lo)   cell sp x lw  ( d1hi)   2 cells sp y lw  ( d1lo)
   y w w add  ( sumlo)   w y y sltu  ( y+w < y => carry)
   x top top add  ( sumhi)   top y top add  ( +carry)
label wput-pop2
   2 cells sp w sw  ( lo)   2 cells sp sp addi  ( pop)
   next   ;c

code d-   ( d1 d2 - d1-d2)
   0 sp w lw  ( d2lo)   cell sp x lw  ( d1hi)   2 cells sp y lw  ( d1lo)
   y w w sub  ( difflo)   y w y sltu  ( y-w > y => borrow)
   x top top sub  ( diffhi)   top y top sub  ( -borrow)
   wput-pop2 j  ;c

code dnegate   ( d - -d)
   0 sp w lw  ( dlo)   w y snez  ( will borrow only if w != 0)   w w neg
   0 sp w sw   top top neg   top y top sub  ( -borrow)   next  ;c

( I've wracked my brain and I can't come up with a way to do 64-bit
  compares without using a branch. Here is the basic idea:

  Compare the high-order words. If they are _equal_, return as the result
  the _unsigned_ comparison of the low-order words.

  Otherwise, ignore the low-order words and:
     For ud< return the _unsigned_ comparison of the high-order words 
     For  d< return the _signed_ comparison of the high-order words 
)
( Compare high-order words; if equal, compare low-order, pop stack, push
  flag, and run NEXT. If not equal, pop stack and return to caller.)

label dless-common
   cell sp x lw  ( d1hi)   x top = if  ( high-order words equal: compare low)
            0 sp w lw  ( d2lo)
      2 cells sp y lw  ( d1lo)
      3 cells sp sp addi  ( pop)   y w top sltu  ( d1 d2 u<)   makeflag j
   then
   3 cells sp sp addi   0 w jr  ;c

code d<   ( d1 d2 - f)
   dless-common w jal   x top top slt    makeflag j  ;c

code ud<  ( d1 d2 - f)
   dless-common w jal   x top top sltu   makeflag j  ;c

( Host words to make it easier to deal with double numbers on the target.

  >d   converts a host-side 64-bit number into two 32-bit target numbers
  d>   goes the other way: target -> host
  d.   prints a target double number as a signed 64-bit number
  ud.  prints a target double number as an unsigned 64-bit number
)

meta: >d   ( host - tdlo tdhi)   dup "ffff_ffff and  ( lo)  swap 32 u>> ;
meta: d>   ( tdlo tdhi - host)   32 <<  swap "ffff_ffff and  + ;
meta: ud.  ( tdlo tdhi)   d>     u. ;
meta: d.   ( tdlo tdhi)   d>  \f  . ;


( Once we have double numbers, these come in handy.)
: 2dup   ( a b     - a b a b)   over over ;  [r]
: 2swap  ( a b c d - c d a b)   rot >r  rot r> ;  [r]
: 2over  ( a b c d - a b c d a b)   3 nth  3 nth ;  [r]
: 2tuck  ( a b c d - c d a b c d)   2swap  2over ;  [r]


( Have both mcycle64@ and minstret64@ jump to the shared code so that when
  we are comparing cycles to instruction counts we are sure to be comparing
  apples and apples.)

label xypush
   top x push2   y top mv   next  ;c

( Let's read the mcycle counter and push its 64-bit value.)
code mcycle64@  ( - mcycle-lo mcycle-hi)
   begin   mcycleh y csrr
           mcycle  x csrr
           mcycleh z csrr   y z = until
   xypush j  ;c

code minstret64@  ( - minstret-lo minstret-hi)
   begin   minstreth y csrr
           minstret  x csrr
           minstreth z csrr   y z = until
   xypush j  ;c

( Running full bore it takes ~5 minutes for mcycle to overflow, so for the
  following experiments we can stick with the low 32 bits of the counters.)

code mcycle32@    ( - mcycle-lo)       mcycle w csrr   wpush j  ;c
code minstret32@  ( - minstret-lo)   minstret w csrr   wpush j  ;c

( Now for big fun. Let's read each counter four times, in quick succession,
  leaving the values on the stack.)

: 4c   mcycle32@  mcycle32@  mcycle32@  mcycle32@ ;
: 4i   minstret32@  minstret32@  minstret32@  minstret32@ ;

( With four timer or counter values on the stack, calculate the
  differences, so we can see how many cycles or instructions "elapsed"
  between each pair of reads.)

: 4diff   ( a b c d - b-a c-b d-c)
   over - >r  ( d-c)  over - >r  ( c-b)  swap -  r>  r> ;

( For fun, and to see totally different timing behaviour, we can do the
  same thing with full 64-bit reads of the counters. Read each one four
  times in quick succession.)

: 4cc   mcycle64@  mcycle64@  mcycle64@  mcycle64@ ;
: 4ii   minstret64@  minstret64@  minstret64@  minstret64@ ;

( Since the high words aren't necessary, drop them, leaving four lo words.)
: 4lo  ( alo ahi blo bhi clo chi dlo dhi - alo blo clo dlo)
   drop >r  drop >r  drop  nip  r>  r> ;

ram

( For debugging and interactive execution.)

( The host can push things onto host stack; they get copied to target
  stack, registers popped, words execute, re-push, copy back to host...
  Much easier than stuffing things into register slots on stack frame!)

code bug  [r]
   top ip rp ix push4   ebreak  ;c

implements continue-forth  __asm
   top ip rp ix pop4   fence.i   next  ;c

implements trampoline  ( x0 .. xn pfa - y0 .. ym)
   ]  execute  begin  bug  again  [

__host

( Make it easy to get to the key target registers from meta.)
meta
: sp@   tsp @  3 \m cells  +  ;  ( skip IP, RP, and IX)
: rp@   trp @ ;
: ip@   tip @ ;
forth

( Show some indication of whether a word is still executing. If IP is
  anything other than two cells past trampoline, we've hit "bug" somewhere
  other than the trampoline. Show this by annotating IP with a "*".)

: executing?   ( ip - f)   [ \m trampoline @  2 \m cells + #]  - ;

: .ip
   \m ip@  dup .h32  executing? if  ." * "  ^  then  ( done)  2sp ;

: .sp
   \m sp@  .h32__ ;


-: ( forth version of .regs)
   cr  ."       IX        SP        RP        IP"
       (  00000000  00000000  00000000  00000000 )
   cr      tix .tr       .sp   trp .tr       .ip ;
   is .regs


__meta


comment ~~examples~~
variable inc
: lala  do  i bug drop  inc @ +loop ;

( to demonstrate scripting target execution from the host)
meta: grog  ( start n)  0 do  \t 1+ remote  loop ;
( try: 44 10 grog)

~~examples~~

flash
