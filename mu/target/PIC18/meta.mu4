| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading PIC18 meta-compiler

hex

| -------------------------------------------------------------------------
| Interpreter mode stack
| -------------------------------------------------------------------------

8 array mode-stack
variable mode-ptr  mode-stack mode-ptr !  ( initialize empty stack)

: mode-depth   mode-ptr @  mode-stack - cell/ ;
: ?mode-empty  mode-depth  0= if error" mode stack underflowed"  then ;
: ?mode-full   mode-depth 8 = if error" mode stack overflowed"  then ;

| We can use !+ to push to an empty ascending stack, but we need -@ for pop.
: -@   ( a - n a-)  cell-  dup @  swap ;

: push-mode  ?mode-full  state @  mode-ptr @  !+  mode-ptr ! ;
: pop-mode   ?mode-empty          mode-ptr @  -@  mode-ptr !  state ! ;

| For seeing/debugging how the mode stack is working.
compiler
: .m  ( print mode stack and current mode)
   mode-stack  mode-depth  cr  dup .  for
      @+ swap  cell+ @execute ( mode prompt)  next  drop
   ."  |>" .mode-prompt ;

target-compiler
: .m   \c .m ;
forth
: .m   \c .m ;

| -------------------------------------------------------------------------
| Creating new target names
| -------------------------------------------------------------------------

meta
variable last-created  ( code field of last created target word)

: label   current preserve  labels  \m here  constant  __asm ;
: name    current preserve  target  \m here  constant ;
: code    \m name  __asm ;
: :       \m name  __target-colon ;

| NOTE: Only created words have a code field!
: create  \m name  \m here \m last-created !  0 \m , ( code field) ;

| -------------------------------------------------------------------------
| Special versions of the host colon compiler
| -------------------------------------------------------------------------

| Define useful colon compilers:
|   :m    for defining new target defining words!
|   :d    for defining definer words (analogous to compiler for host forth)
|   :tc   for defining target-compiler words (analogous to compiler for
|         target forth)

forth
: make-definer   :  __definer-colon ;
meta

: :m    current preserve  meta             make-definer ;
: :tc   current preserve  target-compiler  make-definer ;
: :d    current preserve  definer          make-definer ;

| For the very infrequent times that we need to create a nameless host word
| while compiling target code.

: -:m   here <:>  __definer-colon ;

forth

| -------------------------------------------------------------------------
| Macros defining register and stack conventions
| -------------------------------------------------------------------------

| Entering and exiting "macro definition" mode.
compiler  ( also reachable when searching definer)
: asm{   push-mode  __inline-asm ;  ( start assembling a macro)

definer  ( searched by __definer-colon and __inline-asm)
: }      pop-mode ;  ( exit from __inline-asm and return to previous colon)

assembler

| These are the three 16-bit pointer registers - implemented as register
| pairs - on the PIC18.

aka FSR0       equ DP   ( data pointer)
aka FSR0H      equ DPH  ( data pointer, high byte)

aka FSR1       equ AP   ( auxiliary pointer)
aka FSR1H      equ APH  ( auxiliary pointer, high byte)

aka FSR2       equ SP   ( stack pointer)
aka FSR2H      equ SPH  ( stack pointer, high byte)

aka POSTINC0   equ @dp+  ( read a data memory location, incr pointer)

( Move byte and move word, via WREG.)
: mov   ( from to)  asm{  \f swap ld  st } ;
: movw  ( from to)  asm{  \f 2dup mov  1 1 v+  mov } ;

forth
( Define a stack slot.)
: slot  ( offset)  constant  does> @  \a ] ;

assembler
( Offsets 0 and 1 are scratch space.)
0 slot X    ( low byte of Scratch)
1 slot XH   ( high byte of Scratch)

2 slot T    ( low byte of Top)
3 slot TH   ( high byte of Top)

4 slot S    ( low byte of Second)
5 slot SH   ( high byte of Second)

forth
: .slot  ( offset)
   dup 6 u< if  2* z" X XHT THS SH" +  2 type  ^  then
   ." [" .hex ." ]" ;

| Tell the disassembler about our stack slot names.
-: ( offset)  7f and  .slot ;  is .sp-off


| -------------------------------------------------------------------------
| Peephole optimizer tags
| -------------------------------------------------------------------------

| Tags tell the meta-compiler what kind of special code, if any, was just
| compiled. Currently used to identify literals and calls, for simple
| peephole optimizations.
|
| We store the tag byte at \m here. No tag is represented by an "empty"
| image byte - 0ff - *not* by a tag of zero.
|
| Low bit of tag is set if \m here is a forward jump destination. Other
| "option" bits can added as necessary.
|
| Tags used:

0 constant $rcall  ( $ suggests price tag ;-)
2 constant $call
4 constant $lit

: tag!  ( tag)     \m here image-c! ;
: tag@  ( - tag)   \m here image-c@ ;

: notag  "0ff tag! ;

| For setting low bits - eg, for annotating jump destinations. Note that
| this will leave an empty (0ff) tag unchanged!

: tag-option!  ( option)   tag@  or  tag! ;

| We want to cleanly uncompile code, so instead of simply backing up and
| leaving the cruft - instructions and tags - behind, let's back up and
| "uncompile" the code, leaving behind untagged empty space.

: uncompile  ( #cells)
   notag
   dup \m cells negate allot  ( back up #cells cells)
   for  0ffff \m ,  next  ( reset #cells cells) ;

| -------------------------------------------------------------------------
| target-compile, and tail call elimination
| -------------------------------------------------------------------------

: short?  ( dest)  >rel  ( woffset)  #11 sfits? ;

( Compiling target words.)
meta
: compile,  ( cfa)  ( smart call - compile rcall if possible)
   dup short? if  \a rcall  $rcall tag! ^  then
                  \a call   $call tag! ;
forth
.meta. chain' compile,  is target-compile,

| Convert call to jump. Remove tag. If call site is also a forward jump
| destination, return true, otherwise false.

: replace  ( tag toggle offset - compile-ret?)
   \m here +  dup image-@  rot xor  swap image-!
   notag  1 and ( jump dest?) ;

| If last code compiled was a call, rewrite it to a jump. Return a flag:
| true means we should compile a return instruction.

: tail?  ( - compile-ret?)
   tag@
   dup $call u< if  ( short call)  "0800 -2 replace ^  then
   dup $lit  u< if  ( long call)   "0300 -4 replace ^  then
   drop  -1 ;

| -------------------------------------------------------------------------
| Support for ;code and does>
| -------------------------------------------------------------------------

| NOTE: There is a danger here. The "code field" of words created by create
| contains a call instruction. If we allocate one word of space, the common
| ("parent") code - compiled by ;code or does> - has to be within the range
| of an rcall from the created ("child") word.
|
| It's too bad that we allocate space and build the data structure
| *before* we change the code field... If we did it the other way round we
| could compile a longer call if necessary. For now let's leave one
| instruction slot of space and only ever patch using an rcall instruction.

| This word, which is followed inline by a target code address, patches the
| code field of the last created word with an rcall to the inline target
| code address. It essentially "repoints" previously defined words
| - defined by create, variable, constant, etc - to point to new code. It
| gets *compiled* indirectly by both ;code and does>.

: patch  \m here  \m last-created @ \m goto  pop @  \a rcall  \m goto ;

| <;code> is used to switch from compiling *host* code (which will later
| run on the host, and build the target word) to compiling *target* code,
| which will run when words defined by this defining word later execute. In
| order to connect the two worlds, and to be able to patch up code fields
| to point to this newly-defined behavior, <;code> captures the target's
| "here" value. Remember, we are about to start compiling target code at
| "here".
|
| <;code> runs at the compile time of a defining word, but it leaves it up
| to its caller - ;code or does> - to compile any "prelude" code or to
| change the interpreter mode.

: <;code>   compile patch  \m here ,  show ;

defer compile-;code-prelude
defer compile-does-prelude

definer
: ;code  <;code>  compile-;code-prelude  __asm ;
: does>  <;code>  compile-does-prelude   __target-colon ;
forth

comment %%inline-in-kernel
| -------------------------------------------------------------------------
| Control structures.
| -------------------------------------------------------------------------

| Compile the following target word into the current target definition.
definer
: tcompile
   \c \t  compile target-compile, ;
forth

( Resolve a forward or backward jump, from src to dest.)
( When using absolute branch addresses, this is easy: just store dest at src.)

| NOTE: when using absolute addresses for branches, we must mark them as
| needing relocation, so we use a, . If instead we used relative branch
| addresses we should use , .

meta
: <resolve  ( dest src)  image-! ;
: >resolve  ( src dest)  swap  \m <resolve ;
: >mark   \m here  0 \m , ;

target-compiler
: =if   ( - src)        p, (=0branch)  \m >mark ;
: ?if   ( - src)        p, (?0branch)  \m >mark ;
: if    ( - src)        p,  (0branch)  \m >mark ;
: then  ( src)          \m here  \m >resolve ;
: else  ( src0 - src1)  p,   (branch)  \m >mark
                        swap  \tc then ;

: begin   ( - dest)  \m here ;
: =until  ( dest -)  \tc =if  \m <resolve ;
: ?until  ( dest -)  \tc ?if  \m <resolve ;
: until   ( dest -)   \tc if  \m <resolve ;
: again   ( dest -)  p, (branch)  \m >mark  \m <resolve ;
: =while  ( dest - src dest)  \tc =if  swap ;
: ?while  ( dest - src dest)  \tc ?if  swap ;
: while   ( dest - src dest)   \tc if  swap ;
: repeat  ( src dest -)   \tc again  \tc then ;

( n for .. next         goes n times; 64 Ki if n=0 )
( n ?for .. next then   goes n times; 0 if n=0 )

: for     ( - dest)      p,  (for)            \tc begin ;
: ?for    ( - src dest)  p, (?for)  \m >mark  \tc begin ;
: next    ( dest -)      p, (next)  \m >mark  \m <resolve ;

( do, loop, +loop)
: do      ( - dest)   p, (do)              \tc begin ;
: loop    ( dest)     p, (loop)   \m >mark  \m <resolve ;
: +loop   ( dest)     p, (+loop)  \m >mark  \m <resolve ;
forth
comment %%inline-in-kernel

| -------------------------------------------------------------------------
| Punctuation that changes the compiler state, or creates literals
| -------------------------------------------------------------------------

| XXX Much of this code is generic and related to the common/chains code
| and should probably be moved there!

meta
: '   .target. chain' execute ;  ( get target word's constant value: cfa)

| Assuming that the code field is an rcall instruction, these will work.
| But they will return garbage for anything other than a created word.

: >body   \m cell+ ;
: >value  \m cell+  image-@ ;

: literal   target-literal ;

: ]    pop-mode ;  ( does NOT create a literal!)

| If returning to a target colon definition, create a target literal;
| otherwise, create a host literal.

: #]   pop-mode  state @  [ ' __target-colon >body #] = if  \m literal ^ then  literal ;

: __host   \ [ ;    ( return to host forth mode)
: {   push-mode  \m __host ;  ( useful for bracketing a few host forth words)

forth
: }   pop-mode ;  ( return whence we came)

definer  ( searched by __definer-colon and __inline-asm)
: [   push-mode  __meta ;
: ;   \ ;  __meta ;  ( do normal host ; and return to __meta)

assembler
: ;c   __meta ;

target-compiler
: [    push-mode  __meta ;

: ^   tail? if  asm{  ret }  then ;
: ;   \tc ^  __meta ;  ( compile exit and return to __meta)

: [']       \m '  \m literal ;
: literal         \m literal ;  | instead of doing [ #] ??

forth
