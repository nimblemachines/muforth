| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading PIC18 memory

decimal

( Define the basics of the target's memory.)

 2 constant bytes/cell
         -d little-endian

ld target/common/memory.mu4   ( generic memory image support)

| Program memory addresses are 22 bits. The PC is 21 bits, but the largest
| PIC18 parts have only 128 KiB of flash.
|
| I've have only compared two subfamilies - PIC18F1xK50 and the PIC18-Q -
| but it seems that there are *standard* regions defined for the flash, but
| not every chip defines all of them.
|
| The 1xK50, for example, defines Flash, User ID, and Config space, and
| folds the device ID and revision ID into one word at 3f_fffe. The -Q series
| defines *all* of the following:
|
| Flash             : 00_0000 - 1f_ffff
| User IDs          : 20_0000 - 20_001f
| Device info area  : 2c_0000 - 2c_00ff
| Config words      : 30_0000 - 30_????
| EEPROM            : 38_0000 - 38_????
| Device config info: 3c_0000 - 3c_????
| Revision ID       : 3f_fffc - 3f_fffd
| Device ID         : 3f_fffe - 3f_ffff


| Let's define constants for the origins of each of the Flash areas,
| whether they exist or not.

"20_0000 constant @user-id
"2c_0000 constant @device-info    ( unique ID, calibration info)
"30_0000 constant @config
"38_0000 constant @eeprom
"3c_0000 constant @device-config  ( erase page size, number of flash pages, etc)
"3f_fffc constant @revision-id
"3f_fffe constant @device-id

( Two memory aspaces: flash/id/config/eeprom, and data [ram + i/o].)

22 make-aspace  ( flash/id/config/eeprom)
   dup #flash make-image
          dup make-region flash
              make-region boot

      dup 256 make-image  ( XXX how big is big enough?)
              make-region user-id

      dup 256 make-image  ( XXX how big is big enough?)
              make-region config

      #eeprom make-image
              make-region eeprom

| XXX Is the flash space choose-image totally chip-specific? Or can we do
| something like this for everything:

-: ( target)  ( choose an image from an address in flash space)
   dup @user-id u< if  drop flash ^  then
   dup @config  u< if  drop user-id ^  then
       @eeprom  u< if       config ^  then
                            eeprom ;

( Install choose-image in the flash aspace.)
flash 'choose-image !

| On some PIC18 families the ram has a strange origin, a strange size, or
| both. The easiest way to create a ram image that contains the entirety of
| the chip's ram is to take the number of BSR (bank select) bits, add 8,
| and use this as a power-of-2 size. For older PIC18 families this will
| result in a 4 Ki ram image; for newer (eg, Q) families, 16 Ki.

( For the data aspace we keep the default of "drop" for choose-image.)
16 make-aspace  ( data: ram + i/o)
   1 #bsr-bits 8 + << make-image
                      make-region ram

| On PIC18 parts, the bootloader - if any - starts at the beginning of
| flash. Unfortunately, PIC18 parts are not all the same in how they
| determine the size of the boot block.
|
| On the PIC18-K parts - at least the 1xK50, bit 3 of CONFIG4L is BBSIZ. If
| set, the bootblock is the full size. If reset, it is half size. If we
| define #boot to be the full size bootblock for each chip, we can easily
| calculate bbsiz here.
|
| On the PIC18-Q parts, there is a 3-bit BBSIZE field in CONFIG7. 128 KiB
| shifted right by BBSIZE is the boot block size.
|
| For both families, the unprogrammed state - BBSIZ=0 on K parts;
| BBSIZE=111 on Q parts - selects the *smallest* boot block. This is most
| likely what we want.

( XXX This is a hack, just so that we can get something working.)
#128 Ki 7 >> ( default boot block size on Q parts) constant #boot

( XXX We will probably need some vector code here, like on AVR.)

| Initialization of memory images and regions. We need the above vector
| code to calculate everything.
|
| XXX This code should move to target/PIC18/memory.mu4.

: wipe
       ram      @ram region!    0 fill-image
   user-id  @user-id region!  "ff fill-image
    config   @config region!  "ff fill-image
    eeprom   @eeprom region!  "ff fill-image
      boot         0 region!  "ff fill-image  ( erases entire flash image)
     flash     #boot region!  ( XXX should be *real* bbsize)

   | #vectors vectors \m allot ( "application" starts after vectors) ;
   ;

wipe  ( leaves flash as current region)
