( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading PIC18 memory image

( NOTE: Cribbed from AVR)

( Space for compiling into. PIC18's can get big; for now let's limit
  ourselves to 128k address space. Since the program space is
  word-addressed, this means 64k words.

  XXX: We should really define this in a device/xxx file that gets loaded
  _before_ this one.)

( Memory images should be stored in the dictionary like strings: prefixed
  by their length. When we push an image, we push the address of its first
  byte, but the previous cell countains the count, if we want to do bounds
  checking or address wrapping.)

variable image  ( image buffer pointer; points to either flash- or eeprom-image)

: make-image  create  ( #bytes)  aligned  dup ,  allot
              does>  cell+ ( skip count)  image ! ;

( Two real images)
128 Ki make-image  flash-image
  4 Ki make-image  eeprom-image  ( XXX prob way too big for PIC18)

( And a dummy image)
16 make-image  data-image  ( so "da" when not chatting will show something)


: #image  image @  cell- @  ( get byte count) ;
: 'image  image @           ( get address) ;

: wrap   #image 1-  and ;
: +a  ( a1 a2 - sum)  +  wrap ;  ( add and wrap to image boundary)

: image+  ( target - host)  wrap  'image + ;
: image-  ( host - target)        'image -  wrap ;


( This is a bit of a hack, but we have to do it somehow. PIC18's have, in
  addition to the program memory, two small regions of flash memory: one
  for storing ID bytes, and one for CONFIG bytes. The ID space is 8 bytes
  long; the size of the CONFIG space varies from part to part, and PIC18s
  have all manner of different CONFIGxx registers. Some of the newer
  USB-capable chips, such as the 26J53, have only 8 bytes of CONFIG
  registers.

  But the 1xK50 and 2xK50 have up to 14 bytes of CONFIG space. So let's
  allocate 16 bytes. Hopefully that will be enough!

  Rather than making these images in their own right - which engenders its
  own set of problems - lets create the idea of flash-spaces. These are
  self-indexing, and also "know" where they begin.)

: flash-space
   create  ( #bytes origin)  , ( origin)  aligned  dup , ( #bytes)  allot
   does>  ( target 'space - host | 0)
      @+ push ( target origin)  -  ( offset)  pop @+ push ( #bytes)
      over swap u< if  pop +  ^  then  ( offset)  pop 2drop  0 ;

( Ok, let's create the two spaces and make each one 16 bytes long so that
  reads by the memory dumping code will work reasonably.)

16 "20_0000 flash-space     id-space
16 "30_0000 flash-space config-space
16               buffer   dead-space  -1 dup dead-space 2!  ( fill with ff)


( DEBUG: Define show-comma to show code as it's compiled.)
.ifdef show-comma
: .debug-comma  dup  .h8_ ;
.else
: .debug-comma ;
.then

( DEBUG: Define show-c! to show writes to image.)
.ifdef show-c!
: .debug-c!   cr  ( byte addr)  2dup .hcell_  .h8 ;
: .debug-w!   cr  ( word addr)  2dup .hcell_  .hcell ;
.else
: .debug-c! ;
: .debug-w! ;
.then

: image-c@             image+ c@ ;
: image-c!  .debug-c!  image+ c! ;

( PIC18s are little-endian.)
: image-@  ( a - w)           image+  leh@ ;
: image-!  ( w a)  .debug-w!  image+  leh! ;


defer >prog ( dump program memory)
defer >data ( dump data memory)
defer >ee   ( dump eeprom memory)

: log2  ( n - #bits)
   0 swap  begin  dup 1 and 0= while  1 u+  u2/  repeat  drop ;

: addrbits  ( size)  log2  |addr ! ;

-: ( buf a u)  swap image+ -rot  cmove ;
: >image-read   [ #]  is |read ;  ( read from current image buffer)

: choose-flash-space  ( target - host)
   dup #flash u< if  image+  ^  then  ( normal flash-image access)
   dup     id-space  =if  nip ^  then  drop
   dup config-space  =if  nip ^  then  2drop  dead-space ;

-: ( buf a u)  swap choose-flash-space  -rot cmove ;
: >flash-read   [ #]  is |read ;  ( read from flash/id/config buffer)

: >image-prog   >flash-read                   4 Mi addrbits ;
: >image-data   >image-read    data-image     4 Ki addrbits ;
: >image-ee     >image-read  eeprom-image  #eeprom addrbits ;

: >image
   ['] leh@  is |cell@
              2 |cell !  ( size of cell in bytes)

   ['] >image-prog  is >prog
   ['] >image-data  is >data
   ['] >image-ee    is >ee

   >prog  ( default) ;

>image

( Dictionary operators.)
variable 'ram     ( ram pointer)
:  ram  'ram @ ;
: +ram  'ram +! ;

variable 'h   ( image dictionary pointer pointer; points to one of:)
   2variable 'app     ( application flash pointer, origin)
   2variable 'boot    ( bootloader flash pointer, origin)
   2variable 'ee      ( eeprom pointer, origin)
   2variable 'sig     ( signature pointer, origin)

: app     'app     'h !   flash-image  ;
: boot    'boot    'h !   flash-image  ;
: signature  'sig  'h !   flash-image  ;
: eeprom  'ee      'h !   eeprom-image ;

: h   'h @ ;  ( get _address_ of current dictionary pointer)


( XXX A better name for this? I want origin to return the origin of a
  space, not set the current space pointer to something...)

: org    ( a) ( set dict pointer)  h ! ;

meta
: here    ( - a)  h        @ ;
: origin  ( - a)  h cell+  @ ;

: aligned  1+  -2 and ;
: align    \m here \m aligned  org ;
: allot ( n)    h +! ;

: c,        ( b)                 \m here image-c!  1 \m allot ;
: align,    ( b)   \m here 1 and  if  \m c,  ^  then  drop ;
: ,         ( w)    0 \m align,  \m here image-!   2 \m allot ;

2 constant cell
: cells  2* ;
: cell/  2/ ;
: cell+  \m cell + ;
: cell-  \m cell - ;

forth
( return the origin & number of bytes in current region)
: region  ( - a u)  h 2@  ( origin ptr)  over - ;

( Initialization.)
: fferase  'image #image "ff fill ;  ( erases _current_ image)
: wipe
   "20_0000 id-space 16 "ff fill
   "30_0000 config-space 16 "ff fill
   data-image  "d0d0_dead_d0d0_dead dup  'image 2!
   eeprom-image fferase
   flash-image fferase ;  ( leaves flash-image as _current_ image)

: app!      ( app-origin)  dup 'app   2!  ( set ptr and origin to origin) ;
: boot!    ( boot-origin)  dup 'boot  2!  ( set ptr and origin to origin) ;
: ee!    ( eeprom-origin)  dup 'ee    2!  ( set ptr and origin to origin) ;
: sig!      ( sig-origin)  dup 'sig   2!  ( set ptr and origin to origin) ;
