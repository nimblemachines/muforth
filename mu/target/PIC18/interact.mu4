| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading PIC18 interaction

variable chatting

variable chat-vector
: chat-cmd   ( index - index+1)  dup  cells constant  1+
             does> @  chat-vector @ =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0
chat-cmd t.hello         ( - chunk-size)
chat-cmd t.get-status    ( - sp)
chat-cmd t.run           ( pc sp)
chat-cmd t.read-space    ( buf a u space)
chat-cmd t.write-data    ( buf a u)
chat-cmd t.write-eeprom  ( buf a u)
chat-cmd t.app-start
chat-cmd t.app-stop
chat-cmd t.flash-begin
chat-cmd t.flash-end
chat-cmd t.erase         ( a)
chat-cmd t.program       ( buf a u)
drop

( Choose a memory space based on current host region.)
: choose-space
   h preserve
   'aspace  flash 'aspace = if 0 ^ then  ( flash)
                               1 ;       ( ram/data)

: t.read       ( buf a u)  choose-space t.read-space ;
: t.read-data  ( buf a u)             1 t.read-space ;

: >image   ['] read-host-image  ( read from memory image)      du-target ;
: >chat    ['] t.read           ( read from connected target)  du-target ;

| Chunk size is reported by the debug interface. Always use this when
| copying RAM contents or programming the flash!

variable /chunk  ( chunk size, as reported by debug interface)

: copy-chunk  ( 'target len - 'target+len)
   | cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+ -rot t.write-data  pop ;

: copy-region  ( a u)
   | cr ." copy-region "  2dup swap u. u.
   /chunk @  /mod ( r q)  swap push  for   /chunk @  copy-chunk  next
                                    pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)
: copy-ram
   h preserve  ram
   ram-copied @  dup 0= if  drop  \m origin  then
   \m here  over -  copy-region
   \m here  ram-copied ! ;


( Cached local values of target registers.)
variable .SP   ( data stack pointer)

| We subtract 1 cell when writing CP, and add one cell when reading CP,
| because there is a *scratch* cell on the stack, below TOP.

( XXX maybe defer these?)
: get-regs   t.get-status  ( cp)  \m cell+  .SP ! ;
: set-regs   ( pc - pc sp)                  .SP @  \m cell- ;

: 2sp  space space ;
: 4#   # # # # ;
: .h16    hex  <#  4#  #> type ;
: .w   .h16  2sp ;
: .r   ( addr)  @  .w ;

defer .regs

defer verify-quietly  ( - diff)

: hi
   chatting on  >chat  t.hello  /chunk !
   ram-copied off  copy-ram
.ifndef noverify  verify-quietly drop  .then
   now __chatting is __meta  __meta ;

: chat-via   pop  chat-vector !  hi ;

: run      ( pc)  copy-ram  set-regs  t.run ;  ( don't wait for target)
: runwait  ( pc)  run  get-regs ;              ( wait for target)

: ?chat
   chatting @ 0= if  error" not connected to target"  then ;


| Because the target "caches" the top of the stack in a register, and
| because the trampoline code loads this register before execution, and
| pushes it afterward, we can deal only with the "memory image" of the target
| stack, rather than also worrying about what to put into the "top" register.
|
| What's a bit mystifying is that, to achieve a target stack depth of N,
| the host has to push N+1 items. The top one goes into top; and the
| bottom-most one is the "sentinel" value that gets loaded into top when the
| stack becomes empty.
|
| When pushing from the host, or when "pulling" from the target, we don't
| move more than 8 "user" items - but we pad this value a bit, since we are
| also using the stack to pass some execution context between host and
| target.

meta
| Put the D stack at the end of ram, for now - leaving one cell of space
| for the use of chat.

: sp0   [ @ram #ram +  \m cell-  #] ;
: sp!   .SP ! ;
: sp@   .SP @ ;
: depth   \m sp0  \m sp@ -  \m cell/  1- ;
forth

| We'd like numbers that the target would consider negative to be negative
| on the host stack as well. So let's sign extend stack values when they
| come back from the target.

: t>h  ( n - n')  ( "target to host")  dup "8000 and if  "1_0000 -  then ;

| stack> *first* builds a local image of the target stack - in the RAM
| image - and *then* copies it, in one chunk, to the target.

: stack>  ( "push" stack to target)
   h preserve  ram  ( so image-related words work)

   depth 0 max 12 min
   \m sp0  over 1+  \m cells -  dup \m sp! ( top of D stack)  swap
   for  tuck image-!  \m cell+  next  ( copy each cell as a word to D stack)
   "cafe swap image-! ( sentinel)
   ( Now copy stack image to target)
   \m sp@ image+  \m sp@  \m sp0  over -  t.write-data ;

| stack< *first* copies the target stack, in one chunk, to the host's RAM
| image, and *then* pulls the values out and pushes them onto the host's stack.

: stack<  ( "pop" stack from target)
   h preserve  ram  ( so image-related words work)

   \m depth 0 max 12 min  =if
      push
      \m sp@ image+  \m sp@  r@ \m cells  t.read-data  ( read target stack)
      pop
      \m sp@ over  ( n sp n)
      for  dup image-@ t>h  pop 2push  \m cell+  next ( starting with top, push to R)
      drop ( sp)
      for  2pop push  next  ( pop from R to reverse order)
      0
   then  drop ;


| Set |@ and |c@ to _some_ form of target fetch. Prefer to get bytes from
| target if we're connected. This word is useful so we can set an initial
| state for target's  du  and  dis  so that inspect won't crash when it
| runs |@ to get a default ea.

: >target  chatting @ if  >chat ^  then  >image ;


| Define our own key bindings for memory dumping and disassembly. We'll
| default to host bindings if there isn't one in our array. This way we
| only have to define the "delta" between host and target behaviours.

128 array pic-seekeys

( Default key action is to run host key code)
host-seekeys pic-seekeys  128 cells cmove

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes  ( set field width)
   >image   dup .addr  dup .hex-bytes
   chatting @ if
      -valid
      >chat   dup _addr  dup .hex-bytes
      -valid
   then
   drop ( a) ;

( So we can easily look at the signature embedded into the image.)
: 1dump-chars  ( a)
   hex-bytes
   >target
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   drop ;

pic-seekeys  -1  du-mode dumping        >target  skip+  skip-  1dump        ( a - a')
pic-seekeys  -1  du-mode dumping-chars  >target  skip+  skip-  1dump-chars  ( a - a')
pic-seekeys  -1  du-mode disasming      >target  dis+   dis-   1dis         ( a - a')

pic-seekeys 'seekeys !  ( switch over to our bindings)

key: d  ( a - a 0)   dumping        0 ;
key: C  ( a - a 0)   dumping-chars  0 ;  ( small c is "call")
key: i  ( a - a 0)   disasming      0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)

meta
: du   ( a - a')   dumping    inspect ;
: dis  ( a - a')   disasming  inspect ;

forth
