( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading PIC18 interaction

( XXX we have to combine the elegant chat-cmd stuff pioneered with MSP430,
  and the space-switching - >prog, >data etc - pioneered with AVR, into one
  nice thing. How?)

variable chatting

variable chat-vector
: chat-cmd   ( index)  cells  constant
             does> @  chat-vector @  =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

 0 chat-cmd t.Hello
 1 chat-cmd t.Run
 2 chat-cmd t.ReadProg     ( buf target len)
 3 chat-cmd t.ReadData     ( buf target len)
 4 chat-cmd t.ReadEE       ( buf target len)
 5 chat-cmd t.WriteData    ( buf target len)
 6 chat-cmd t.WriteEE      ( buf target len)
 7 chat-cmd t.Flash        ( buf target len)
 8 chat-cmd t.Erase        (     target)


: >chat-prog   ['] t.ReadProg  is |read     4 Mi addrbits ;
: >chat-data   ['] t.ReadData  is |read     4 Ki addrbits ;
: >chat-ee     ['] t.ReadEE    is |read  #eeprom addrbits ;

: >chat  ['] leh@  is |cell@
                    2 |cell !  ( size of cell in bytes)

         ['] >chat-prog  is >prog
         ['] >chat-data  is >data
         ['] >chat-ee    is >ee

         >prog  ( default) ;


.ifdef residual-avr-crap

( For reading and writing target cells.)
: t@  ( addr - h)                  pad swap 2 zread  pad leh@ ;
: t!  ( h addr)    swap  pad leh!  pad swap 2 zwrite ;

( chat-entry has pushed an "exception frame" onto the stack.

  The order, low to high: rah ral pad sreg tl th xl xh yl yh zl zh pch pcl
                  offset:  <skip>   0    1  2  3  4  5  6  7  8  9  10  11

  rah/ral is the return address to the "process" routine.
  NOTE: PC is pushed big-endian!
)

variable chat-frame  ( loaded from rp0)
: treg  ( offset - taddr)  constant  does> @  chat-frame @  + ;

( There is a byte of padding below the SREG to word-align frame.)
 1 treg .SREG
 2 treg .T
 4 treg .X
 6 treg .Y
 8 treg .Z
10 treg .PC


( Target has cell size of 16 bits.)
meta
: cell   2  ;
: cell/  2/ ;
: cells  2* ;
: cell+  \m cell + ;

( For reading and writing PC values on the stack. Convert a normal address
  to an "ra" - return address - by shifting right one bit and swapping
  bytes; ra's are stored big-endian on the stack!

  To convert back, swap bytes and shift left.)

forth
: >ra   ( a - ra)  \m cell/  >lohi hilo> ;
:  ra>  ( ra - a)            >lohi hilo>  \m cells ;

meta
: rp0  \eq SPL  t@  1+ ;             ( bottom of target's R stack)
: sp0  chat-frame @  -2 and  64 - ;  ( bottom of target's D stack;
                                       room for 32 values on R)
: sp!  ( target-sp)      .Y  t! ;
: sp@  ( - target-sp)    .Y  t@ ;
: top!  ( target-top)    .T  t! ;
: top@  ( - target-top)  .T  t@ ;

( PC on R stack is big-endian and is a cell address, not a byte address.)
: pc!  ( target-cfa)    >ra  .PC  t! ;
: pc@  ( - target-cfa)       .PC  t@  ra> ;

: depth  \m sp0 \m sp@ -  \m cell/ ;  ( depth of actual stack)
: u.  u. ;
: .  . ;
: .s  .s ;

forth
: 2sp  space space ;
: .b8  binary  <#  # # # #  char _ hold  # # # #  #> type ;
: .h16    hex  <#  # # # #  #> type ;
: .w   ( addr)  t@  .h16  2sp ;
: .sr   .SREG   t@  .b8   2sp ;

-- 005f reg  SREG     | I       T       H       S       V       N       Z       C

: .regs
   radix preserve
   cr  ." ITHS_VNZC     T     X     Y     Z    SP    PC"
       (  1000_0011  1234  3456  8738  abab  3a00  3b66 )
   cr  .sr  .T .w  .X .w  .Y .w  .Z .w
       chat-frame @ .h16 2sp  \m pc@ .h16 2sp ;


( The semantics of moving cells to and from the target stack are a bit
  complicated.

  When the target stack is empty, sp0 = sp, and the top register contains
  garbage.

  When the target stack isn't empty, the distance between sp0 and sp is
  2*depth, but the bottom-most cell is garbage, and top is valid.)

: stack>  ( "push" stack to target)
   depth 0= if  "cafe \m top!  \m sp0 \m sp!  ^  then
   \m top!
   depth 7 min  ( more than that would be silly)
   \m sp0 over 1+ \m cells -  dup \m sp! ( top of D stack)  swap
   for  tuck t!  \m cell+  next  ( copy each cell as a word to D stack)
   "cafe swap t! ( push bottom) ;

: stack<  ( "pop" stack from target)
   \m depth 0 max 8 min  ( more than that would be silly)  =if
      1- ( depth, excluding top)  =if
         \m sp@ over  ( n sp n)
         for  dup t@  pop 2push  \m cell+  next  ( starting with top, push to R)
         drop ( sp)
         for  2pop push  next  ( pop from R to reverse order)
         0
      then  \m top@  swap
   then  drop ;

( Get target's hardware SP - ie, forth's return stack ptr - and store into
  chat-frame.)

: get-rp   \m rp0  \m cell+ ( skip ret addr)  chat-frame ! ;

: chat  +chat  >chat  avrchat.Hello  get-rp  .regs ;
: copy-ram ;  ( XXX no-op)
: runwait  zgo  get-rp  .regs ;

( XXX Should we try to automatically connect to target?)
: remote  ( cfa)  ( execute target forth word)
   chatting @ 0= if  error" not connected to target"  then
   copy-ram  \m pc!  stack>  runwait  stack< ;

: rx  ( cfa)  ( execute target non-forth word)
   chatting @ 0= if  error" not connected to target"  then
   copy-ram  \m pc!          runwait ;


( Interacting with a chatty, connected target.)

-:  ."  (interacting with target)"  ;
-:
      .meta. find  if  execute          ^  then  ( labels are in .meta.)
    .target. find  if  execute  remote  ^  then  ( execute as forth word)
   .equates. find  if  execute          ^  then
.ifdef no-number                                 complain ;
.else                                            number ;
.then
mode __target

.then  ( residual-avr-crap)


( XXX what goes here?)
: get-regs ;
: .regs ;

: hi   chatting on  >chat  t.Hello  get-regs  .regs ;
: chat-via   pop  chat-vector !  hi ;


( Set |@ and |c@ to _some_ form of target fetch. Prefer to get bytes from
  target if we're connected. This word is useful so we can set an initial
  state for target's  du  and  dis  so that inspect won't crash when it
  runs |@ to get a default ea.)

: >target  chatting @ if  >chat ^  then  >image ;


( Define our own key bindings for memory dumping and disassembly. We'll
  default to host bindings if there isn't one in our array. This way we
  only have to define the "delta" between host and target behaviours.)

128 array pic18-seekeys

( Default key action is to run host key code)
host-seekeys pic18-seekeys  128 cells cmove

( Dump one line of memory from target program memory.)
: 1dump  ( a)
   hex-bytes
   >image    >prog  dup .addr  dup .hex-cells
   chatting @ if
      -valid
      >chat  >prog  dup _addr  dup .hex-cells
      -valid
   then
   drop ;

( So we can easily look at the signature embedded into the image.)
: 1dump-chars  ( a)
   hex-bytes
   >target >prog
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   dup _addr  dup .hex-cells
   drop ;

( In the strange case that we switch to dumping data via the 'a' key, but
  don't happen to be connected to a target, we'll get "deadbeef" to remind
  us.)

: 1dump-data  ( a)
   hex-bytes
   >target >data
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   dup _addr  dup .hex-cells
   drop ;

( Dumping EEPROM)
: 1dump-ee  ( a)
   hex-bytes
   >image    >ee  dup .addr  dup .hex-bytes
   chatting @ if
      -valid
      >chat  >ee  dup _addr  dup .hex-bytes
      -valid
   then
   drop ;


pic18-seekeys  -1
   2dup  du-mode dumping        >target  skip+  skip-  1dump        ( a - a')
   2dup  du-mode dumping-data   >target  skip+  skip-  1dump-data   ( a - a')
   2dup  du-mode dumping-chars  >target  skip+  skip-  1dump-chars  ( a - a')
   2dup  du-mode dumping-ee     >target  skip+  skip-  1dump-ee     ( a - a')
   2dup  du-mode disasming      >target  dis+   dis-   1dis         ( a - a')
   2drop

pic18-seekeys 'seekeys !  ( switch over to our bindings)

key: d  ( a - a 0)   dumping  0 ;
key: a  ( a - a 0)   dumping-data  0 ;
key: e  ( a - a 0)   dumping-ee  0 ;
key: C  ( a - a 0)   dumping-chars  0 ;  ( small c is "call")
key: i  ( a - a 0)   disasming  0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)

( make an alias so we can still get to it)
: _du  du ;

: du   ( a - a')   dumping     inspect ;
: dis  ( a - a')   disasming   inspect ;
: de   ( a - a')   dumping-ee  inspect ;

: da  ( a - a')  ( dump DAta)
   chatting @ 0= if error" no connected target - no data memory available"  then
   dumping-data  inspect ;


meta
: du   du ;
: dis  dis ;

forth
