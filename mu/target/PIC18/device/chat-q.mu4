| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading PIC18-Q chat support

( Chat support for q43, q84 and similar devices.)

__meta

| Set up the CONFIG bytes. There are 10 for the Q43, and 35 for Q84. The
| following values should work for both chips.

config binary
( CONFIG1)   1000_1100 c,  ( RSTOSC=64m, EXTOSC=off)
( CONFIG2)   1111_1111 c,  ( default)
( CONFIG3)   0111_1101 c,  ( BOREN=SBOREN, multivector, power up timer=64ms)
( CONFIG4)   0111_1110 c,  ( XINST on, BORV=2.45v)
( CONFIG5)   1001_1111 c,  ( WDTE=00: watchdog disabled)
( CONFIG6)   1111_1111 c,  ( default)
( CONFIG7)   1111_0111 c,  ( BBEN=on, BBSIZE=111)
( CONFIG8)   1111_1110 c,  ( WRTB=on: boot block protected)
( CONFIG9)   ( reserved on Q43; related to CRC-on-boot for Q84)
( CONFIG10)  ( default)
| CONFIG11 and the following 24 bytes are all dedicated to CRC checking the
| boot and flash regions at power-up. We ignore them for now.
boot

hex

| Since Q series have "peripheral pin select" muxing, we have to set this
| up. On 28-pin devices, U5RX can connect to ports A and C; U5TX can
| connect to ports B and C. Since it would be nice to have the pins next to
| each other, let's choose two port C pins, which also happen to be on the
| corner of the chip:
|
|    RC4 = U5RX
|    RC5 = U5TX.
|
| For inputs, we set the *peripheral's* PPS register to refer to a port pin:
|
|    U5RXPPS = %010_100
|
| The high three bits are the port:
|
|    000 = port A
|    001 = port B
|    010 = port C, etc
|
| And the low three bits are the pin on that port. The above example connects
| U5RXPPS to RC4.
|
| For outputs, things go the other way. There is a PPS register for every
| port pin that you might want to use as an output - in our case, RC5PPS -
| and it gets set to a *source index*. The source index for U5TX is hex 2C.
| So to connect U5TX to RC5, we do the following:
|
|    RC5PPS = "2c
|
| Except in assembler. ;-)

label chip-init
   ( We have to turn *off* the analog select pin for RX.)
   4 ANSELC bank b) bclr

   ( And turn off the tristate bit to make TX an output.)
   5 TRISC ) bclr

   ( Now let's connect the pins.)
   %010_100 ( RC4) ldi  U5RXPPS bank b) st
   2c ( index of U5TX) ldi  RC5PPS b) st

   ( Now that we have the pins connected, set up the UART itself.)
   30 ( TXEN RXEN MODE=0: 8-bit no parity) ldi  U5CON0 b) st
   #64,000,000 #115,200 / 8 /  1+ 2/ ( round)  1- ldi  U5BRG b) st
   7 ( ON) U5CON1 b) bset
   ret  ;c

( Wait for U5RXIF, then read received byte into W.)
label recv-byte
   begin  0 ( U5RXIF) PIR13 ) btstss  again  U5RXB bank b) ld  ret  ;c

( Wait for U5TXIF, then transmit W.)
label send-byte
   begin  1 ( U5TXIF) PIR13 ) btstss  again  U5TXB bank b) st  ret  ;c

( Support for NVM - non-volatile memory - module.)

| We need to receive a series of bytes from the host to execute an NVM
| operation. The trouble is, every time we call recv-byte, the BSR gets
| clobbered. Let's make a short word that gets a byte from the host and
| then sets up the BSR for the NVM registers.

label recv-byte-nvm
   recv-byte c  NVMCON0 bank \f drop  ret  ;c

( Set NVMADR from PGMADR.)
label set-nvm-addr
   PGMADRU ) ld  NVMADRU bank b) st
   PGMADRH ) ld  NVMADRH b) st
   PGMADR  ) ld  NVMADRL b) st  ret  ;c

| NOTE: A byte read (ie, a read of Config or EEPROM space) clears NVMDATH,
| and, if auto-incrementing, only increments NVMADR by 1.

label nvm-read
   recv-byte-nvm c  ( cmd)  NVMCON1 b) st  ( set cmd from host)
   0 ( GO) NVMCON0 b) bset  ( set GO bit to start the read)
   begin  0 NVMCON0 b) btstsc  again  ( wait for GO to clear)
   NVMDATL      b) ld  send-byte c  ( Send to the host the data that was read.)
   NVMDATH bank b) ld  send-byte j  ;c

label nvm-write
   recv-byte-nvm c  ( cmd)  NVMCON1 b) st  ( set cmd from host)

   ( Get a word of data from host. This is zero for page erase and page write.)
   recv-byte-nvm c  NVMDATL b) st
   recv-byte-nvm c  NVMDATH b) st

   | Get the first unlock byte from the host, then write it and its
   | complement to the unlock register. The two writes to NVMLOCK have to
   | happen within a certain number of cycles. Reading each byte from the
   | serial port takes too long and doesn't work!

   recv-byte-nvm c  NVMLOCK b) st
   WREG ) com       NVMLOCK b) st

   | Start the operation and wait for completion. This bset has to happen
   | *immediately* after the second NVMLOCK write or a WRERR occurs!

   0 ( GO) NVMCON0 b) bset  ( set GO bit to start the write)
   begin  0 NVMCON0 b) btstsc  again  ( wait for GO to clear)
   NVMCON1 b) ld   ( read status)
   NVMCON1 b) clr  ( clear cmd and status)
   send-byte j     ( send status to host)  ;c
