| This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2025 David Frech. (Read the LICENSE for details.)

loading PIC18 Forth kernel

hex

| NOTE: This is really just a sketch to see what it *might* look like to
| define a 16-bit Forth kernel for the PIC18. This will also let us test
| out ideas about executing code, trampolines, etc.

__meta

( 1 byte literal; high byte is zero)
label lit00   SH clr  ( fall thru)  ;c
label lit      S st   ( fall thru)  ;c
label 1push   2 SP suba  ret  ;c

( 1 byte literal; high byte is ff)
label litff   SH set  lit j  ;c

| NOTE: We use \m compile, instead of the assembler's c (smart call) so
| that the calls will be tagged and can be tail-call converted if a word
| ends with a literal.

-:m ( literal)
   >lohi  0ff and
   dup    0= if  ( high 8 bits all 0)  drop  asm{  ldi  lit00 compile, }  ^  then
   dup 0ff = if  ( high 8 bits all 1)  drop  asm{  ldi  litff compile, }  ^  then
   asm{  ldi  SH st  ldi  lit compile, } ;  is target-literal

( Arith/logic 1ops.)
code negate   T neg  0 ldi  TH rsbb  ret  ;c
code invert   T com         TH com   ret  ;c

code 2*   0 ( C) STATUS ) bclr          T rlc  TH rlc  ret  ;c
code u2/  0 ( C) STATUS ) bclr  begin  TH rrc   T rrc  ret  ;c
code 2/   TH w rlc  ( sign -> C)   again  ;c

( Arith/logic 2ops.)
code +      T ld  U add  TH ld  UH adc  ( fall thru)  ;c
label 1pop  2 SP adda  ret  ;c

code bic    ' invert c  ( fall thru)  ;c
code and    T ld  U and  TH ld  UH and  1pop j  ;c
code or     T ld  U or   TH ld  UH or   1pop j  ;c
code xor    T ld  U xor  TH ld  UH xor  1pop j  ;c

code -      T ld  U sub  TH ld  UH sbb  1pop j  ;c

( Comparisons and tests.)
label true   T set  TH set  ret  ;c
label false  T clr  TH clr  ret  ;c

code 0=   T ld  TH or   false 0= until  true j  ;c
code 0<         TH tst  false 0< until  true j  ;c
code u<   ' - c         false u< until  true j  ;c

( Stack ops.)
:tc drop   asm{  2 SP adda } ;  ( make drop a macro!)

code dup   ( a   - a a)    TH SH mov  T ld  lit j  ;c
code over  ( a b - a b a)  UH SH mov  U ld  lit j  ;c

( Permutations are more involved!)
code swap  ( a b - b a)    T S movw  U T movw  S U movw  ret  ;c

: nip   ( a b - b)      swap drop ;
: tuck  ( a b - b a b)  swap over ;

( Return stack.)

| These "expose" the creation of R stack slots to Forth code. Do we want
| this?
:tc +r  ( push a new R slot)  asm{  push  } ;
:tc -r  ( pop an R slot)      asm{  pop  } ;

| XXX This is experimental, and probably won't survive. I'm likelier to use
| *another* stack - pointed to by AP - aka FSR1 - instead.

| NOTE: r! and r@ ignore TOSU.
| XXX r! and r@ should be in target-runtime.

code r!  | To implement >r, caller does push, then calls this
   STKPTR ) dec  T TOS ) movw  STKPTR ) inc  1pop j  ;c

code r@  | To implement r>, caller calls this, then does pop
   STKPTR ) dec  TOS ) S movw  STKPTR ) inc  1push j  ;c

:d tcompile   \c \t  compile target-compile, ;

:tc >r   \tc +r  tcompile r!  ;
:tc r>           tcompile r@  \tc -r  ;

| We can also move "compressed" (shifted by one bit) return addresses to
| and from the R stack. This assumes a flash size of 128Ki or less!

code ra!
   STKPTR ) dec
   0 ( C) STATUS ) bclr
      T w rlc  TOS  ) st
     TH w rlc  TOSH ) st
   TOSU ) clr  TOSU ) rlc
   STKPTR ) inc  1pop j  ;c

code ra@
   STKPTR ) dec
   TOSU ) w rrc
   TOSH ) w rrc  SH st
   TOS  ) w rrc  S  st
   STKPTR ) inc  1push j  ;c

code dr!  ( double r store)
   STKPTR ) dec
   U TOS ) movw  T TOSU ) mov
   STKPTR ) inc  4 SP adda  ret  ;c

code dr@  ( double r fetch)
   STKPTR ) dec  4 SP suba
   TOS ) U movw  TOSU ) T mov  TH clr
   STKPTR ) inc  ret  ;c

( rot will test >r and r>.)
: ra-test  +r  c597 ra! ra@  795c ra! ra@  -r ;
: ra-test-2  +r  c597 ra! dr@  795c ra! dr@  e781 3b dr! ra@  -r ;

( These definitions are from fig-FORTH.)
: rot   ( a b c - b c a)  >r swap  r> swap ;
: -rot  ( a b c - c a b)  swap >r  swap r> ;

( Literals test.)
: lits  34 f00 -23 -4fa ;

( R stack test.)
| : rr  1122 >r r@ r>  r@ ( lo 16 of return addr) ;

| XXX just to test how inc and dec change the flags.
code 100+  TH inc  ret  ;c
code 100-  TH dec  ret  ;c

label trampoline
   | Since current PIC18-Q devices max out at 128 Ki of flash, we can fit
   | the PC into one stack slot by shifting it *right* one bit. While
   | setting the latches for the indirect call, we pop the PC off the stack
   | and shift it *left* one bit.

   | NOTE: Since we have not adjusted SP to leave two bytes of scratch
   | space, the PC is in S and SH, not T and TH.

   0 ( C) STATUS ) bclr  ( clear carry)
   S rlc  SH w rlc  PCLATH ) st  PCLATU ) clr  PCLATU ) rlc
   S ld  callw  ( execute the target word)

   ( Let's push STATUS. It's helpful to see how code affects the STATUS bits.)
   STATUS ) S mov  SH clr  ret  ;c

__host

variable .STATUS   | --    nTO   nPD   N     OV    Z     DC    C
: .status  .STATUS @  binary  <# 4# char _ hold # #> type  2sp ;

: .regs   radix preserve
   cr  ." N_VZHC    SP"
       (  0_1111  0123  )
   cr    .status
                dp@ .w ;

: rx  ( addr)  ( execute target word)
   2/  stack>  \m trampoline runwait  stack<
   .STATUS !  .regs ;

now rx is remote

__meta
