( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading PIC18 disassembler

( Disassembler for PIC18 CPU instructions.)

hex

( Words to compile the instruction table.
  ..  acts like 'then'
  match and exact compile a test and a zbranch, followed by code to print
  the opcode name)

: (match)   ( op mask match - op f)  push  over and  pop = ;
: (exact)   ( op      match - op f)        over          = ;

( In the disassembler, use .op to print the following opcode name.)
: (.op)  pop @+ push  ( fetch following cfa)  >name type  space ;

compiler
: ..    compile ^  \ then ;
: .op   compile (.op)  .assembler. \chain ;
: match  ( - src)  compile (match)  \ if  \ .op ;
: exact  ( - src)  compile (exact)  \ if  \ .op ;
: multi  ( - src)  compile (match)  \ if        ;  ( doesn't print op)
forth

( Sign-extend 16-bit word to host number)
: sext  ( w - n)   dup 8000 and if -1_0000 + then ;

( Standard ways of printing different "types".)
: .udec   radix preserve  decimal  (u.) type ;
: .hex    radix preserve  hex       (.) type ;
: .h12    radix preserve  hex  <#  # # #  #> type ;

: .h12_   .h12 space ;

: -trailing  ( a u - a u')  ( strip trailing blanks)
   over + ( end)  begin  1-  dup c@ bl -  until  over -  1+ ;

: .bank  dup 0f and  8 <<  dup current-bank !  .hex ;

: .imm6   ( op - op)  dup  03f and  .h8 ;
: .imm8   ( op - op)  dup  0ff and  .h8 ;
: .nop    ( op - op)  dup 0fff and  .h12 ;

: .zoff   ( zoff)          07f and  .h8  ."  ,z" ;

( Convert f8 to access ram address or stack offset and print it.)
: .access  ( f8)
   5f over u< if  0f00 +  .h12  ^  then
   xinst @ if  .zoff  ^  then  .h12 ;

( Print a guess of the address, based on current bank setting)
( XXX Use slashes /addr/ to suggest "banked"?)
: .banked  ( f8)
   current-bank @  +  ." /" .h12 ." /" ;

: .af  dup >f8  over 100 and if  .banked  ^ then  .access ;
: .d   dup 200 and 0= if  ." w " then ;

: .afop   ( op - op)      .af ;
: .dafop  ( op - op)  .d  .af ;

( Special-purpose matchers for the most common instructions.)
: (afop)    ( op      match - op f)        over fe00 and = ;
: (dafop)   ( op      match - op f)        over fc00 and = ;

compiler
:  afop  ( - src)  compile  (afop)  \ if  \ .op  compile .afop ;
: dafop  ( - src)  compile (dafop)  \ if  \ .op  compile .dafop ;
forth

: .bitop   dup  9 >>  7 and  ( bit#)  u.  .af ;

: .movff   dup .h12_  cell* .h12 ;

( Extended instructions; "s" is 7 bit offset from fsr2, aka z)
: .movsf   dup .zoff  cell* .h12 ;
: .movss   dup .zoff  cell* .zoff ;

: >offset  ( op #bits - op offset)
   1- push  dup  r@ ones and  ( op unsigned-bits)
           over pop mask and  ( op unsigned-bits sign-bit)  -  2* ;

( XXX .haddr might print too many digits!)
: .dest  ( op #bits - op)  >offset  p @ +  .haddr ;

: .rjmp   #11 .dest ;

( Print jmp opcode, including a _single_ trailing space.)
( Order is ZCVN, bit set, then bit clear.)
: .jop  ( op - op)
   z" bz  bnz bc  bnc bv  bnv bn  bnn "  over 8 >>  7 and  2* 2*  +
   4 -trailing  1+ type ;

( NOTE: shred hasn't printed the opcode; we have to do that.)
: .cond  ( op - op)   .jop  8 .dest ;

: .ljmp  ( op - op)   dup 0ff and  ( low)  cell* 0fff and  8 << +  2*  .haddr ;
: .ldix  ( op - op)   dup 0f and  ( high)  8 <<  cell* 0ff and  +  .h12 ;

: shred  ( op - op)
( All the instructions!)

        0000 exact nop

..      0003 exact sleep
..      0004 exact clrwdt
..      0005 exact push
..      0006 exact pop
..      0007 exact daw

..      0008 exact p@   ( tblrd*)    ( read program memory)
..      0009 exact p@+  ( tblrd*+)   ( read program memory, post incr)
..      000a exact p@-  ( tblrd*-)   ( read program memory, post decr)
..      000b exact p+@  ( tblrd+*)   ( read program memory, pre incr)

..      000c exact p!   ( tblwt*)    ( write program memory)
..      000d exact p!+  ( tblwt*+)   ( write program memory, post incr)
..      000e exact p!-  ( tblwt*-)   ( write program memory, post decr)
..      000f exact p+!  ( tblwt+*)   ( write program memory, pre incr)

..      0010 exact iret       ( return from interrupt; restore from stack)
..      0011 exact iret.s     ( return from interrupt; restore from shadow regs)

..      0012 exact ret        ( return from subroutine; restore from stack)
..      0013 exact ret.s      ( return from subroutine; restore from shadow regs)

..      00ff exact reset

.. fff0 0100 match bank   .bank

..      0200 afop  mul
..      0400 dafop dec

( XXX create a special category for these? like afop and dafop?)
.. ff00 0800 match negi   .imm8
.. ff00 0900 match ori    .imm8
.. ff00 0a00 match xori   .imm8
.. ff00 0b00 match andi   .imm8
.. ff00 0c00 match reti   .imm8
.. ff00 0d00 match muli   .imm8
.. ff00 0e00 match ldi    .imm8
.. ff00 0f00 match addi   .imm8

..      1000 dafop or
..      1400 dafop and
..      1800 dafop xor

..      1c00 dafop com

..      2000 dafop adc
..      2400 dafop add
..      2800 dafop inc
..      2c00 dafop decsz

..      3000 dafop rrc
..      3400 dafop rlc
..      3800 dafop rot4
..      3c00 dafop incsz

..      4000 dafop ror
..      4400 dafop rol

..      4800 dafop incsnz
..      4c00 dafop decsnz

..      5000 afop ldw
..      5200 afop tst

..      5400 dafop rsbb
..      5800 dafop sbb
..      5c00 dafop sub

..      6000 afop cmpslt
..      6200 afop cmpseq
..      6400 afop cmpsgt
..      6600 afop tstsz

..      6800 afop set
..      6a00 afop clr
..      6c00 afop neg
..      6e00 afop stw

.. f000 7000 match btog     .bitop
.. f000 8000 match bset     .bitop
.. f000 9000 match bclr     .bitop
.. f000 a000 match btstss   .bitop
.. f000 b000 match btstsc   .bitop

.. f000 c000 match movff    .movff

.. f800 d000 match rjmp     .rjmp
.. f800 d800 match rcall    .rjmp

.. f800 e000 multi          .cond

   ( e800 - e8ff are _extended instructions_)

.. ff00 ec00 match call     .ljmp
.. ff00 ed00 match call.s   .ljmp

.. fff0 ee00 match ldx   .ldix
.. fff0 ee10 match ldy   .ldix
.. fff0 ee20 match ldz   .ldix

.. ff00 ef00 match jmp   .ljmp

.. f000 f000 match nop   .nop    ( this is an extension word; show its contents)

-- --------------------------------------------------------------------------
-- Extended instructions: e800 to ebff, plus 0014 (callw)
-- --------------------------------------------------------------------------

..      0014 exact callw

.. ffc0 e800 match addx     .imm6
.. ffc0 e840 match addy     .imm6
.. ffc0 e880 match addz     .imm6
.. ffc0 e8c0 match addzret  .imm6

.. ffc0 e900 match subx     .imm6
.. ffc0 e940 match suby     .imm6
.. ffc0 e980 match subz     .imm6
.. ffc0 e9c0 match subzret  .imm6

.. ff00 ea00 match pushi   .imm8

.. ff80 eb00 match movsf   .movsf
.. ff80 eb80 match movss   .movss

.. ." *unimplemented*"

( That's all folks!)
;

( Support for interactive disassembly.)
: dis+  ( a - a' 0)  drop  p @  0 advance  0 ;
: dis-  ( a - a' 0)            -4 advance  0 ;  ( back up a bit)

( The workhorse.)
: 1dis  ( a)
   dup .addr  .nesting space
   p !  cell*  ( op)  dup .hcell_  space
   shred  drop ;
