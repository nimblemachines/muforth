( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( Support common to all 908 and S08 interactions. Things like SWI stack
  frames, reading and writing memory using "indexed" reads and writes.)


loading HC08 Interaction (common)

variable chatting
variable chat-vector

: chat-cmd   ( index - index+1)  dup cells  constant  1+
             does> @  chat-vector @ =if  +  @execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0  ( initial command index)

chat-cmd t.Hello
chat-cmd t.GetRegs      ( frame - sp)
chat-cmd t.SetRegs      ( frame)
chat-cmd t.Run          ( )
chat-cmd t.ReadChunk    ( target len buf)  ( XXX order??)
chat-cmd t.WriteChunk   ( target len buf)
chat-cmd t.FlashChunk   ( target len buf fcmd - status)

drop ( index)

-:  ( buf addr len)  rot t.ReadChunk ;
: >chat  [ #]      is |read
         ['] beh@  is |cell@
                   16 |addr !  ( size of addr in bits)
                    2 |cell !  ( size of cell in bytes) ;


variable ipad  ( "interact" pad)
: t@   ( a - w)                \m cell  ipad  t.ReadChunk  ipad beh@ ;
: tc@  ( a - b)                      1  ipad  t.ReadChunk  ipad c@ ;
: t!   ( w a)  swap ipad beh!  \m cell  ipad  t.WriteChunk ;
: tc!  ( b a)  swap ipad c!          1  ipad  t.WriteChunk ;


( We keep a local copy of the target's registers in the same order as they
  appear in an exception frame.

  The order, low to high: H CC A X PCH PCL)

6 buffer chat-frame  ( local copy of SWI stack frame)
variable chat-sp     ( current value of target's SP)

: get-regs   chat-frame t.GetRegs  chat-sp ! ;
: set-regs   chat-frame t.SetRegs ;

( These index into our local chat-frame, _not_ into target memory!)
: reg  ( offset)  constant  does> @  chat-frame + ;  ( self-index)
00 reg .H
01 reg .CC
02 reg .A
03 reg .X
04 reg .PC
04 reg .PCH
05 reg .PCL

( These are handy.)
: pc!  .PC beh! ;
: pc@  .PC beh@ ;

: hx!   >lohi  .H c!  .X c! ;
: hx@          .H c@  .X c@  hilo> ;

: 4#  # # # # ;
: .bits8  binary  <#  4#  4#  #> type ;
: .h16       hex  <#  4#  #> type ;

: .b  ( a)  c@    .h8_ ;
: .w  ( a)  beh@  .h16  space ;

: .regs
   radix preserve
   cr  ." V--HINZC  A  H  X   SP   PC"
   cr  .CC c@ .bits8 space  .A .b  .H .b  .X .b  chat-sp @ .h16 space  .PC .w ;

-- : .x  ( like .s)  .X c@ du ;

: copy-chunk  ( 'target len - 'target+len)
   -- cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+  t.WriteChunk  pop ;

: copy-region  ( a len)
   -- cr ." copy-region "  2dup swap u. u.
   256 /mod ( r q)  swap push  for   256 copy-chunk  next
                        pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)

: copy-ram
   h preserve  ram
   ram-copied @  dup 0= if  drop  region drop  then
   \m here  over -  copy-region
   \m here  ram-copied ! ;

( t.Hello will copy the flash code to RAM.)
: hi   ram-copied off  chatting on  >chat  t.Hello  get-regs  .regs ;

: chat-via   pop  chat-vector !  hi ;


( Set |@ and |c@ to _some_ form of target fetch. Prefer to get bytes from
  target if we're connected. This word is useful so we can set an initial
  state for target's  du  and  dis  so that inspect won't crash when it
  runs |@ to get a default ea.)

: >target  chatting @ if  >chat ^  then  >image ;


( Define our own key bindings for memory dumping and disassembly. We'll
  default to host bindings if there isn't one in our array. This way we
  only have to define the "delta" between host and target behaviours.)

128 array hc08-seekeys

( Default key action is to run host key code)
host-seekeys hc08-seekeys  128 cells cmove

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes  ( set field width)
   >image   dup .addr  dup .hex-bytes
   chatting @ if
      -valid
      >chat   dup _addr  dup .hex-bytes
      -valid
   then
   drop ( a) ;

( So we can easily look at the signature embedded into the image.)
: 1dump-chars  ( a)
   hex-bytes
   >target
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   drop ;

hc08-seekeys  -1  du-mode dumping        >target  skip+  skip-  1dump        ( a - a')
hc08-seekeys  -1  du-mode dumping-chars  >target  skip+  skip-  1dump-chars  ( a - a')
hc08-seekeys  -1  du-mode disasming      >target  dis+   dis-   1dis         ( a - a')

hc08-seekeys 'seekeys !    ( switch over to our bindings)

key: d  ( a - a 0)   dumping        0 ;
key: C  ( a - a 0)   dumping-chars  0 ;  ( small c is "call")
key: i  ( a - a 0)   disasming      0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)
( make an alias so we can still get to host's du)
: _du  du ;

: du  ( a - a')    dumping    inspect ;
: dis  ( a - a')   disasming  inspect ;


forth
: .r   .regs ;

: run      copy-ram  set-regs  t.Run ;  ( don't wait for target)
: runwait  run  get-regs ;   ( wait for target)

: call  ( pc)  pc!  runwait .regs ;
: kick  ( pc)  pc!  run ;  ( when the code you're calling doesn't speak
                             the same protocol as running code)

: 'reset   \l Vreset image-@ ;
: reset    'reset  call ;  ( MSP430 version has a delay between run and get-regs)
: go       'reset  kick ;


( Getting ready to test interactively - time for a real meta-compiler!)

.ifdef threaded

__meta

2 zvar ip  ( interpretation pointer; _pre_incremented)
2 zvar rp  ( return stack pointer; also _pre_incremented)
2 zvar up  ( user pointer; I hope to have multi-tasking support!)

( These are for communication, but not for standalone targets.)
2 zvar s0  ( data stack pointer - bottom)
2 zvar sp  ( data stack pointer - top)

__host

0 constant #scratch  ( number of "scratch" bytes on top of target stack)

meta
: s0  chat-sp @ ;    ( bottom of target's D stack)
: r0  \m s0  64 - ;  ( bottom of target's R stack; room for 32 values on D)
: sp!  ( target-sp)    \l sp t! ;
: sp@  ( - target-sp)  \l sp t@ ;

( XXX Use chat-sp as bottom of stack; swi frame is above it. Push data
  stack values below chat-sp. Target stub will do -6 # ais to set initial
  stack, and 6 # ais before returning to monitor - and to host. A kludge,
  but not being able to set the target SP, this is what we can do.

  Except that doesn't work. It sets SP to the stack _bottom_ not to the
  top.)

.else

( NOTE: top cell of target stack is _scratch_ - so allocate it but don't
  copy it back and forth.)

2 constant #scratch  ( number of "scratch" bytes on top of target stack)

meta
: r0  chat-sp @ ;    ( bottom of target's R stack)
: s0  \m r0  64 - ;  ( bottom of target's D stack; room for 32 values on R)
: sp!  ( target-sp)    #scratch -  hx! ;
: sp@  ( - target-sp)              hx@  #scratch + ;

.then  ( not threaded)

: depth  \m s0 \m sp@ -  \m cell/ ;
: u.  u. ;
: .  . ;
: .s  .s ;
: du   du ;
: dis  dis ;

forth
.ifdef post-increment-read-write

: stack>  ( "push" stack to target)
   depth 8 min  ( more than that would be silly)
   \m s0 over \m cells -  dup \m sp! ( top of D stack) t.SetAddr
   for  t.WriteW  next  ( copy each cell as a word to D stack) ;

( XXX should this set hx when done?)
: stack<  ( "pop" stack from target)
   \m depth 0 max 8 min  ( more than that would be silly)  =if
   \m sp@ t.SetAddr  dup ( depth)
   for  t.ReadW  pop 2push  next  ( starting with top, push to R)
   for  2pop push  next  ( pop from R to reverse order)  ^  then  drop ;

.else

( XXX Build stacks on pad then read/write in one go?)
( Or build them in the image?)

#16 buffer stackpad

: stack>  ( "push" stack to target)
   stackpad m !  depth 8 min  ( more than that would be silly)
   for  >lohi m& m&  next  ( copy each cell as a word to stackpad)
   m @ stackpad - ( len)  \m s0 over -  ( target)  dup \m sp!  swap  stackpad
   ( target len buf) t.WriteChunk ;

( XXX should this set hx when done?)
: stack<  ( "pop" stack from target)
   \m depth 0 max 8 min  ( more than that would be silly)  =if
   \m sp@ ( target)  over \m cells  ( len)  stackpad  t.ReadChunk
   dup  ( depth)  stackpad m ! ( do this after ReadChunk)
   for  m* m* hilo>  pop 2push  next  ( starting with top, push to R)
   for  2pop push  next  ( pop from R to reverse order)  ^  then  drop ;

.then

( XXX Should we try to automatically connect to target?)
: ?chatting
   chatting @ 0= if  error" not connected to target"  then ;

: remote  ( cfa)  ( execute target word on stack)
   ?chatting  pc!  stack>  runwait  stack< ;

: rx  ( cfa)  ( execute target non-forth word)
   ?chatting  pc!          runwait ;

-:  ."  (interacting with target)"  ;
-:
      .meta. find  if  execute  ^  then
    .labels. find  if  execute  remote  ^  then
    .target. find  if  execute  remote  ^  then
.ifdef no-number  complain ; .else
                                                 number ;
.then
mode __target
