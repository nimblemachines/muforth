( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

( Thoughts about generating a glossary for words defined in Forth.)

( I think I have to define "(" in C, and add to it and to (linked-name)
( a "deferred" pointer.. Since I currently define "(" and "new" in startup,
| it's hard to see how to trick it into doing something complicated with
| comments, and as words are being defined.)

( OR have some way to skip a "prelude" the second time thru... The prelude
| words - like ( and new - would be defined when startup is loaded for
| real, but skipped when it is loaded just to generate the glossary.
|
| Something like (* followed by )

( Or (*prelude ... code ... prelude*)

( The C version would be a no-op. The "glossary" version would skip all the
| code between the two tokens.)

( OR have a special interpreter mode read in the file, in which we search
| the real .forth. first - where our special words are - before searching
| .fake-forth. The trouble with *this* approach is that we redefine the
| interpreter and compiler halfway thru startup...
|
| It's almost like we have to "instrument" both the C and Forth
| interpreters to do this, which seems stupid and wrong. Why isn't this
| easier?)

( Every time we see a comment, we capture it as a token.
|
| When new is executed, it copies the token to captured-word-comment, and
| zeroes the token.
|
| The next comment, if there is one, will be a stack comment.
|
| When do we print out the glossary entry? For colon words, when we execute
| the first [ ?
|
| We can reload startup.mu4 if we create a fake .forth. and point it to the
| last word defined in C; rejigger a few words to get them into "glossary"
| mode, and then reload.
)

2variable captured-comment
: (   char ) parse  captured-comment 2! ;

2variable captured-word-comment
: (linked-name)  ( a u chain)
   push  
   captured-comment 2@  captured-word-comment 2!  0 0 captured-comment 2!
   pop (linked-name) ;

compiler
: ]   \c [  ??? ;
forth

sealed .forth.  ( yes, a new one! to fake out startup.mu4.)

( First word defined in startup.mu4 is ( .)
' ( >link @  ( last word defined in C)  .forth. !

( maybe **prelude** to **prelude**)
( Skip prelude by throwing away tokens between (*prelude and prelude*)
: (*prelude
   begin  token =while  " prelude*)" string= until ;

ld startup.mu4
