
( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

( Generate ANSI sequences to change text colors on a console or terminal.)


( A good reference for ANSI terminal sequences is, oddly enough, from Microsoft:
|
| https://learn.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences
)


( NOTE: I think *strongly* that the 8 colors + brightness model should be
| *deprecated with extreme prejudice*, and that we all use either 24-bit
| colors [preferred], or find some readable colors within the 6x6x6 color
| cube available with the 256-color palette.)

-- STRONGLY DEPRECATED! ------------------------------------------------------

( Sequence of each subset of 8 colors.
| Index, in binary, is 421
|                      bgr)

0 constant black    ( +black = grey)
1 constant red
2 constant green             (   4       2      1 )
3 constant yellow   ( -blue  =         green + red)
4 constant blue
5 constant magenta  ( -green = blue          + red)
6 constant cyan     ( -red   = blue  + green      )
7 constant white

-- END OF DEPRECATION. -------------------------------------------------------


( We need the following, whether we are using 8-color, 256-color, or
| true-color, to specify whether the following color is for the foreground
| or the background.)

( XXX Having these around is annoying. I'd like to get rid of them.)

( Foreground color.)
30 constant fg

( Background color.)
40 constant bg

( It is also necessary to provide a "bright?" flag, which is either true of
| false. With proper terminal setup [the setting is usually called
| something like "use bold for bright colors"], we can use this to choose a
| *bold* font, which gives us another way to distinguish particular kinds of
| text.)


( Generating the terminal ESC sequences.)

.ifndef ansi-color-alternative

( Pictured numeric style - more flexible)

( Begin a sequence. Since we are doing this right-to-left, this is really
| the *end* of the sequence.)

: <esc   <#  char m hold ;

( End a sequence. Ie, write the *first* characters that are printed.)
: esc>   " [" "hold  0 #> ;
-- : esc>   " ESC[" "hold  0 #> ;  ( for testing)

: attrib    ( n)  #s drop ;
: attrib;   ( n)  char ; hold  attrib ;
: ext-attrib;   ( fg/bg ext)  attrib;  8 + attrib; ;
: ?bright   ( bright?)  if 1 attrib; then ;

( Generate an ESC sequence for a 3-bit *indexed* color with brightness.)
: (ansi-8-color)  ( bright? fg/bg color# - a u)
   radix preserve  decimal  <esc  + attrib ?bright  esc> ;

( Generate an ESC sequence for an 8-bit *indexed* color with brightness.)
: (ansi-256-color)  ( bright? fg/bg color# - a u)
   radix preserve  decimal  <esc
   ( color#) attrib  ( fg/bg) 5 ext-attrib;  ( bright?) ?bright  esc> ;

( Generate an ESC sequence for a 24-bit RGB color with brightness.)
: (ansi-rgb-color)  ( bright? fg/bg rgb - a u)
   radix preserve  decimal  <esc
   >3210 ( 0 r g b)  attrib attrib; attrib; drop
   ( fg/bg) 2 ext-attrib;  ( bright?) ?bright  esc> ;

.ifdef testing
: 8c  (ansi-8-color) type ;
: 256c  (ansi-256-color) type ;
: tc  (ansi-rgb-color) type ;
.then

.else ( alternative implementation)

( NOTE: This is mostly here as an implementation comparison. The "pictured
| numeric" code above - the default - is more flexible because it generates
| a string *in memory* rather than printing it out piecemeal.)

( print-in-order style - easier to read than pictured numeric?)
: <esc   ." [" ;
-- : <esc   ." ESC[" ;  ( for testing)
: esc>   char m emit ;

: attrib    (u.) type ;
: attrib;   attrib  char ; emit ;
: ext-attrib;  ( fg/bg ext)  swap 8 + attrib;  attrib; ;
: ?bright   ( bright?)  if 1 attrib; then ;

( ANSI escape sequence)
( NOTE: This code can erroneously generate bold+bg - eg "1;43" - when given
| a color number greater than 7.)

( Generate an ESC sequence for a 3-bit *indexed* color with brightness.)
: ansi-8-color  ( bright? fg/bg color#)
   radix preserve  decimal  <esc  rot ?bright  + attrib esc> ;

( Generate an ESC sequence for an 8-bit *indexed* color with brightness.)
: ansi-256-color  ( bright? fg/bg color#)
   radix preserve  decimal  <esc  rot ?bright  swap 5 ext-attrib;  attrib esc> ;

( Generate an ESC sequence for a 24-bit RGB color with brightness.)
: ansi-rgb-color   ( bright? fg/bg rgb)
   radix preserve  decimal  <esc  rot ?bright  swap 2 ext-attrib;
   >lohi >lohi ( b g r)  attrib;  attrib;  attrib  esc> ;

.ifdef testing
: 8c  ansi-8-color ;
: 256c  ansi-256-color ;
: tc  ansi-rgb-color ;
.then

.then
