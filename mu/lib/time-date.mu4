( This file is part of muforth: https://muforth.dev/
|
| Copyright 2002-2024 David Frech. (Read the LICENSE for details.)


( Time and date support.)

( Time, timestamp.)
: ##     ( n)   # #  drop  ;

( Separators)
: ":   char : hold  ;
: "-   char - hold  ;
: ".   char . hold  ;
: ||   bl hold  ;  ( a space)

: month"  ( n - a n)  ( n is 0--11)
   3 *  z" janfebmaraprmayjunjulaugsepoctnovdec" +  3 ;

( clock returns a count of seconds since 1970-jan-01 00:00:00 UTC,
| the Unix "epoch".)

( leaves a 0 which is consumed by #>)
: <date>   ( year month mday yday - 0)
   drop  ## "-  month" "hold "-  #s ( year) ;

: <hh:mm:ss>  ( hms)        ## ":  ## ":  ## ;
: <hh:mm>     ( hms)  drop ( sec)  ## ":  ## ;

: (time")  ( year month mday yday hour min sec 'zone #zone - a #)
   radix preserve  decimal  <#  "hold  ( zone)  ||  <hh:mm:ss>  ||  <date>  #> ;

: (short-time")  ( year month mday yday hour min sec 'zone #zone - a #)
   radix preserve  decimal  <#  2drop ( zone)  <hh:mm>  ||  <date>  #> ;

: (date")  ( year month mday yday hour min sec 'zone #zone - a #)
   radix preserve  decimal  <#  2drop 2drop drop  <date>  #> ;

: date    ( epoch - y m d yday)  local-time  2drop 2drop drop ;

: utc"    ( epoch - a n)         utc  (time") ;
: date"   ( epoch - a n)  local-time  (date") ;
: time"   ( epoch - a n)  local-time  (time") ;
: short-time"
          ( epoch - a n)  local-time  (short-time") ;

( Better primitives? More elegant, certainly.)
: s->sm    ( s - s m)    60 u/mod ;
: s->smh   ( s - s m h)  s->sm  s->sm ;
: s->smhd  ( s - s m h d)  s->smh  24 u/mod ;
: sm->s    60 * + ;
: smh->s   sm->s  sm->s ;
: smhd->s  24 * +  smh->s ;

( If anyone had any idea how long a year really is, we could also define
| s->smhdy and smhdy->s. ;-)

: smhq->s  6 * +  smh->s ;  ( sec min hr quarter-day)
: smhdy->s  [ 365 3 * 366 + #] * ( quarter-days/yr)  push 4 * pop +  smhq->s ;
