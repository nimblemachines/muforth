( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( Fiddle around with the console colour palette, on Linux.)

ld target/common/endian.mu4  ( need >3210)

48 buffer palette  ( 16 colours, one byte each of R, G, B)

: get-palette   0 "4b70 palette ioctl ;
: set-palette   0 "4b71 palette ioctl ;

: >pal  ( n - offset)  3 *  palette + ;
: pal!  ( r g b n)    >pal push  r@ 2 + c!  r@ 1+ c!  pop c! ;
: pal@  ( n - r g b)  >pal push  r@ c@  r@ 1+ c@  pop 2 + c@ ;

( Loading a sequence of colors into the palette.)
: palette!  ( rgbn .. rgbn+m-1 n n+m-1)   do  >3210 i pal!  drop  -1 +loop ;

( Generate a new palette, using a simple technique to "whiten" colors.)
( Four byte values: floor ceil +floor +ceil)
variable component
   "dd77_aa55 component !  ( Little-endian hack!)
   -- "dd77_aa44 component !  ( Little-endian hack!)

: comp@  ( 'component exists - color 'component)
   over swap if  1+  then  c@  swap ;

: get-components  ( i - r g b)
   push  component
   r@ 8 and if  2 +  then  ( use "bright" versions)
   r@ 1 and comp@ ( red)
   r@ 2 and comp@ ( green)
   pop 4 and comp@ ( blue)
   drop ;

( Generate a new palette.)
( XXX We don't always want black to be #000000.)
: gen
   ( black is special)  0 0 0  0 pal!
   16 1 do  i get-components  i pal!  loop ;


( terminal ESC sequences)

( print-in-order style - easier to read than pictured numeric?)
: <esc   ." [" ;
-- : <esc   ." ESC[" ;  ( uncomment this line to see the escape sequences)

: esc>   char m emit ;

: attrib    (u.) type ;
: attrib;   attrib  char ; emit ;
: 2attrib;  ( fg/bg attrib)  swap 8 + attrib;  attrib; ;

defer .ansi

( ANSI escape sequence)
( NOTE: This code can erroneously generate bold+bg - eg "1;43" - when given
  a color number greater than 7.)

-: ( color# fg/bg)
   radix preserve  decimal  <esc
   over  16 u< if  swap 8 u/mod  ?if attrib; then  + attrib  esc>  ^ then
                                 5  2attrib;         attrib  esc> ;

( -truecolor means use the terminal's existing colors - 8, 16, or 256.)
: -truecolor  [ #]  is .ansi ;   -truecolor ( default)

( Truecolor escape sequence)
: .true   ( r g b fg/bg)
   radix preserve  decimal
   <esc  2  2attrib;  swap rot  ( b g r)  attrib;  attrib;  attrib  esc> ;

( +truecolor means read the color from our palette table at a particular
  index, and set it as the current foreground using the "truecolor" escape
  sequence.)

-: ( color# fg/bg)   push  pal@  ( r g b)  pop  .true ;
: +truecolor  [ #]  is .ansi ;

: fg  ( color#)  30 .ansi ;
: bg  ( color#)  40 .ansi ;

: normal  <esc  0 attrib  esc> ;

( Sequence of each subset of 8 colors.
  Index, in binary, is 421
                       bgr)

0 constant black    ( +black = grey)
1 constant red
2 constant green             (   4       2      1 )
3 constant yellow   ( -blue  =         green + red)
4 constant blue
5 constant magenta  ( -green = blue          + red)
6 constant cyan     ( -red   = blue  + green      )
7 constant white

( Show all colors.)
: +fg  ( color# - boldcolor#)  8 +  fg ;  ( assume color# was 0 to 7; use "bold" color)
: .color  ( n)  dup fg  7 and  char 0 + dup emit emit ;  ( double digit)
: cc  normal  16 0 do  i .color  loop  normal ;

( Test "close" colors. These pairs - red + magenta, green + cyan, yellow +
  white - all differ in that one has a blue component, and the other lacks
  blue. For good measure, I put the two pure blues in there as well.)

: tt
   normal
   cr    red fg  ."  red "    magenta fg  ."  magenta "
       green fg  ."  green "     cyan fg  ."  cyan "   blue fg  ."  blue "
      yellow fg  ."  yellow "   white fg  ."  white"
   cr   red +fg  ." +red "   magenta +fg  ." +magenta "
      green +fg  ." +green "    cyan +fg  ." +cyan "  blue +fg  ." +blue "
     yellow +fg  ." +yellow "  white +fg  ." +white"
   normal ;


( cube666 shows the 6x6x6 color cube that exists inside the "standard set"
  of 256 colors, which are organized as follows:

  * the first 16 are the "ansi" palette;
  * the next 216 are the 6x6x6 cube;
  * the last  24 are a greyscale ramp.

  cube666 only prints the 216 colors that are part of the color cube.

  NOTE: this requires a 256-color-capable terminal or emulator.)

: cube666
   radix preserve  6 radix !  ( base 6!!)
   normal  6 0 do  cr  6 0 do  cr  6 0 do
      k  6 *  j +   6 *  i +  dup  16 + fg  ( set color)
      <#  # # #  #> type space  ( print color number)
   loop  loop  loop  normal ;

( Print the greyscale ramp subset of the 256-color space.)
: grey24
   normal  cr  24 0 do
      i [ 16  6 6 6 * *  + #] + fg  ( set color)
      i <#  # #  #> type space  ( print color number)
   loop  normal ;

( What about a 16x16x16 cube? We need to use truecolor escape sequences to
  print this, so it will look terrible if you terminal or emulator does not
  understand these sequences.)

: cube-true
   radix preserve  hex
   normal  16 0 do  cr  16 0 do  cr  16 0 do
      k 16 *  j 16 *   i 16 *  ( r g b)  30 .true  ( set color)
      k 16 *  j +   16 *  i +   <#  # # #  #> type space  ( print color number)
   loop  loop  loop  normal ;

( Print the 16-color greyscale "diagonal" of the above cube.)
: grey-true
   radix preserve  hex
   normal  cr  16 0 do
      i 16 *  i 16 *   i 16 *  ( r g b)  30 .true  ( set color)
      i 16 *  i +  16 *  i +   <#  # # #  #> type space  ( print color number)
   loop  normal ;


( Exporting palettes in textual form.)

compiler  ( We want to print a string with embedded " chars.)
: .string   \ (")  \f char string,  drop  \ type ;
forth
: .rgb   ( r g b)  rot .h8  swap .h8  .h8 ;
: .rgb_  .rgb space ;

( Export a palette so we can use set-console-colors to set it.)
: export-linux
   out-channel preserve  >stdout
   .string }
# Put this into your .bash_login or .profile.

# If we are on a Linux console, set the colors to something decent.
if [ "$TERM" = "linux" ]; then
    # Sequence (+color is bright) is:
    # black red green yellow blue magenta cyan white
    # grey +red +green +yellow +blue +magenta +cyan +white

    ~/set-console-colors \
        }
    8 0 do  i pal@  .rgb_  loop  ." \
        "
   16 8 do  i pal@  .rgb_  loop  ."

fi
"  ;

( HTML-style RGB color.)
: .#rgb_   ." #" .rgb_ ;

( Export a palette suitable for inclusion on nimblemachines.com.)
: export-nm
   out-channel preserve  >stdout
    8 0 do  i pal@  .#rgb_  loop  cr
   16 8 do  i pal@  .#rgb_  loop  cr ;

( Quoted HTML-style RGB color for JS array.)
: ."#rgb   char " emit  ." #" .rgb  char " emit ;
: ,_   ." , " ;

( Export a palette to use with the ChromeOS terminal emulator, hterm. It
  needs to be in the format of a Javascript array with quoted RGB colors.)
: export-json
   out-channel preserve  >stdout
   cr  ." [ "
    8 0 do  i pal@  ."#rgb ,_  loop  cr
   15 8 do  i pal@  ."#rgb ,_  loop
           15 pal@  ."#rgb  ."  ]"  cr ;


( Color schemes.)

hex

( Based on Monokai from base16 collection - https://github.com/chriskempson/base16
  I got them from asciinema, who borrowed from above URL.)

: monokai
   272822 f92672 a6e22e f4bf75 66d9ef ae81ff a1efe4 f8f8f2
   75715e f92672 a6e22e f4bf75 66d9ef ae81ff a1efe4 f9f8f5  0 #15 palette! ;

( Solarized!

  color: #839496;
  background-color: #002b36;

  NOTE: the background color cannot be set using ANSI 16-color sequences
  because it is *not* one of the first 8 colors! Not sure what Ethan S was
  thinking ...
)
: solarized-original
   073642 dc322f 859900 b58900 268bd2 d33682 2aa198 eee8d5
   002b36 cb4b16 586e75 657b83 839496 6c71c4 93a1a1 fdf6e3  0 #15 palette! ;

( Copied over from Comonad, an iMac. I came up with this by futzing with
  the color settings in the Terminal app.)
( Highlight/cursor: EEAB3B (iMac profile)
: comonad
   2E2E2E  9F2138  8DA61F  B29249  555CA9  99619B  678C96  D2D2D2
   2E2E2E  9F2138  8DA61F  B29249  555CA9  99619B  678C96  D2D2D2  0 #15 palette! ;
                                                           ( ^-should be 88% grey)
