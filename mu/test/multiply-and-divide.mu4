( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Let's model the bit-by-bit shift-and-add multiply and shift-and-subtract
  divide algorithms so we can see how they work.)

hex

: .group   # # # # char _ hold ;
: .b33  radix preserve binary  <# 8 for  .group  next  # #>  type ;
: .h9   radix preserve hex     <# 2 for  .group  next  # #>  type ;
: .show  cr dup .b33  3 spaces  .h9 ;

( ddend = d/ivi/dend
  dsor  = d/ivi/sor)

: -c   0ffff_ffff and  ( strip off any high bits - carry can only be one bit) ;

: divstep  ( ddend dsor - 'ddend 'dsor)  push
   -c 2* dup .show  r@ -  dup .show  dup 0< if  ( borrowed)  r@ +  pop  ^  then  1+  pop ;

: um/mod  ( uddend udsor - urem uquot)
   #16 <<  ( shift divisor up)
   #16 for  divstep  over .show  cr  next  drop
   dup #16 >> ( urem)  swap 0ffff and ( uquot) ;

7fff 0abcd *  5555 +
7fff um/mod

( mcand = m/ultipli/cand
  mer   = m/ultipli/er)

: u2/c  ( u - u2/ carry)   dup u2/ -c  swap 1 and ;

: umulstep  ( umcand umer carry - umcand umer' carry')
   over .show  if  over +  then  dup .show  u2/c ;

: um*  ( umcand umer - udprod)
   swap  #16 <<  ( shift multiplicand up)  swap  u2/c
   #16 for  umulstep  over .show  cr  next  drop nip ;


: 2/c  ( n - 2/ carry)   dup 2/  swap 1 and ;

: mulstep  ( mcand mer carry - mcand mer' carry')
   over .show  if  over -  then  dup .show  u2/c ;

: m*   ( mcand mer - dprod)
   swap  #16 <<  ( shift multiplicand up)  swap  u2/c
   #15 for  umulstep  over .show  cr  next
             mulstep  over .show  cr        drop nip ;
